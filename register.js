// Generated by IcedCoffeeScript 1.3.3b
(function() {
  var CityInfo, CountryInfo, HALF_AN_HOUR, LoginToken, PostItem, Process, RegionInfo, SOCKET_IO_CHANNELS, Settings, UniqueLocation, UploadPhoto, UploadVideo, UploadVoice, User, WishList, abortedFlag, app, capitalize, certificate, channel, channels, checkupload, createSocketIOChannel, cronJob, db, express, formidable, fs, generateResponse, generateUniqueId, iced, io, isMobilePhone, job, key, kybos, loadUser, loadUserAjax, logger, mailer, mainPort, mkdirs, nib, path, postingSystem, random, savefields, service, sessionStore, settings, socketIOMainChannel, socketIOPort, stylus, tmp, transformToLocationString, url, _, __iced_deferrals, __iced_k, __iced_k_noop,
    _this = this;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  express = require("express");

  path = require("path");

  _ = require("underscore");

  stylus = require("stylus");

  nib = require("nib");

  Settings = require("settings");

  fs = require("fs");

  formidable = require("formidable");

  url = require("url");

  kybos = require("./util/Kybos");

  random = kybos.Kybos();

  settings = new Settings(path.join(__dirname, "config/environment.js")).getEnvironment();

  key = settings.key;

  certificate = settings.certificate;

  mainPort = settings.mainPort;

  socketIOPort = settings.socketIOPort;

  socketIOMainChannel = settings.socketIOMainChannel;

  service = require("./util/service");

  loadUser = service.loadUser;

  loadUserAjax = service.loadUserAjax;

  generateUniqueId = service.uniqueId;

  generateResponse = service.generateResponse;

  logger = service.logger;

  mailer = service.mailer;

  capitalize = service.capitalizeFirstLetters;

  transformToLocationString = transformToLocationString;

  mkdirs = service.mkdirs;

  LoginToken = service.LoginToken;

  User = service.User;

  PostItem = service.PostItem;

  WishList = service.WishList;

  CityInfo = service.CityInfo;

  RegionInfo = service.RegionInfo;

  CountryInfo = service.CountryInfo;

  isMobilePhone = service.isMobilePhone;

  UniqueLocation = service.UniqueLocation;

  db = service.db;

  Process = [];

  abortedFlag = [];

  UploadPhoto = require("./server-lib/uploadphoto");

  UploadVideo = require("./server-lib/uploadvideo");

  UploadVoice = require("./server-lib/uploadvoice");

  checkupload = require("./server-lib/checkupload");

  savefields = require("./server-lib/savefields");

  postingSystem = require("./server-lib/posting-system");

  app = express.createServer();

  app.dynamicHelpers({
    session: function(req, res) {
      return req.session;
    }
  });

  sessionStore = new settings.mongoSessionStore(settings.sessionDBOptions);

  app.configure(function() {
    app.use(express.errorHandler(settings.errorHandling));
    app.use(express["static"](settings.publicDir, {
      maxAge: settings.staticMaxAge
    }));
    app.use(express.bodyParser());
    app.use(express.cookieParser({
      maxAge: settings.cookieMaxAge
    }));
    app.use(express.session({
      secret: settings.cookieSecret,
      maxAge: new Date(Date.now() + 3600000),
      store: sessionStore,
      key: settings.sessionKey
    }));
    app.set("views", __dirname + "/views");
    app.set("view engine", "jade");
    app.set("view options", {
      layout: false
    });
    app.use(stylus.middleware({
      debug: true,
      force: true,
      src: __dirname + "/views",
      dest: __dirname + "/public",
      compile: function(str, path) {
        return stylus(str).set("filename", path).set("compress", true).use(nib());
      }
    }));
    app.use(express["static"](__dirname + "/public"));
    app.use(express["static"](__dirname + "/templates"));
    app.use(app.router);
    return delete express.bodyParser.parse['multipart/form-data'];
  });

  app.post("/api/register/", function(req, res) {
    var city, cityAndState, country, email, latitude, longitude, neighborhood, password, state, user, username, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
    username = req != null ? (_ref = req.body) != null ? _ref.username : void 0 : void 0;
    email = req != null ? (_ref1 = req.body) != null ? _ref1.email : void 0 : void 0;
    password = req != null ? (_ref2 = req.body) != null ? _ref2.password : void 0 : void 0;
    city = req != null ? (_ref3 = req.body) != null ? _ref3.city : void 0 : void 0;
    state = city;
    country = req != null ? (_ref4 = req.body) != null ? _ref4.country : void 0 : void 0;
    neighborhood = req != null ? (_ref5 = req.body) != null ? _ref5.neighborhood : void 0 : void 0;
    latitude = req != null ? (_ref6 = req.body) != null ? _ref6.latitude : void 0 : void 0;
    longitude = req != null ? (_ref7 = req.body) != null ? _ref7.longitude : void 0 : void 0;
    console.log(username + " " + email + " " + city + " " + state + " " + country + " " + latitude + " " + longitude);
    if (username && email && password && city && state && country) {
      cityAndState = city.split(",");
      if (cityAndState.length === 2) {
        city = cityAndState[0];
        state = cityAndState[1];
      }
      user = new User({
        "username": username,
        "email": email != null ? email.toLowerCase() : void 0,
        "password": password,
        "location": [parseFloat(longitude), parseFloat(latitude)],
        "address": {
          "country": capitalize(country),
          "state": capitalize(state),
          "city": capitalize(city),
          "neighborhood": capitalize(neighborhood)
        },
        "role": "user",
        "status": "inactive"
      });
      console.log("user " + JSON.stringify(user));
      return user.save(function(err, result) {
        var data, message, session;
        if (err) {
          return res.send(generateResponse("error", err.stack, null, null));
        } else {
          data = {
            "username": user.email,
            "link": settings.registrationURL + "/confirm/" + user._id
          };
          mailer.sendWithTemplate(user.email, settings.mainEmailAccount, "MeListing Registration Confirmation", "registration-email-template.txt", data);
          logger.info("sign up user success " + user.email);
          req.session.user = user.email;
          session = req.sessionID;
          user.hashedPassword = generateUniqueId();
          message = "Your account has been created successfully. An email with an instruction to activate \nyour account is being sent out shortly.";
          return res.send(generateResponse("success", message, user, session));
        }
      });
    } else {
      return res.send(generateResponse("error", "The information provided for registration can not be empty.", null, null));
    }
  });

  app.post("/api/checkUsernameAvailability/", function(req, res) {
    var username, _ref;
    username = req != null ? (_ref = req.body) != null ? _ref.username : void 0 : void 0;
    if (username) {
      return User.findOne({
        username: username
      }, function(err, user) {
        if (err) {
          res.send(generateResponse("error", "We are unable to check the username at the moment due to the server error.", null, null));
        }
        if (user) {
          return res.send(generateResponse("taken", "Username is already taken.", user, null));
        } else {
          return res.send(generateResponse("success", "The username is available for registration", null, null));
        }
      });
    } else {
      return res.send(generateResponse("error", "The username provided can not be empty", null, null));
    }
  });

  app.post("/api/checkEmailDuplication/", function(req, res) {
    var email, _ref;
    email = req != null ? (_ref = req.body) != null ? _ref.email : void 0 : void 0;
    if (email) {
      return User.findOne({
        email: email
      }, function(err, user) {
        if (err) {
          res.send(generateResponse("error", "We are unable to check email duplication at the moment due to server error.", null, null));
        }
        if (user) {
          return res.send(generateResponse("duplicate", "The email is already found in the system.", user, null));
        } else {
          return res.send(generateResponse("success", "The email is not in the system.  The user is able register with the email", null, null));
        }
      });
    } else {
      return res.send(generateResponse("error", "The email provided can not be empty", null, null));
    }
  });

  app.get("/api/getAllValidEmailDomainNames/", function(req, res) {
    var domainNames, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    domainNames = "";
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "register.coffee"
      });
      service.getAllValidEmailDomainNames(service.db, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return domainNames = arguments[0];
          };
        })(),
        lineno: 182
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (domainNames === "") console.log("result is null");
      return res.send(domainNames);
    });
  });

  app.post("/api/logout/", loadUserAjax, function(req, res) {
    if (req.session) {
      LoginToken.remove({
        username: req.currentUser.username
      }, function() {
        return {};
      });
      res.clearCookie("logintoken");
      req.session.destroy(function() {
        return {};
      });
    }
    return res.send(generateResponse("success", "The user has successfully logged out.", null, null));
  });

  app.post("/api/login/", function(req, res) {
    var email, password, rememberMe, _ref, _ref1, _ref2;
    email = req != null ? (_ref = req.body) != null ? _ref.email : void 0 : void 0;
    password = req != null ? (_ref1 = req.body) != null ? _ref1.password : void 0 : void 0;
    rememberMe = (req != null ? (_ref2 = req.body) != null ? _ref2.remember_me : void 0 : void 0) === "true" ? true : false;
    console.log(email);
    console.log(password);
    if ((email != null) !== "" && (password != null) !== "" && typeof email !== "undefined" && typeof password !== "undefined") {
      return User.findOne({
        email: email,
        status: "active"
      }, function(err, user) {
        var address, loginToken, session, _ref3, _ref4, _ref5, _ref6, _ref7;
        if (err) console.log(err);
        if (user) {
          console.log("user lat " + (user != null ? (_ref3 = user.location) != null ? _ref3["0"] : void 0 : void 0));
          if (user && user.authenticate(password)) {
            req.session.userId = user.id;
            session = req.sessionID;
            address = user != null ? user.address : void 0;
            if (rememberMe) {
              loginToken = new LoginToken({
                username: user != null ? user.username : void 0,
                rememberme: true,
                address: {
                  city: address != null ? address.city : void 0,
                  state: address != null ? address.state : void 0,
                  country: address != null ? address.country : void 0,
                  neighborhood: address != null ? address.neighborhood : void 0
                },
                location: [parseFloat(user != null ? (_ref4 = user.location) != null ? _ref4["0"] : void 0 : void 0), parseFloat(user != null ? (_ref5 = user.location) != null ? _ref5["1"] : void 0 : void 0)]
              });
              return loginToken.save(function(err, token) {
                if (err) console.log(err);
                if (token) {
                  return res.send(generateResponse("success", "Your account has been authenticated successfully.", token, session));
                } else {
                  return res.send(generateResponse("error", "Error occurred while trying to save session token.", null, null));
                }
              });
            } else {
              loginToken = new LoginToken({
                username: user.username,
                rememberme: false,
                address: {
                  city: address != null ? address.city : void 0,
                  state: address != null ? address.state : void 0,
                  country: address != null ? address.country : void 0,
                  neighborhood: address != null ? address.neighborhood : void 0
                },
                location: [parseFloat(user != null ? (_ref6 = user.location) != null ? _ref6["0"] : void 0 : void 0), parseFloat(user != null ? (_ref7 = user.location) != null ? _ref7["1"] : void 0 : void 0)]
              });
              return loginToken.save(function(err, token) {
                if (err) console.log(err);
                if (token) {
                  return res.send(generateResponse("success", "Your account has been authenticated successfully.", token, session));
                } else {
                  return res.send(generateResponse("error", "Error occurred while trying to save session token.", null, null));
                }
              });
            }
          } else {
            return res.send(generateResponse("error", "Authentication Error - email or/and password are in incorrect.", null, null));
          }
        } else {
          return res.send(generateResponse("error", "There is an error while trying to retrieve your account.  The account information provided is not found in the system.", null, null));
        }
      });
    } else {
      return res.send(generateResponse("error", "The email and password passed in can not be empty", null, null));
    }
  });

  app.post("/api/resetpassword/:email", function(req, res) {
    if (req.params.email) {
      return User.findOne({
        email: req.params.email
      }, function(err, user) {
        var data;
        if (user) {
          data = {
            "username": user.email,
            "link": settings.registrationURL + "/resetpassword/" + user.hashedPassword
          };
          mailer.sendWithTemplate(user.email, settings.mainEmailAccount, "MeListing Account Reset", "account-reset-email-template.txt", data);
          return res.send(generateResponse("success", "An email with the instruction to reset your account has been sent.", null, null));
        } else {
          return res.send(generateResponse("error", "There was an error resetting your account.  Account is not found.  Sorry for the inconvenience. Please contact the admin@melisting.com for assistance.", null, null));
        }
      });
    } else {
      return res.send(generateResponse("error", "There is an error while trying to retrieve your account.", null, null));
    }
  });

  app.post("/register", function(req, res) {
    var user;
    logger.info(req.body.email);
    if (req.body.email && req.body.password) {
      user = new User(req.body);
      logger.info(user.email);
      user.set("status", "inactive");
      user.set("role", "user");
      return user.save(function(err) {
        var data, errorText;
        if (err) {
          logger.error(err.stack);
          logger.error(service.interpretError(err));
          errorText = service.interpretError(err);
          if (errorText === "Duplicate Unique Key") {
            errorText = "Email given already exists in the database.";
          }
          return res.render("register", {
            error: errorText,
            user: user
          });
        } else {
          logger.info(user.email + " user is created");
          data = {
            "username": user.email,
            "link": settings.registrationURL + "/confirm/" + user._id
          };
          mailer.sendWithTemplate(user.email, settings.mainEmailAccount, "MeListing Registration Confirmation", "registration-email-template.txt", data);
          return res.render("index");
        }
      });
    } else {
      return res.render("register", {
        error: "",
        user: ""
      });
    }
  });

  app.get("/confirm/:id", function(req, res) {
    if (req.params.id) {
      return User.findOne({
        _id: req.params.id
      }, function(err, user) {
        if (user) {
          user.status = "active";
          return user.save(function(err) {
            if (err) {} else {
              return res.render("confirm", {
                message: "",
                user: user
              });
            }
          });
        } else {
          return res.render("register", {
            error: "There was an error activating your account.  The key in the path link provided was either corrupted or misstyped.  Please try signing up again.  Sorry for the inconvinience. Please contact the admin@melisting.com if the problem persists.",
            user: ""
          });
        }
      });
    } else {
      return res.render("register", {
        error: "You have requested a wrong page.  Please sign up to confirm your activation",
        user: ""
      });
    }
  });

  app.get("/resetpassword/:hashedPassword", function(req, res) {
    if (req.params.hashedPassword) {
      return User.findOne({
        hashedPassword: req.params.hashedPassword
      }, function(err, user) {
        if (user) {
          user.status = "active";
          return user.save(function(err) {
            if (err) {
              return res.render("resetpassword", {
                error: "There is an error occurred while trying to save your new password.  Please try again later or contact admin@melisting.com for further assistance.",
                user: user
              });
            } else {
              return res.render("resetpassword", {
                error: "",
                user: user
              });
            }
          });
        } else {
          return res.render("register", {
            error: "There was an error trying to reset your account.  The key in the path link provided was either corrupted or misstyped.  Please try signing up again.  Sorry for the inconvinience. Please contact the admin@melisting.com if the problem persists.",
            user: ""
          });
        }
      });
    } else {
      return res.render("register", {
        error: "You have requested a wrong page.  Please sign up to obtain new account",
        user: ""
      });
    }
  });

  app.post("/resetpassword", function(req, res) {
    if (req.body.email && req.body.password) {
      return User.findOne({
        email: req.body.email
      }, function(err, user) {
        if (user) {
          user.status = "active";
          user.password = req.body.password;
          return user.save(function(err) {
            if (err) {} else {
              return res.render("index");
            }
          });
        } else {
          return res.render("register", {
            error: "There was an error trying to reset your account.  The key in the path link provided was either corrupted or misstyped.  Please try signing up again.  Sorry for the inconvinience. Please contact the admin@melisting.com if the problem persists.",
            user: ""
          });
        }
      });
    } else {
      return res.render("register", {
        error: "There was an error trying to reset your account.  The key in the path link provided was either corrupted or misstyped.  Please try signing up again.  Sorry for the inconvinience. Please contact the admin@melisting.com if the problem persists.",
        user: ""
      });
    }
  });

  app.get("/login/", function(req, res) {
    console.log(req.cookies.session);
    sessionStore.get(req.cookies.session, function(err, session) {
      if (err) {
        return console.log(err);
      } else {
        this.session = session;
        console.log("#########################################");
        return console.log(this.session);
      }
    });
    return res.send("session is valid " + req.session);
  });

  app.get("/pages/postitem/:id", function(req, res) {
    return PostItem.findOne({
      _id: req.params.id
    }, function(err, item) {
      if (err) console.log(err);
      console.log("/postitem is called");
      return res.render("postitem", {
        "postitem": item
      });
    });
  });

  app.get("/api/category/:city/:state/:country/", function(req, res) {
    var result, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    result = "";
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "register.coffee"
      });
      service.getCategories(service.db, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return result = arguments[0];
          };
        })(),
        lineno: 441
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (categories === "") console.log("result is null");
      return res.send(result);
    });
  });

  app.get("/api/category/total/:city/:state/:country/", function(req, res) {
    var categories, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    categories = "";
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "register.coffee"
      });
      service.getCategoriesWithTotal(service.db, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return categories = arguments[0];
          };
        })(),
        lineno: 449
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (categories === "") console.log("result is null");
      return res.send(categories);
    });
  });

  app.get("/api/getCategories/", function(req, res) {
    var categories, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    categories = "";
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "register.coffee"
      });
      service.getCategories(service.db, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return categories = arguments[0];
          };
        })(),
        lineno: 458
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (categories === "") console.log("result is null");
      return res.send(categories);
    });
  });

  app.get("/api/getCategoriesWithTotal/", function(req, res) {
    var categories, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    categories = "";
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "register.coffee"
      });
      service.getCategoriesWithTotal(service.db, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return categories = arguments[0];
          };
        })(),
        lineno: 466
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (categories === "") console.log("result is null");
      return res.send(categories);
    });
  });

  app.post("/api/category/:city/:state/:country/", function(req, res) {
    var result, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    result = "";
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "register.coffee"
      });
      service.getCategories(service.db, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return result = arguments[0];
          };
        })(),
        lineno: 474
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (categories === "") console.log("result is null");
      return res.send(result);
    });
  });

  app.post("/api/category/total/:city/:state/:country/", function(req, res) {
    var categories, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    categories = "";
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "register.coffee"
      });
      service.getCategoriesWithTotal(service.db, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return categories = arguments[0];
          };
        })(),
        lineno: 482
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (categories === "") console.log("result is null");
      return res.send(categories);
    });
  });

  app.post("/api/getCategories/", function(req, res) {
    var categories, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    categories = "";
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "register.coffee"
      });
      service.getCategories(service.db, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return categories = arguments[0];
          };
        })(),
        lineno: 491
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (categories === "") console.log("result is null");
      return res.send(categories);
    });
  });

  app.post("/api/getCategoriesWithTotal/", function(req, res) {
    var categories, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    categories = "";
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "register.coffee"
      });
      service.getCategoriesWithTotal(service.db, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return categories = arguments[0];
          };
        })(),
        lineno: 499
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (categories === "") console.log("result is null");
      return res.send(categories);
    });
  });

  app.get("/", function(req, res) {
    var categories, categoriesWithTotal, err, loggedin, loginToken, session, token, token$, token$$, ua, ___iced_passed_deferral, __iced_deferrals, __iced_k, _ref,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    ua = req.headers['user-agent'].toLowerCase();
    session = req != null ? (_ref = req.session) != null ? _ref.id : void 0 : void 0;
    loggedin = false;
    token$ = token$$ = err = null;
    categories = categoriesWithTotal = null;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "register.coffee"
      });
      service.getCategoriesWithTotal(service.db, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return categoriesWithTotal = arguments[0];
          };
        })(),
        lineno: 514
      }));
      __iced_deferrals._fulfill();
    })(function() {
      var _ref1;
      categories = Object.keys(categoriesWithTotal);
      if (isMobilePhone(ua)) {
        return __iced_k(res.render("mobile", {
          "categories": categories,
          "categoriesWithTotal": categoriesWithTotal
        }));
      } else {
        token = req != null ? (_ref1 = req.cookies) != null ? _ref1.logintoken : void 0 : void 0;
        (function(__iced_k) {
          if (token) {
            console.log("token " + token);
            token = JSON.parse(token);
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "register.coffee"
              });
              LoginToken.findOne({
                username: token.username
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return token$ = arguments[1];
                  };
                })(),
                lineno: 531
              }));
              __iced_deferrals._fulfill();
            })(function() {
              if (err) console.log(err);
              (function(__iced_k) {
                var _ref2, _ref3, _ref4, _ref5, _ref6, _ref7;
                if (token$) {
                  console.log("found token$ " + token$.username);
                  loggedin = true;
                  loginToken = new LoginToken({
                    username: token$ != null ? token$.username : void 0,
                    rememberme: true,
                    address: {
                      city: token$ != null ? (_ref2 = token$.address) != null ? _ref2.city : void 0 : void 0,
                      state: token$ != null ? (_ref3 = token$.address) != null ? _ref3.state : void 0 : void 0,
                      country: token$ != null ? (_ref4 = token$.address) != null ? _ref4.country : void 0 : void 0,
                      neighborhood: token$ != null ? (_ref5 = token$.address) != null ? _ref5.neighborhood : void 0 : void 0
                    },
                    location: [parseFloat(token$ != null ? (_ref6 = token$.location) != null ? _ref6["0"] : void 0 : void 0), parseFloat(token$ != null ? (_ref7 = token$.location) != null ? _ref7["1"] : void 0 : void 0)]
                  });
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "register.coffee"
                    });
                    loginToken.save(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          err = arguments[0];
                          return token$$ = arguments[1];
                        };
                      })(),
                      lineno: 542
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    if (err) console.log(err);
                    return __iced_k(token$$ ? (token$.remove(), token = token$$) : token = "");
                  });
                } else {
                  console.log("not found token$ ");
                  return __iced_k(token = "");
                }
              })(function() {
                return __iced_k(res.render("index", {
                  "categories": categories,
                  "loggedin": loggedin,
                  "username": token != null ? token.username : void 0,
                  "session": session,
                  "token": JSON.stringify(token)
                }));
              });
            });
          } else {
            console.log("token no token " + token);
            return __iced_k(res.render("index", {
              "categories": categories,
              "loggedin": false,
              "username": "",
              "session": "",
              "token": ""
            }));
          }
        })(__iced_k);
      }
    });
  });

  app.get("/api/alluserinfo/:username/", function(req, res) {
    var err, error, postitem, postitemMap, postitems, result, user, username, wishlist, wishlistMap, wislist, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    postitems = wishlist = user = error = "";
    username = req.params.username;
    (function(__iced_k) {
      if (username) {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "register.coffee"
          });
          PostItem.find({
            username: username
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return postitems = arguments[1];
              };
            })(),
            lineno: 582
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (err) {
            console.log(err);
            error = error.concat(err);
          }
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "register.coffee"
            });
            WishList.find({
              username: username
            }, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return wislist = arguments[1];
                };
              })(),
              lineno: 586
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (err) {
              console.log(err);
              error = error.concat(", ").concat(err);
            }
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "register.coffee"
              });
              User.findOne({
                username: username
              }, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return user = arguments[1];
                  };
                })(),
                lineno: 590
              }));
              __iced_deferrals._fulfill();
            })(function() {
              return __iced_k(err ? (console.log(err), error = error.concat(", ").concat(err)) : void 0);
            });
          });
        });
      } else {
        return __iced_k();
      }
    })(function() {
      var _i, _j, _len, _len1, _ref;
      if (error) {
        return res.send(generateResponse("error", "User info query encounter error: " + error, null, null));
      } else {
        result = {};
        postitemMap = {};
        wishlistMap = {};
        if (wishlist) {
          _ref = wishlist.postitem;
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            postitem = _ref[_i];
            wishlistMap[postitem.id] = postitem;
          }
        }
        if (postitems) {
          for (_j = 0, _len1 = postitems.length; _j < _len1; _j++) {
            postitem = postitems[_j];
            postitemMap[postitem.id] = postitem;
          }
        }
        result["user"] = user;
        result["postitemMap"] = postitemMap;
        result["wishlist"] = wishlistMap;
        return res.send(generateResponse("success", "User info query was successfully.", result, {}));
      }
    });
  });

  app.get("/api/postitems/:username/", function(req, res) {
    return PostItem.find({}, function(err, postitems) {
      var postitem, result, _i, _len;
      if (err) res.send(err);
      console.log("/postitem is called");
      console.log(postitems);
      result = {};
      for (_i = 0, _len = postitems.length; _i < _len; _i++) {
        postitem = postitems[_i];
        result[postitem.id] = postitem;
      }
      return res.send(generateResponse("success", "PostItems query by username.", result, {}));
    });
  });

  app.get("/api/postitems/:city/:state/:country/", function(req, res) {
    return PostItem.find({}, function(err, postitems) {
      var postitem, result, _i, _len;
      if (err) res.send(err);
      console.log("/postitem is called");
      console.log(postitems);
      result = {};
      for (_i = 0, _len = postitems.length; _i < _len; _i++) {
        postitem = postitems[_i];
        result[postitem.id] = postitem;
      }
      return res.send(generateResponse("success", "PostItems query by city, state.", result, {}));
    });
  });

  app.get("/api/wishlist/:username/", function(req, res) {
    console.log("wishlist");
    return WishList.find({
      username: req.params.username
    }, function(err, wishlist) {
      if (err) res.send(err);
      return res.send(generateResponse("success", "Array of wishlist by the user.", wishlist, {}));
    });
  });

  app["delete"]("/api/wishlist/:id/", function(req, res) {
    var wishlistID;
    wishlistID = req.params.id;
    console.log("wishlist delete");
    return WishList.findById(wishlistID, function(err, wishlist) {
      if (err) {
        console.log("err " + err);
        return res.send(generateResponse("error", "Remove WishList fail. " + err, wishlistID, {}));
      } else {
        wishlist.remove();
        return res.send(generateResponse("success", "Remove WishList successfully.", wishlistID, {}));
      }
    });
  });

  app.get("/api/getProcessID/", function(req, res) {
    var result;
    result = random.uint32().toString();
    return res.send(result);
  });

  app.get("/api/uploadStatus/:processId/", function(req, res) {
    var processId;
    processId = req.params.processId;
    return res.send(Process[processId]);
  });

  app.post("/api/abortPosting/", function(req, res) {
    var processId;
    processId = req.body.processId;
    if (processId !== "" && abortedFlag[processId] !== void 0) {
      abortedFlag[processId] = true;
      return res.send(generateResponse("success", "The posting is aborted.", null, null));
    } else {
      return res.send(generateResponse("success", "The posting id given is not found.", null, null));
    }
  });

  app.post("/api/postitem/:processId/", function(req, res) {
    return service.addPostingItem(req, res, abortedFlag, Process);
  });

  app.post("api/savephotos/:processId", function(req, res) {
    return service.saveUploadData(req, res, abortedFlag, Process, "photo");
  });

  app.post("api/savevoice/:processId", function(req, res) {
    return service.saveUploadData(req, res, abortedFlag, Process, "voice");
  });

  app.post("api/savevideo/:processId", function(req, res) {
    return service.saveUploadData(req, res, abortedFlag, Process, "video");
  });

  app.post("api/deletephoto/:processId", function(req, res) {
    return service.deletePhoto(req, res, abortedFlag, Process);
  });

  app.post("api/deletevoice/:processId", function(req, res) {
    return service.deleteVoice(req, res, abortedFlag, Process);
  });

  app.post("api/deletevideo/:processId", function(req, res) {
    return service.deleteVideo(req, res, abortedFlag, Process);
  });

  /*
  app.post "/api/editpostitem/:processId/", 
      (req, res) ->
        processId = req.params.processId
        abortedFlag[processId] = false;
        form = new formidable.IncomingForm()
        form.uploadDir = "./public/data"
        form.keepExtensions = false
        aborted = false
        beginfiles  = []
        overSizeFile = []
        files  = {}
        fields = {}
        _this=this
  
        form.addListener "progress",
             (recvd, expected) ->
               progress = (recvd / expected * 100).toFixed(2)
               Process[processId] = progress
        form.on "aborted", ()->
                abortedFlag[processId] = undefined
                for file in beginfiles
                  fs.unlink(file.path)
                logger.log "info", " (Posting module) The posting id : "+processId+" is aborted by user"
                res.send generateResponse "abort", "The posting is aborted by user", null, null 
            .on "fileBegin",
             (name, file) ->
                
                beginfiles.push file
            .on "error" ,
             (err) ->
                res.send generateResponse "error", err, null, null 
            .on "field",
             (field, value) ->
                if fields[field] is undefined
                  fields[field]=value
                else
                  if typeof fields[field] is "string"
                    fields[field] = [].concat( fields[field] );
                    fields[field].push value
                  else
                    fields[field].push value
  
            .on "file",
             (field, file) ->
                if(file.type.split("/")[0] is "image")
                  if file.size > 2500000
                    abortedFlag[processId]=true
                    overSizeFile.push field
                  else
                    files["photoFile"+photoNumber]=file
                    photoNumber++
  
                else if(file.type.split("/")[0] is "audio")
                  if file.size > 10000000
                    abortedFlag[processId]=true
                    overSizeFile.push field
                  else
                    files[field]=file
                else if(file.type.split("/")[0] is "video")
                  if file.size > 10000000
                    abortedFlag[processId]=true
                    overSizeFile.push field
                  else 
                    files[field]=file
            .on "end",
             ->
                item = 
                        "fields" : fields
                        "files" : files
                item.processId = processId;
                item._id = item.fields.id;
                item.photoId = item.fields.photoId;
                item.processType = item.fields.processType
                postitem = undefined
                await PostItem.findOne {_id:item._id,status:"published"}, defer err,postitem
                if !abortedFlag[processId] and postitem
                  abortedFlag[processId] = undefined
  
                  if item.fields.fileType is "photo"
                    if item.processType is "delete"
                      item.files.photoFile0 = "none"
                      numberOfPhotos = postitem.numberOfPhotos
                      numberOfPhotos--
                      postitem.set 'numberOfPhotos',numberOfPhotos
                    else
                      numberOfPhotos = postitem.numberOfPhotos
                      numberOfPhotos++
                      postitem.set 'numberOfPhotos',numberOfPhotos
                    await postitem.save defer err
                    if err
                      res.send generateResponse "error", "the post item is not available or published", null, null 
                    else
                      postingJob.publish JSON.stringify(item) , (err, data, id)->
                          logger.log "info", " (Posting module) Add process id "+processId+" to Posting system" 
                      ,false, item.processId
                      res.send generateResponse "success", "add the post item to process successfully", null, null 
          
                  else if item.fields.fileType is "voice"
                    if item.processType is "delete" then item.files.voiceFile = "none"
                    postitem.set 'isVoiceProcessing',true
                    await postitem.save defer err
                    if err
                      res.send generateResponse "error", "the post item is not available or published", null, null 
                    else
                      postingJob.publish JSON.stringify(item) , (err, data, id)->
                          logger.log "info", " (Posting module) Add process id "+processId+" to Posting system" 
                      ,false, item.processId
                      res.send generateResponse "success", "add the post item to process successfully", null, null 
                    
                  else if item.fields.fileType is "video"
                    if item.processType is "delete" then item.files.videoFile = "none"
                    postitem.set 'isVideoProcessing',true
                    await postitem.save defer err
                    if err
                      res.send generateResponse "error", "the post item is not available or published", null, null 
                    else
                      postingJob.publish JSON.stringify(item) , (err, data, id)->
                        logger.log "info", " (Posting module) Add process id "+processId+" to Posting system" 
                      ,false, item.processId
                      res.send generateResponse "success", "add the post item to process successfully", null, null 
                    
                else
                  for file in beginfiles
                    fs.unlink(file.path)
                  abortedFlag[processId] = undefined
                  if postitem
                    if overSizeFile.length > 0
                      message=""
                      for file in overSizeFile
                        message+=file+","
                      logger.log "info", " (Posting module) The posting id : "+processId+" is aborted because oversize file" 
                      res.send generateResponse "oversize", message, null, null  
                    else
                      logger.log "info", " (Posting module) The posting id : "+processId+" is aborted by user"
                      res.send generateResponse "abort", "The posting is aborted by user", null, null 
                  else
                    logger.log "info", " (Posting module) The posting id : "+processId+" is aborted because the item is not available"
                    res.send generateResponse "abort", "the item is not available", null, null 
  
  
        form.parse req
  */


  app.get("/pages/directory/:listby/:alphabet/:sort/:page", function(req, res) {
    var AToZ, a, alphabet, character, listby, numberOfPages, page, row, rows, sort, username, users, z, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    page = req.params.page;
    listby = req.params.listby;
    alphabet = req.params.alphabet;
    sort = 1;
    if (req.params.sort === "desc") sort = -1;
    AToZ = [];
    AToZ.push("all");
    a = "a".charCodeAt(0);
    z = "z".charCodeAt(0);
    for (character = _i = a; a <= z ? _i <= z : _i >= z; character = a <= z ? ++_i : --_i) {
      AToZ.push(String.fromCharCode(character));
    }
    rows = [];
    users = void 0;
    numberOfPages = void 0;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "register.coffee"
      });
      service.getUserPostingTotal(service.db, alphabet, sort, page, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            users = arguments[0];
            return numberOfPages = arguments[1];
          };
        })(),
        lineno: 880
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (listby === "username") {
        for (username in users) {
          row = {};
          row.username = username;
          row.location = users[username].location;
          row.numOfItem = users[username].numberOfPosting;
          rows.push(row);
        }
      } else if (listby === "location") {
        for (username in users) {
          row = {};
          row.username = username;
          row.location = users[username].location;
          row.numOfItem = users[username].numberOfPosting;
          rows.push(row);
        }
        if (sort === 1) {
          rows.sort(function(a, b) {
            if (a.location.toLowerCase() < b.location.toLowerCase()) return -1;
            if (a.location.toLowerCase() > b.location.toLowerCase()) return 1;
            return 0;
          });
        }
      } else if (listby === "number") {
        for (username in users) {
          row = {};
          row.username = username;
          row.location = users[username].location;
          row.numOfItem = users[username].numberOfPosting;
          rows.push(row);
        }
        if (sort === 1) {
          rows.sort(function(a, b) {
            return a.numOfItem - b.numOfItem;
          });
        } else {
          rows.sort(function(a, b) {
            return b.numOfItem - a.numOfItem;
          });
        }
      }
      return res.render("directory", {
        "AToZ": AToZ,
        "rows": rows,
        "listby": listby,
        "alphabet": alphabet,
        "sort": req.params.sort,
        "numberOfPages": numberOfPages,
        "page": page,
        "paginationShowNumber": settings.paginationShowNumber
      });
    });
  });

  app.get("/pages/postinglist/:username/:sortby/:sort/:page", function(req, res) {
    var count, date, err, item, items, numberOfPages, page, postitemsPerPage, row, rows, sort, sortby, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    page = req.params.page;
    username = req.params.username;
    sortby = req.params.sortby;
    sort = 1;
    rows = [];
    if (req.params.sort === "desc") sort = -1;
    count = void 0;
    numberOfPages = void 0;
    postitemsPerPage = settings.postitemsPerPage;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "register.coffee"
      });
      PostItem.count({
        "username": username,
        "status": "published"
      }, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            err = arguments[0];
            return count = arguments[1];
          };
        })(),
        lineno: 943
      }));
      __iced_deferrals._fulfill();
    })(function() {
      numberOfPages = Math.ceil(count / postitemsPerPage);
      (function(__iced_k) {
        if (sortby === "title") {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "register.coffee"
            });
            PostItem.find({
              "username": username,
              "status": "published"
            }).sort("title", sort).skip((page - 1) * postitemsPerPage).limit(postitemsPerPage).execFind(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  err = arguments[0];
                  return items = arguments[1];
                };
              })(),
              lineno: 946
            }));
            __iced_deferrals._fulfill();
          })(function() {
            var _i, _len;
            if (err) {
              logger.log("info", " (directory module) cannot query err :" + err);
            } else {
              for (_i = 0, _len = items.length; _i < _len; _i++) {
                item = items[_i];
                row = {};
                row.item_id = item._id;
                row.title = item.title;
                row.location = item.address.city + ", " + item.address.state + ", " + item.address.country;
                date = new Date(item.createdDate);
                row.date = date.toLocaleTimeString() + " " + date.toLocaleDateString();
                rows.push(row);
              }
            }
            return __iced_k();
          });
        } else {
          (function(__iced_k) {
            if (sortby === "location") {
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "register.coffee"
                });
                PostItem.find({
                  "username": username,
                  "status": "published"
                }).skip((page - 1) * postitemsPerPage).limit(postitemsPerPage).execFind(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return items = arguments[1];
                    };
                  })(),
                  lineno: 960
                }));
                __iced_deferrals._fulfill();
              })(function() {
                var _i, _len;
                if (err) {
                  logger.log("info", " (directory module) cannot query err :" + err);
                } else {
                  for (_i = 0, _len = items.length; _i < _len; _i++) {
                    item = items[_i];
                    row = {};
                    row.item_id = item._id;
                    row.title = item.title;
                    row.location = item.address.city + ", " + item.address.state + ", " + item.address.country;
                    date = new Date(item.createdDate);
                    row.date = date.toLocaleTimeString() + " " + date.toLocaleDateString();
                    rows.push(row);
                  }
                  if (sort === 1) {
                    rows.sort(function(a, b) {
                      if (a.location.toLowerCase() < b.location.toLowerCase()) {
                        return -1;
                      }
                      if (a.location.toLowerCase() > b.location.toLowerCase()) {
                        return 1;
                      }
                      return 0;
                    });
                  } else {
                    rows.sort(function(a, b) {
                      if (b.location.toLowerCase() < a.location.toLowerCase()) {
                        return -1;
                      }
                      if (b.location.toLowerCase() > a.location.toLowerCase()) {
                        return 1;
                      }
                      return 0;
                    });
                  }
                }
                return __iced_k();
              });
            } else {
              (function(__iced_k) {
                if (sortby === "date") {
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "register.coffee"
                    });
                    PostItem.find({
                      "username": username,
                      "status": "published"
                    }).sort("createdDate", sort).skip((page - 1) * postitemsPerPage).limit(postitemsPerPage).execFind(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          err = arguments[0];
                          return items = arguments[1];
                        };
                      })(),
                      lineno: 988
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    var _i, _len;
                    if (err) {
                      logger.log("info", " (directory module) cannot query err :" + err);
                    } else {
                      for (_i = 0, _len = items.length; _i < _len; _i++) {
                        item = items[_i];
                        row = {};
                        row.item_id = item._id;
                        row.title = item.title;
                        row.location = item.address.city + ", " + item.address.state + ", " + item.address.country;
                        date = new Date(item.createdDate);
                        row.date = date.toLocaleTimeString() + " " + date.toLocaleDateString();
                        rows.push(row);
                      }
                    }
                    return __iced_k();
                  });
                } else {
                  return __iced_k();
                }
              })(__iced_k);
            }
          })(__iced_k);
        }
      })(function() {
        return res.render("postinglist", {
          "rows": rows,
          "username": username,
          "sortby": sortby,
          "sort": req.params.sort,
          "numberOfPages": numberOfPages,
          "page": page,
          "paginationShowNumber": settings.paginationShowNumber
        });
      });
    });
  });

  app.get("/pages/account-settings/", loadUser, function(req, res) {
    var loggedin, token, _ref;
    token = req != null ? (_ref = req.cookies) != null ? _ref.logintoken : void 0 : void 0;
    token = JSON.parse(token);
    loggedin = token ? true : false;
    return res.render("account-settings", {
      "loggedin": loggedin,
      "token": JSON.stringify(token)
    });
  });

  app.get("/pages/:name/", function(req, res) {
    return res.render(req.params.name);
  });

  app.get("/api/getCountries/", function(req, res) {
    var limit, result, term, urlParts, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    result = [];
    urlParts = url.parse(req.url, true);
    term = urlParts.query.term;
    limit = urlParts.query.maxRows;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "register.coffee"
      });
      service.getCountries(term, limit, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return result = arguments[0];
          };
        })(),
        lineno: 1044
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return res.send(result);
    });
  });

  app.get("/api/getCitiesByZipcode/", function(req, res) {
    var limit, result, term, urlParts, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    result = [];
    urlParts = url.parse(req.url, true);
    term = urlParts.query.term;
    limit = urlParts.query.maxRows;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "register.coffee"
      });
      service.getCitiesByZipcode(term, limit, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return result = arguments[0];
          };
        })(),
        lineno: 1053
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return res.send(result);
    });
  });

  app.get("/api/getCities/", function(req, res) {
    var ISO2, limit, result, term, urlParts, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    result = [];
    urlParts = url.parse(req.url, true);
    term = urlParts.query.term;
    limit = urlParts.query.maxRows;
    ISO2 = urlParts.query.ISO2;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "register.coffee"
      });
      service.getCities(term, limit, ISO2, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            return result = arguments[0];
          };
        })(),
        lineno: 1063
      }));
      __iced_deferrals._fulfill();
    })(function() {
      return res.send(result);
    });
  });

  app.get("/api/user/:username/", function(req, res) {
    var err, user, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    username = req.params.username;
    if (username) {
      user = err = null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "register.coffee"
        });
        User.findOne({
          "username": username
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return user = arguments[1];
            };
          })(),
          lineno: 1076
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return __iced_k(res.send(generateResponse("success", "Users has been retrieved successfully", user, null)));
      });
    } else {
      return __iced_k(res.send(generateResponse("error", "The id given for user search can not be empty.", null, null)));
    }
  });

  app["delete"]("/api/user/:username/", function(req, res) {
    var err, user$, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    username = req.params.username;
    if (username) {
      user$ = err = null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "register.coffee"
        });
        User.findOne({
          "username": username
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return user$ = arguments[1];
            };
          })(),
          lineno: 1087
        }));
        __iced_deferrals._fulfill();
      })(function() {
        return __iced_k(res.send(generateResponse("success", "Users has been removed successfully", user$, null)));
      });
    } else {
      return __iced_k(res.send(generateResponse("error", "The user given for user remove can not be empty.", null, null)));
    }
  });

  app.put("/api/user/:username/", function(req, res) {
    var err, user$, username, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    username = req.params.username;
    if (username) {
      user$ = err = null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "register.coffee"
        });
        User.findOne({
          "username": username
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return user$ = arguments[1];
            };
          })(),
          lineno: 1097
        }));
        __iced_deferrals._fulfill();
      })(function() {
        user$.username = user.username;
        user$.password = user.password;
        user$.email = user.email;
        user$.status = user.status;
        user$.save(function(err) {
          return console.log(err);
        });
        return __iced_k(res.send(generateResponse("success", "Users has been updated successfully", user$, null)));
      });
    } else {
      return __iced_k(res.send(generateResponse("error", "The user given for user remove can not be empty.", null, null)));
    }
  });

  app.get('/testEdit/', function(req, res) {
    return res.render('test');
  });

  app.get("/pages/mobile/", function(req, res) {
    return res.render("mobile", {});
  });

  app.listen(mainPort);

  HALF_AN_HOUR = 1800000;

  SOCKET_IO_CHANNELS = {};

  channels = [];

  (function(__iced_k) {
    __iced_deferrals = new iced.Deferrals(__iced_k, {
      filename: "register.coffee"
    });
    service.getAllDistinctLocationString(service.db, __iced_deferrals.defer({
      assign_fn: (function() {
        return function() {
          return channels = arguments[0];
        };
      })(),
      lineno: 1169
    }));
    __iced_deferrals._fulfill();
  })(function() {
    var _i, _len;
    io = require("socket.io").listen(socketIOPort);
    tmp = io.of("/" + socketIOMainChannel).on("connection", function(socket) {
      socket.on("postitem:published", function(postitem) {
        var channel, emitter;
        channel = service.transformToLocationString(postitem.address.city, postitem.address.state, postitem.address.country);
        createSocketIOChannel(channel);
        emitter = SOCKET_IO_CHANNELS[channel];
        return emitter.broadcast.emit("postitems", postitem);
      });
      return socket.on('disconnect', function() {
        return console.log("disconnect");
      });
    });
    createSocketIOChannel = function(channel) {
      if (!SOCKET_IO_CHANNELS[channel]) {
        return tmp = io.of("/" + channel).on("connection", function(socket) {
          SOCKET_IO_CHANNELS[channel] = socket;
          return socket.on('disconnect', function() {
            return console.log("disconnect");
          });
        });
      }
    };
    for (_i = 0, _len = channels.length; _i < _len; _i++) {
      channel = channels[_i];
      createSocketIOChannel(channel);
    }
    cronJob = require('cron').CronJob;
    return job = new cronJob("0 0 1 * 7", function() {
      return service.updateUniqueLocation(db);
    }, null, true, "America/New_York");
  });

}).call(this);
