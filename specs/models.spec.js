// Generated by IcedCoffeeScript 1.2.0t
(function() {
  var app, async, db, doc, express, models, mongoose, people, photo, _;

  express = require('express');

  _ = require('underscore');

  async = require('async');

  models = require('../models/models');

  mongoose = require('mongoose');

  db = null;

  app = express.createServer();

  models.defineModels(mongoose, function() {
    app.PostItem = mongoose.model('PostItem');
    app.User = mongoose.model('User');
    app.LoginToken = mongoose.model('LoginToken');
    app.Photo = mongoose.model('Photo');
    return db = mongoose.connect('mongodb://localhost/db');
  });

  people = [
    {
      email: 'user2@user.com',
      password: 'password',
      location: [12, 21],
      role: 'role'
    }, {
      email: 'user3@user.com',
      password: 'password',
      location: [12, 21],
      role: 'role'
    }
  ];

  photo = {
    'image': 'https://www.ai-class.com/course/video/quizquestion/26',
    'imageThumbnail': 'https://www.ai-class.com/course/video/quizquestion/26'
  };

  doc = new mongoose.Collection('app.User', db);

  describe('Test saving of PostItem', function() {
    this.item = null;
    beforeEach(function() {
      console.log('beforeEach Test saving of PostItem');
      return this.item = {
        title: 'title',
        username: 'wpoosanguansit',
        itemDescription: 'description',
        price: 10.00,
        category: 'Others',
        email: 'email@email.com',
        showEmail: true,
        exchangeOptions: ['pickup'],
        address: {
          country: 'usa',
          state: 'illinoi',
          city: 'chicago',
          neighborhood: 'down town'
        },
        location: [12, 21],
        status: 'published',
        video: 'https://www.ai-class.com/course/video/quizquestion/26',
        voice: 'https://www.ai-class.com/course/video/quizquestion/26',
        userRating: '2'
      };
    });
    return it('should save the PostItem and assign the shortkey', function() {
      var i, _i;
      console.log('In Test saving of PostItem');
      for (i = _i = 1; _i <= 1; i = ++_i) {
        console.log(i);
        this.postItem = new app.PostItem(this.item);
        this.photo = new app.Photo(photo);
        this.photo.save(function(err, result) {
          if (err) return console.log(err);
        });
        this.postItem.photos.push(this.photo);
        this.postItem.save(function(err, result) {
          if (err) console.log(err);
          expect(result.id).toBeDefined();
          expect(result.photos.length).toEqual(1);
          console.log(result.photos[0].image + " photo image");
          return asyncSpecDone();
        });
      }
      return asyncSpecWait();
    });
  });

  afterEach(function() {
    console.log('afterEach Test saving of PostItem');
    return app.PostItem.find({}, function(err, postitems) {
      if (err) return console.log(err);
    });
  });

  describe('Test LoginToken', function() {
    var loginToken;
    loginToken = null;
    beforeEach(function() {
      return loginToken = new app.LoginToken({
        username: "username",
        rememberme: true,
        address: {
          city: "address?.city",
          state: "address?.state",
          country: "address?.country",
          "neighborhood: address?.neighborhood": "neighborhood: address?.neighborhood"
        },
        location: [1, 2]
      });
    });
    it('should save the login token', function() {
      return loginToken.save(function(err, token) {
        if (err) return console.log(err);
      });
    });
    return afterEach(function() {
      return app.LoginToken.find({}, function(err, tokens) {
        var token, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = tokens.length; _i < _len; _i++) {
          token = tokens[_i];
          _results.push(console.log('remove token'));
        }
        return _results;
      });
    });
  });

}).call(this);
