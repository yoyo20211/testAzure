// Generated by IcedCoffeeScript 1.3.1b
(function() {

  define(['jquery', 'backbone', 'underscore', 'app-mobile/utils', 'app-mobile/routers/workspace'], function(jQuery, Backbone, _, utils, Workspace) {
    "use strict";

    var SetLocationDialog, abbreviatedStateName;
    abbreviatedStateName = {
      "alabama": "AL",
      "alaska": "AK",
      "arizona": "AZ",
      "arkansas": "AR",
      "california": "CA",
      "colorado": "CO",
      "connecticut": "CT",
      "delaware": "DE",
      "district of columbia": "DC",
      "florida": "FL",
      "georgia": "GA",
      "hawaii": "HI",
      "idaho": "ID",
      "illinois": "IL",
      "indiana": "IN",
      "iowa": "IA",
      "kansas": "KS",
      "kentucky": "KY",
      "louisiana": "LA",
      "maine": "ME",
      "maryland": "MD",
      "massachusetts": "MA",
      "michigan": "MI",
      "minnesota": "MN",
      "mississippi": "MS",
      "missouri": "MO",
      "montana": "MT",
      "nebraska": "NE",
      "nevada": "NV",
      "new hamspire": "NH",
      "new jersey": "NJ",
      "new mexico": "NM",
      "new york": "NY",
      "north carolina": "NC",
      "north dakota": "ND",
      "ohio": "OH",
      "oklahoma": "OK",
      "oregon": "OR",
      "pennsylvania": "PA",
      "rhode island": "RI",
      "south carolina": "SC",
      "south dakota": "SD",
      "tennessee": "TN",
      "texas": "TX",
      "utah": "UT",
      "vermont": "VT",
      "virginia": "VA",
      "washington": "WA",
      "west virginia": "WV",
      "wisconsin": "WI",
      "wyoming": "WY"
    };
    SetLocationDialog = Backbone.View.extend({
      initialize: function(options) {
        var $city, $country, $saveButton, ISO2, appView, $documentBody, isNumber, state,
          _this = this;
        appView = options.appView;
        isNumber = function(value) {
          if (void 0 === value || null === value) return false;
          if (typeof value === "number") return true;
          return !isNaN(value - 0);
        };
        this.routers = new Workspace();
        $documentBody = jQuery("body");
        ISO2 = appView.country;
        $city = jQuery("input#location-city-state-change-text-input");
        $country = jQuery("input#location-country-change-text-input");
        $saveButton = jQuery("a#save-location");
        $country.val("");
        $city.val("");
        $city.attr("disabled", true);
        state = abbreviatedStateName[appView.state] || appView.state;
        if (appView.city === appView.state) {
          $city.attr("placeholder", appView.city);
        } else {
          $city.attr("placeholder", appView.city + ", " + state);
        }
        $country.attr("placeholder", appView.country);
        $country.focus();
        $documentBody.off("focus", "input#location-country-change-text-input").on("focus", "input#location-country-change-text-input", function(event) {
          console.log("country focus city " + appView.city);
          $country.val("");
          $city.val("");
          $city.attr("disabled", true);
          $country.autocomplete({
            source: function(request, response) {
              if (isNumber(request.term)) {
                return jQuery.getJSON("/api/getCitiesByZipcode/", {
                  term: request.term,
                  maxRows: 12
                }, response);
              } else {
                return jQuery.getJSON("/api/getCountries/", {
                  term: request.term,
                  maxRows: 12
                }, response);
              }
            },
            minLength: 1,
            select: function(event, ui) {
              var latitude, longitude;
              if (ui.item.ISO2) {
                ISO2 = ui.item.ISO2;
              } else {
                longitude = ui.item.longitude;
                latitude = ui.item.latitude;
                $city.val(ui.item.address);
              }
              return $city.removeAttr("disabled");
            },
            autoFocus: true,
            autoSelect: true
          });
          $documentBody.off("blur", "input#location-country-change-text-input").on("blur", "input#location-country-change-text-input", function(event) {
            var autocomplete, matcher, myInput;
            autocomplete = jQuery(this).data("autocomplete");
            matcher = new RegExp("^" + jQuery.ui.autocomplete.escapeRegex(jQuery(this).val()) + "$", "i");
            myInput = jQuery(this);
            autocomplete.widget().children(".ui-menu-item").each(function() {
              var item;
              item = jQuery(this).data("item.autocomplete");
              if (matcher.test(item.label || item.value || item)) {
                autocomplete.selectedItem = item;
              }
            });
            if (autocomplete.selectedItem) {
              return autocomplete._trigger("select", event, {
                item: autocomplete.selectedItem
              });
            } else {
              return jQuery(this).val("");
            }
          });
          $documentBody.off("keyup", "input#location-country-change-text-input").on("keyup", "input#location-country-change-text-input", function(event) {
            var keycode;
            keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
            if (keycode === 13) {
              $city.focus();
              return event.preventDefault();
            }
          });
          $documentBody.off("focus", "input#location-city-state-change-text-input").on("focus", "input#location-city-state-change-text-input", function(event) {
            console.log("city inner first " + _this.appView.city);
            $city.val("");
            return $city.autocomplete({
              source: function(request, response) {
                return jQuery.getJSON("/api/getCities/", {
                  term: request.term,
                  ISO2: ISO2,
                  maxRows: 12
                }, response);
              },
              minLength: 1,
              select: function(event, ui) {
                _this.longitude = ui.item.longitude;
                return _this.latitude = ui.item.latitude;
              },
              autoFocus: true,
              autoSelect: true
            });
          });
          $documentBody.off("blur", "input#location-city-state-change-text-input").on("blur", "input#location-city-state-change-text-input", function(event) {
            var autocomplete, matcher, myInput;
            autocomplete = jQuery(this).data("autocomplete");
            matcher = new RegExp("^" + jQuery.ui.autocomplete.escapeRegex(jQuery(this).val()) + "$", "i");
            myInput = jQuery(this);
            autocomplete.widget().children(".ui-menu-item").each(function() {
              var item;
              item = jQuery(this).data("item.autocomplete");
              if (matcher.test(item.label || item.value || item)) {
                autocomplete.selectedItem = item;
              }
            });
            if (autocomplete.selectedItem) {
              return autocomplete._trigger("select", event, {
                item: autocomplete.selectedItem
              });
            } else {
              return jQuery(this).val("");
            }
          });
          $documentBody.off("keyup", "input#location-city-state-change-text-input").on("keyup", "input#location-city-state-change-text-input", function(event) {
            var keycode;
            keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
            if (keycode === 13) {
              jQuery(this).blur();
              $saveButton.focus();
              return event.preventDefault();
            }
          });
          return event.preventDefault();
        });
        $documentBody.off("click", "a#save-location-button").on("click", "a#save-location-button", function(event) {
          console.log("click save");
          return window.history.back();
        });
        return $documentBody.off("click", "a#cancel-location-button").on("click", "a#cancel-location-button", function(event) {
          console.log("click close");
          return utils.historySwitch("prev");
        });
      },
      events: {
        "click a#save-location-button": "saveLocation",
        "click #cancel-location-button": "closeLocation"
      },
      render: function() {
        console.log("render");
        return this.routers.showLocationDialog();
      },
      saveLocation: function(event) {
        return console.log("save location");
      },
      closeLocation: function(event) {
        console.log("close location");
        return utils.historySwitch("prev");
      }
    });
    return SetLocationDialog;
  });

}).call(this);
