// Generated by IcedCoffeeScript 1.3.1b
(function() {

  define(['jquery', 'backbone', 'underscore', 'app-mobile/models/postitems', 'app-mobile/routers/workspace', 'jade!app-mobile/templates/category-list-view', 'app-mobile/views/postitemdetailview', 'app-mobile/views/mapitview'], function(jQuery, Backbone, _, PostItems, Workspace, categoryListViewTemplate, PostItemDetailView, MapItView) {
    "use strict";

    var CategoryListView;
    CategoryListView = Backbone.View.extend({
      el: jQuery("#category-list"),
      routers: new Workspace(),
      events: {
        "click .back": "previousPage",
        "click .listview-postitem-detail": "postItemDetail",
        "click .map-it": "mapIt"
      },
      initialize: function(options) {
        this.category = options.category;
        this.postitems = new PostItems();
        return this;
      },
      render: function() {
        var _this = this;
        melisting.utils.loadPrompt("Loading items...");
        this.postitems.fetch({
          success: function(collection, response) {
            return collection.deferred.resolve();
          },
          error: function(collection, response) {
            console.log('error fetch');
            throw new Error("PostItems fetch did not get the collection from API");
          }
        });
        this.postitems.deferred.done(function() {
          var $el;
          console.log('success fetch ' + _this.postitems.length);
          $el = jQuery(_this.el);
          $el.empty();
          $el.html(categoryListViewTemplate({
            postitems: _this.postitems
          }));
          _this.routers.category();
          $el.trigger("enhance");
          return $el.listview().trigger("create");
        });
        return this;
      },
      previousPage: function() {
        return this.routers.root();
      },
      postItemDetail: function(event) {
        var postItemId;
        postItemId = jQuery(event.currentTarget).attr("id");
        console.log(postItemId);
        this.postItemDetailView = new PostItemDetailView({
          postitem: null
        });
        return this.postItemDetailView.render();
      },
      mapIt: function(event) {
        console.log("map it");
        this.mapItView = new MapItView({});
        return this.mapItView.render();
      }
    });
    return CategoryListView;
  });

}).call(this);
