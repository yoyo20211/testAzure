// Generated by IcedCoffeeScript 1.3.3b
(function() {
  var abbreviatedStateName, isNumber, key, parseCityAndState, rpc, username, validateCategory, validateCity, validateCountry, validateDescription, validateEmail, validatePassword, validatePrice, validateTitle, validateUsername, validateZipcode,
    __slice = [].slice,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  window.iced = {
    Deferrals: (function() {

      function _Class(_arg) {
        this.continuation = _arg;
        this.count = 1;
        this.ret = null;
      }

      _Class.prototype._fulfill = function() {
        if (!--this.count) return this.continuation(this.ret);
      };

      _Class.prototype.defer = function(defer_params) {
        var _this = this;
        ++this.count;
        return function() {
          var inner_params, _ref;
          inner_params = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          if (defer_params != null) {
            if ((_ref = defer_params.assign_fn) != null) {
              _ref.apply(null, inner_params);
            }
          }
          return _this._fulfill();
        };
      };

      return _Class;

    })(),
    findDeferral: function() {
      return null;
    }
  };
  window.__iced_k = window.__iced_k_noop = function() {};

  username = null;

  key = "key" + Math.floor(Math.random() * 100000000 % 100000000);

  jQuery.noConflict();

  rpc = new easyXDM.Rpc({
    remote: "http://listingserver.cloudapp.net:7575/js/easyXDM/cors/index.html",
    remoteHelper: "http://listingserver.cloudapp.net:7575/js/easyXDM/name.html",
    swf: "http://listingserver.cloudapp.net:7575/js/easyXDM/easyxdm.swf",
    local: "http://listingserver.cloudapp.net:7575/js/easyXDM/name.html"
  }, {
    remote: {
      request: {}
    }
  });

  abbreviatedStateName = {
    "alabama": "AL",
    "alaska": "AK",
    "arizona": "AZ",
    "arkansas": "AR",
    "california": "CA",
    "colorado": "CO",
    "connecticut": "CT",
    "delaware": "DE",
    "district of columbia": "DC",
    "florida": "FL",
    "georgia": "GA",
    "hawaii": "HI",
    "idaho": "ID",
    "illinois": "IL",
    "indiana": "IN",
    "iowa": "IA",
    "kansas": "KS",
    "kentucky": "KY",
    "louisiana": "LA",
    "maine": "ME",
    "maryland": "MD",
    "massachusetts": "MA",
    "michigan": "MI",
    "minnesota": "MN",
    "mississippi": "MS",
    "missouri": "MO",
    "montana": "MT",
    "nebraska": "NE",
    "nevada": "NV",
    "new hamspire": "NH",
    "new jersey": "NJ",
    "new mexico": "NM",
    "new york": "NY",
    "north carolina": "NC",
    "north dakota": "ND",
    "ohio": "OH",
    "oklahoma": "OK",
    "oregon": "OR",
    "pennsylvania": "PA",
    "rhode island": "RI",
    "south carolina": "SC",
    "south dakota": "SD",
    "tennessee": "TN",
    "texas": "TX",
    "utah": "UT",
    "vermont": "VT",
    "virginia": "VA",
    "washington": "WA",
    "west virginia": "WV",
    "wisconsin": "WI",
    "wyoming": "WY"
  };

  validateEmail = function(email) {
    var reEmail;
    reEmail = /^[A-Za-z0-9][a-zA-Z0-9._-][A-Za-z0-9]+@([a-zA-Z0-9.-]+\.)+[a-zA-Z0-9.-]{2,4}$/;
    return email != null ? email.match(reEmail) : void 0;
  };

  validateUsername = function(username) {
    return (username != null ? username.length : void 0) >= 6 && username.length <= 18;
  };

  validatePassword = function(password) {
    var enoughRegex, mediumRegex, strongRegex;
    strongRegex = new RegExp("^(?=.{8,})(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*\\W).*$", "g");
    mediumRegex = new RegExp("^(?=.{7,})(((?=.*[A-Z])(?=.*[a-z]))|((?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[0-9]))).*$", "g");
    enoughRegex = new RegExp("(?=.{6,}).*", "g");
    return strongRegex.test(password) || mediumRegex.test(password) || enoughRegex.test(password);
  };

  validateCountry = function(country) {
    return true;
  };

  validateCity = function(cityAndState) {
    this.stack = parseCityAndState(cityAndState);
    if (this.stack.length === 1 || this.stack.length === 2) return true;
    return false;
  };

  validateTitle = function(title) {
    return (title != null ? title.length : void 0) > 5;
  };

  validateDescription = function(description) {
    return (description != null ? description.length : void 0) > 5;
  };

  validatePrice = function(price) {
    return price !== "" && isNumber(price);
  };

  validateCategory = function(category) {
    return (category != null ? category.length : void 0) > 3;
  };

  validateZipcode = function(zipcode) {
    var zipcodePattern;
    zipcodePattern = /^\d{5}$|^\d{5}-\d{4}$/;
    return zipcodePattern.test(zipcode);
  };

  isNumber = function(value) {
    if (void 0 === value || null === value) return false;
    if (typeof value === "number") return true;
    return !isNaN(value - 0);
  };

  parseCityAndState = function(cityAndState) {
    this.stack = cityAndState.split(",");
    return this.stack;
  };

  jQuery(window).load(function() {
    var $alert, $categoryFilterSection, $cityDisplay, $container, $countryDisplay, $detailCategory, $detailEmail, $detailEmailLink, $detailExchangeOptions, $detailLocation, $detailPrice, $detailTitle, $detailUserRating, $detailUsername, $detailUsernameLink, $documentBody, $itemDetail, $locationFilterSection, $locationIndicatorCity, $locationIndicatorState, $mediaListingContainer, $notice, $pauseButton, $playButton, $rivets, $searchInput, $signinForm, $textListingContainer, $wishlistCarousel, $wishlistCarouselList, $wishlistFilterSection, COMMENT_INDEX, EMAIL_LIST_INDEX, ENTER_KEY, ISO2, IsotopeDisplay, NUMBER_OF_ITEMS, SHOW_COMMENTS_TAB, SHOW_EMAIL_TAB, SHOW_PHOTOS_TAB, SHOW_POSTITEM_DETAIL_TAB, SHOW_VIDEO_TAB, SHOW_VOICE_TAB, TIME_INTERVAL, VIDEO_VOICE_INDEX, address, assignColors, categories, categoryColorMap, city, cookie, country, currentLocation, displayCurrentMap, filterAndColorBackground, filterByCategory, filters, grid, hasIsotopeBeenInitialized, hasListingTableBeenIntialized, hideAllFiltersExcept, isCarouselInitialized, isInitiallyPlaying, isotope, isotopeObject, isotopeWatcher, latitude, location, locationWatcher, loggedin, longitude, map, message, neighborhood, pauseIsotopePlayerForFilterSection, postitemMap, processStackImages, rememberMe, rowHeight, selected, selectors, setUpDetailPageElements, setUpDetailPageTabs, setUpIsotope, setUpSocketIOClient, showPostItemDetailIsotopePage, showPostItemDetailTableListPage, signinFormHasBeenSetup, singleDoubleClick, state, string, swapFirstLast, token, transformToJQueryElement, transformWishListToHtml, updateLoggedInNav, wishlists, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
    $documentBody = jQuery(document.body);
    $signinForm = jQuery("signin");
    $alert = jQuery("div#alert");
    $notice = jQuery("div#notice");
    $container = jQuery("div#container");
    rowHeight = $container.height();
    NUMBER_OF_ITEMS = 12;
    TIME_INTERVAL = 8000;
    ENTER_KEY = 13;
    SHOW_EMAIL_TAB = "SHOW_EMAIL_TAB";
    SHOW_POSTITEM_DETAIL_TAB = "SHOW_POSTITEM_DETAIL_TAB";
    SHOW_VIDEO_TAB = "SHOW_VIDEO_TAB";
    SHOW_PHOTOS_TAB = "SHOW_PHOTOS_TAB";
    SHOW_VOICE_TAB = "SHOW_VOICE_TAB";
    SHOW_COMMENTS_TAB = "SHOW_COMMENTS_TAB";
    setUpSocketIOClient = function(city, state, country, isotope) {
      var channel, socket;
      channel = city.replace(" ", ".").toLowerCase() + "." + state.replace(" ", ".").toLowerCase() + "." + country.replace(" ", ".").toLowerCase();
      socket = io.connect("http://localhost:8080/" + channel, {
        "force new connection": true
      });
      return socket.on("connect", function() {
        return socket.on("postitem", function(postitem) {
          var $newItem;
          $newItem = transformToJQueryElement(postitem);
          if (isotope) return isotope.addNewItem($newItem);
        });
      });
    };
    isotope = null;
    grid = null;
    isotopeObject = {
      value: null
    };
    isotopeWatcher = createWatcher(isotopeObject);
    isotopeWatcher.watch("value", function(property, oldValue, newValue) {
      if (newValue) setUpSocketIOClient(city, state, country, newValue);
      return newValue;
    });
    if (!jQuery.cookies.test()) {
      message = "<p>The browser does not allow the application to save cookies.\n    Please enable cookies in your browser to use full functinality of the site.\n</p>";
      $alert.html(message).fadeIn(1500).delay(4500).fadeOut(1500);
    }
    updateLoggedInNav = function(loggedin) {
      if (loggedin) {
        jQuery("div#loggedin-account-nav").show();
        jQuery("div#non-loggedin-account-nav").hide();
        jQuery("#username").text(username);
      } else {
        jQuery("div#loggedin-account-nav").hide();
        jQuery("div#non-loggedin-account-nav").show();
      }
      return $signinForm.hide();
    };
    loggedin = jQuery("input#loggedin").val() === "true";
    string = jQuery("input#token").val();
    categories = jQuery("input#categories").val();
    categories = categories.split(",");
    console.log(categories + " categories");
    if (string !== "" && string !== null && string !== void 0) {
      token = JSON.parse(string);
    }
    if (loggedin && !token) {
      cookie = jQuery.cookies.get("logintoken");
      if (cookie) token = JSON.parse(cookie);
    }
    username = token != null ? token.username : void 0;
    location = typeof window !== "undefined" && window !== null ? (_ref = window.session) != null ? _ref.location : void 0 : void 0;
    address = (token != null ? token.address : void 0) || (location != null ? location.address : void 0) || [];
    longitude = (token != null ? (_ref1 = token.location) != null ? _ref1["0"] : void 0 : void 0) || (location != null ? location.longitude : void 0);
    latitude = (token != null ? (_ref2 = token.location) != null ? _ref2["1"] : void 0 : void 0) || (location != null ? location.latitude : void 0);
    city = ((_ref3 = address["city"]) != null ? _ref3.toString() : void 0) || (location != null ? location.cityName : void 0) || "";
    state = ((_ref4 = address["state"]) != null ? _ref4.toString() : void 0) || (location != null ? location.regionName : void 0) || ((_ref5 = address["region"]) != null ? _ref5.toString() : void 0);
    state = abbreviatedStateName[state != null ? state.toLowerCase() : void 0] || state || "";
    country = ((_ref6 = address["country"]) != null ? _ref6.toString() : void 0) || (location != null ? location.countryCode : void 0) || ((_ref7 = address["country_code"]) != null ? _ref7.toString() : void 0) || "";
    neighborhood = ((_ref8 = address["neighborhood"]) != null ? _ref8.toString() : void 0) || "";
    city = city.trim();
    state = state.trim();
    country = country.trim();
    neighborhood = neighborhood.trim();
    $cityDisplay = jQuery("li#mylocation-city-state");
    $countryDisplay = jQuery("li#mylocation-country");
    $locationIndicatorCity = jQuery("li#location-indicator-city");
    $locationIndicatorState = jQuery("li#location-indicator-state-or-country");
    if (city === "" || state === "" || country === "") {
      city = "New York";
      state = "Ny";
      country = "Us";
      latitude = 40.75;
      longitude = -73.997;
    }
    currentLocation = {
      "city": city,
      "state": state,
      "country": country,
      "neighborhood": neighborhood
    };
    locationWatcher = createWatcher(currentLocation);
    ISO2 = country;
    locationWatcher.watch("country", function(property, oldValue, newValue) {
      var tmpCountry;
      tmpCountry = newValue;
      locationWatcher.watch("city", function(property, oldValue, newValue) {
        var stack;
        stack = parseCityAndState(newValue);
        currentLocation.city = stack[0];
        if (stack[1]) currentLocation.state = stack[1];
        currentLocation.country = tmpCountry;
        console.log("currentLocation.country tmpCountry " + currentLocation.country);
        console.log("tmpCountry " + tmpCountry);
        console.log("current state " + currentLocation.state);
        console.log("current city " + currentLocation.city);
        console.log(currentLocation.city === currentLocation.state);
        ISO2 = tmpCountry;
        currentLocation.neighborhood = "";
        if (!_.include(["us", "usa", "united states", "united states of america"], currentLocation.country.toLowerCase())) {
          $cityDisplay.text(currentLocation.city);
          $locationIndicatorCity.text(currentLocation.city);
          $locationIndicatorState.text(currentLocation.country);
        } else {
          $cityDisplay.text(currentLocation.city + ", " + currentLocation.state);
          $locationIndicatorCity.text(currentLocation.city);
          $locationIndicatorState.text(currentLocation.state);
        }
        $countryDisplay.text(currentLocation.country);
        city = currentLocation.city;
        state = currentLocation.state;
        country = currentLocation.country;
        setUpSocketIOClient(city, state, country, isotopeWatcher.value);
        return newValue;
      });
      return newValue;
    });
    locationWatcher.country = country;
    locationWatcher.state = state;
    locationWatcher.city = city;
    locationWatcher.neighborhood = neighborhood;
    rememberMe = (token != null ? token.rememberme : void 0) === "true";
    console.log(" setup currentLocation.country " + currentLocation.country);
    if (token && rememberMe) {
      jQuery.cookies.set("username", username, {
        expires: new Date(Date.now() + 2 * 604800000),
        path: "/"
      });
      jQuery.cookies.set("logintoken", JSON.stringify(token), {
        expires: new Date(Date.now() + 2 * 604800000),
        path: "/"
      });
    } else if (token && !rememberMe) {
      jQuery.cookies.set("username", username);
      jQuery.cookies.set("logintoken", JSON.stringify(token));
    }
    updateLoggedInNav(loggedin);
    $locationIndicatorCity.text(city);
    $locationIndicatorState.text(state);
    $documentBody.off("click", "li#location-indicator-change-location a").on("click", "li#location-indicator-change-location a", function(event) {
      console.log("location change clicked");
      return jQuery("a#location-filter").click();
    });
    $searchInput = jQuery("input[type='text']#search");
    $searchInput.val("");
    $documentBody.off("focus", "input[type='text']#search").on("focus", "input[type='text']#search", function(event) {
      console.log("input search focus");
      $searchInput.val("");
      return event.preventDefault();
    });
    $documentBody.off("keypress", "input[type='text']#search").on("keypress", "input[type='text']#search", function(event) {
      console.log("input search is in keypress");
      if (event.keyCode === ENTER_KEY) console.log("enter is pressed");
      return event.preventDefault();
    });
    jQuery(window).keydown(function(event) {
      if (event.keyCode === ENTER_KEY) {
        event.preventDefault();
        return false;
      }
    });
    postitemMap = {};
    hasIsotopeBeenInitialized = false;
    $mediaListingContainer = jQuery("div#media-listing-container");
    $textListingContainer = jQuery("div#text-listing-container");
    $documentBody.off("click", "a#media-listing-selector").on("click", "a#media-listing-selector", function(event) {
      var array, i, jQElementArray, postitemArray, result, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      console.log("media listing");
      jQuery.colorbox.close();
      (function(__iced_k) {
        if (jQuery.isEmptyObject(postitemMap)) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "index.coffee"
            });
            jQuery.getJSON("/api/postitems/{0}/{1}/{2}/".format(city, state, country), __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return result = arguments[0];
                };
              })(),
              lineno: 330
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (result.response === "success") {
              postitemMap = result.context;
            } else {
              console.log("error ------------------------- " + result.response);
              return;
            }
            return __iced_k();
          });
        } else {
          return __iced_k();
        }
      })(function() {
        var _i;
        postitemArray = _.values(postitemMap);
        jQElementArray = [];
        for (i = _i = 1; _i <= 20; i = ++_i) {
          array = _.map(postitemArray, transformToJQueryElement);
          jQElementArray = jQElementArray.concat(array);
        }
        if (!hasIsotopeBeenInitialized && !jQuery.isEmptyObject(postitemMap)) {
          setUpIsotope($container, jQElementArray);
          isotope.play();
          hasIsotopeBeenInitialized = true;
        } else if (hasIsotopeBeenInitialized && !jQuery.isEmptyObject(postitemMap)) {
          isotope.reset();
          isotope.addNewItems(jQElementArray);
          isotope.play();
        }
        $mediaListingContainer.show();
        $textListingContainer.hide();
        return event.preventDefault();
      });
    });
    setUpIsotope = function($container, jQElementArray) {
      var alreadyclicked;
      this.jQElementArray = jQElementArray;
      $container.imagesLoaded(function() {
        return $container.isotope({
          resizable: true,
          animationEngine: "best-available",
          sortBy: "random",
          animationOptions: {
            duration: 800,
            easing: 'linear',
            queue: true
          },
          masonryHorizontal: {
            rowHeight: rowHeight
          }
        });
      });
      isotope = new IsotopeDisplay($container, this.jQElementArray);
      isotopeWatcher.value = isotope;
      $documentBody.off("click", "li#play, li#pause").on("click", "li#play, li#pause", function(event) {
        $playButton.toggle();
        $pauseButton.toggle();
        if ($playButton.is(":visible")) {
          isotope.stop();
          console.log("isotope stops");
        } else {
          isotope.play();
          console.log("isotope plays");
        }
        return event.preventDefault();
      });
      $documentBody.off("click", "li#rewind").on("click", "li#rewind", function(event) {
        var $element, isInitiallyPlaying;
        console.log("rewind clicked");
        $element = jQuery(this);
        $element.find("span a").addClass("active");
        setTimeout((function() {
          return $element.find("span a").removeClass("active");
        }), 36);
        isInitiallyPlaying = isotope.isPlaying();
        if (isInitiallyPlaying) isotope.stop();
        isotope.rewind();
        if (isInitiallyPlaying) isotope.play();
        return event.preventDefault();
      });
      $documentBody.off("click", "li#forward").on("click", "li#forward", function(event) {
        var $element, isInitiallyPlaying;
        console.log("forward clicked");
        $element = jQuery(this);
        $element.find("span a").addClass("active");
        setTimeout((function() {
          return $element.find("span a").removeClass("active");
        }), 36);
        isInitiallyPlaying = isotope.isPlaying();
        if (isInitiallyPlaying) isotope.stop();
        isotope.forward();
        if (isInitiallyPlaying) isotope.play();
        return event.preventDefault();
      });
      alreadyclicked = false;
      $documentBody.off("click", ".image").on("click", ".image", function(event) {
        var $self, postitemID,
          _this = this;
        console.log("click .image");
        $self = jQuery(this);
        if (alreadyclicked) {
          alreadyclicked = false;
          if (this.alreadyclickedTimer) clearTimeout(this.alreadyclickedTimer);
          postitemID = $self.parents("item").attr("id");
          try {
            showPostItemDetailIsotopePage(isotope, postitemMap[postitemID]);
          } catch (error) {
            console.log(error);
          }
        } else {
          alreadyclicked = true;
          this.alreadyclickedTimer = setTimeout(function() {
            var image;
            alreadyclicked = false;
            postitemID = $self.attr("id");
            console.log("postitemID " + postitemID);
            image = $self.find(".image").first();
            console.log("image length " + image.length);
            return swapFirstLast($self);
          }, 250);
        }
        return event.preventDefault();
      });
      $documentBody.off("hover", "div#scrolling-hotspot-left").on("hover", "div#scrolling-hotspot-left", function(event) {
        console.log("hover left");
        if (event.type === "mouseenter") {
          jQuery(this).css("background-color", "#CCCCCC");
          isotope.rewind();
          this.timer = setInterval(isotope.rewind, TIME_INTERVAL / 5);
        } else {
          if (this.timer) clearInterval(this.timer);
          jQuery(this).css("background-color", "transparent");
        }
        return event.preventDefault();
      });
      $documentBody.off("hover", "div#scrolling-hotspot-right").on("hover", "div#scrolling-hotspot-right", function(event) {
        if (event.type === "mouseenter") {
          jQuery(this).css("background-color", "#CCCCCC");
          isotope.forward();
          this.timer = setInterval(isotope.forward, TIME_INTERVAL / 5);
        } else {
          if (this.timer) clearInterval(this.timer);
          jQuery(this).css("background-color", "transparent");
        }
        isotope.forward(4);
        return event.preventDefault();
      });
      return $documentBody.off("hover", "item").on("hover", "item", function(event) {
        if (event.type === "mouseenter") {
          this.hoverIntent = setTimeout(function() {
            return isotope.stop();
          }, 5000);
        } else {
          try {
            console.log("clear hover");
            if (this.hoverIntent) clearTimeout(this.hoverIntent);
          } catch (error) {
            console.log(error);
          }
        }
        return event.preventDefault();
      });
    };
    /*
            # The Isotope display is set to auto play by default.
            #
            # Steps:
            # 1. We first query the server for all the items in the specified city and state.
            # 2. Then we put them in the display buffer array.
            # 3. We take (n) items to display.
            #    3.1 We check first if new item buffer is not empty
            #    3.2 If it is not, we take those items and append to the display buffer and
            #        put them into the display.
            #    3.3 If the new item buffer is empty, we just take the first (n) elements
            #        from the display buffer and insert them into Isotope for display.
            #    3.4 Once we have taken the (n) items for display, we remove them from the front
            #        of the display buffer and append them to the buffer.
            # 4. We hook up the new item buffer to the socket.io for live update from the
            #    server and we filter in only those that are for the city and state specified.
            # 5. The forward and backward button would step through the steps going back and 
            #    forth on the display buffer and the new item buffer.
    */

    $playButton = jQuery("li#play");
    $pauseButton = jQuery("li#pause");
    IsotopeDisplay = (function() {
      var numberOfItems, playing, timeInterval;

      timeInterval = TIME_INTERVAL;

      numberOfItems = NUMBER_OF_ITEMS;

      playing = false;

      function IsotopeDisplay($container, newItemBuffer) {
        var _this = this;
        this.newItemBuffer = newItemBuffer;
        this.refresh = __bind(this.refresh, this);

        this.reset = __bind(this.reset, this);

        this.removeFilter = __bind(this.removeFilter, this);

        this.addFilter = __bind(this.addFilter, this);

        this.addNewItems = __bind(this.addNewItems, this);

        this.addNewItem = __bind(this.addNewItem, this);

        this.stop = __bind(this.stop, this);

        this.rewind = __bind(this.rewind, this);

        this.forward = __bind(this.forward, this);

        this.play = __bind(this.play, this);

        this._setupPlayer = __bind(this._setupPlayer, this);

        this._insertItems = __bind(this._insertItems, this);

        this._rotateItems = __bind(this._rotateItems, this);

        this._retrievePriorItems = __bind(this._retrievePriorItems, this);

        this._fetchAndRevertOldItems = __bind(this._fetchAndRevertOldItems, this);

        this._fetchAndInsertNewItems = __bind(this._fetchAndInsertNewItems, this);

        this._setUpFirstBatch = __bind(this._setUpFirstBatch, this);

        this.displayBuffer = [];
        setTimeout(function() {
          _this._setUpFirstBatch();
          return _this.play();
        }, 1200);
        processStackImages();
        $container.touchwipe({
          wipeLeft: function() {
            return this.forward();
          },
          wipeRight: function() {
            return this.rewind();
          },
          min_move_x: 20,
          min_move_y: 20,
          preventDefaultEvents: true
        });
        $documentBody.off("mousewheel", $container).on('mousewheel', $container, function(event, delta) {
          if (delta > 0) {
            return _this.forward();
          } else {
            return _this.rewind();
          }
        });
      }

      IsotopeDisplay.prototype._setUpFirstBatch = function() {
        var item, _i, _len, _ref9, _results;
        this.firstBatch = this.newItemBuffer.splice(0, numberOfItems);
        this.displayBuffer = this.displayBuffer.concat(this.firstBatch);
        _ref9 = this.firstBatch;
        _results = [];
        for (_i = 0, _len = _ref9.length; _i < _len; _i++) {
          item = _ref9[_i];
          _results.push($container.isotope('insert', item).isotope({
            filter: filters
          }));
        }
        return _results;
      };

      IsotopeDisplay.prototype._fetchAndInsertNewItems = function() {
        var extra, length;
        this.newItems = this.newItemBuffer.splice(0, numberOfItems);
        length = this.newItems.length;
        if (length <= 0) {
          this.newItems = this.displayBuffer.splice(0, numberOfItems);
        } else if (length > 0 && length < numberOfItems) {
          extra = this.displayBuffer.splice(0, numberOfItems - length);
          this.newItems.concat(extra);
        }
        if (this.newItems) {
          this._rotateItems(this.newItems);
          this.clear();
          return this._insertItems(this.newItems);
        }
      };

      IsotopeDisplay.prototype._fetchAndRevertOldItems = function() {
        this._retrievePriorItems();
        this.clear();
        return this._insertItems(this.newItems);
      };

      IsotopeDisplay.prototype._retrievePriorItems = function() {
        var length;
        length = this.displayBuffer.length;
        return this.newItems = this.displayBuffer.splice(length - numberOfItems, numberOfItems);
      };

      IsotopeDisplay.prototype._rotateItems = function(newItems) {
        return this.displayBuffer = this.displayBuffer.concat(this.newItems);
      };

      IsotopeDisplay.prototype._insertItems = function(newItems) {
        var item, _i, _len;
        for (_i = 0, _len = newItems.length; _i < _len; _i++) {
          item = newItems[_i];
          this.displayBuffer.unshift(item);
          $container.isotope('insert', item).isotope({
            filter: filters
          });
        }
        return processStackImages();
      };

      IsotopeDisplay.prototype._setupPlayer = function() {
        if (this.timer) clearInterval(this.timer);
        this.timer = setInterval(this._fetchAndInsertNewItems, timeInterval);
        playing = true;
        if ($playButton.is(":visible")) {
          $playButton.toggle();
          return $pauseButton.toggle();
        }
      };

      IsotopeDisplay.prototype.play = function() {
        var length,
          _this = this;
        if (this.hasBeenReset) {
          setTimeout(function() {
            _this._setUpFirstBatch();
            return _this._setupPlayer();
          }, 1200);
          this.hasBeenReset = false;
        } else {
          length = this.displayBuffer.length;
          if (length < numberOfItems) {
            return;
          } else {
            this._setupPlayer();
          }
        }
        return this;
      };

      IsotopeDisplay.prototype.forward = function() {
        var length;
        length = this.displayBuffer.length;
        if (length < numberOfItems) return;
        this._fetchAndInsertNewItems();
        return this;
      };

      IsotopeDisplay.prototype.rewind = function() {
        var length;
        length = this.displayBuffer.length;
        if (length < numberOfItems) return;
        this._fetchAndRevertOldItems();
        return this;
      };

      IsotopeDisplay.prototype.stop = function() {
        if (this.timer) clearInterval(this.timer);
        playing = false;
        if ($pauseButton.is(":visible")) {
          $playButton.toggle();
          $pauseButton.toggle();
        }
        return this;
      };

      IsotopeDisplay.prototype.addNewItem = function($item) {
        if ($item) this.newItemBuffer.push($item);
        return this;
      };

      IsotopeDisplay.prototype.addNewItems = function($items) {
        if ($items) this.newItemBuffer = this.newItemBuffer.concat($items);
        return this;
      };

      IsotopeDisplay.prototype.addFilter = function(filter) {
        var array, filters;
        array = filters.split(",");
        array.push(filter);
        filters = array.join(",");
        return this;
      };

      IsotopeDisplay.prototype.removeFilter = function(filter) {
        var array, filters;
        array = fitlers.split(",");
        array = _.without(array, filter);
        filters = array.join(",");
        return this;
      };

      IsotopeDisplay.prototype.clear = function() {
        var $removable;
        $removable = $container.children();
        $removable.detach();
        $container.isotope("remove", $container.data('isotope').$allAtoms);
        return this;
      };

      IsotopeDisplay.prototype.reset = function() {
        this.clear();
        this.displayBuffer = [];
        this.newItemBuffer = [];
        this.hasBeenReset = true;
        return this;
      };

      IsotopeDisplay.prototype.refresh = function() {
        $container.isotope("reloadItems", this.newItems).isotope({
          filter: filters
        });
        return this;
      };

      IsotopeDisplay.prototype.isPlaying = function() {
        return playing;
      };

      return IsotopeDisplay;

    })();
    swapFirstLast = function($element) {
      var $elements, processZindex;
      $elements = $element.siblings();
      if ($elements.length === 1) return;
      console.log("swapFirstLast " + $elements.siblings().length + " " + $elements.css('z-index'));
      processZindex = $elements.siblings().length;
      $element.animate({
        'top': "-" + $element.height() + 'px'
      }, 'slow', function() {
        return jQuery(this).css('z-index', 1).animate({
          'top': '0'
        }, 'slow', function() {
          return {};
        });
      });
      $elements.each(function() {
        $element = jQuery(this);
        return $element.animate({
          'top': '0'
        }, 'slow', function() {
          console.log("increase zindex" + parseInt(jQuery(this).css('z-index')) + 1);
          return jQuery(this).css('z-index', parseInt(jQuery(this).css('z-index')) + 1);
        });
      });
      return false;
    };
    singleDoubleClick = function(click, dblClick) {
      return (function() {
        this.alreadyclicked = false;
        this.alreadyclickedTimeout;
        return function(event) {
          if (this.alreadyclicked) {
            this.alreadyclicked = false;
            this.alreadyclickedTimeout && clearTimeout(this.alreadyclickedTimeout);
            return dblClick && dblClick(event);
          } else {
            this.alreadyclicked = true;
            return this.alreadyclickedTimeout = setTimeout(function() {
              this.alreadyclicked = false;
              return click && click(event);
            }, 300);
          }
        };
      })();
    };
    transformToJQueryElement = function(json) {
      var result;
      console.log("transformToJQueryElment " + json);
      result = '<item id="4f637a520a9046122a000006" class="item fourxfive Appliances" style="border:1px solid red;"> \n    <p>\n        <img src="listing-images/sampleImage_001_400x300.jpg" alt="{0}" />\n        <img src="listing-images/picture2.png" alt="{1}" />\n        <img src="listing-images/picture3.png" alt="{2}" />\n        <img src="listing-images/picture4.png" alt="{3}" />\n        <img src="listing-images/picture5.png" alt="{4}" />\n        <img src="listing-images/picture5.png" alt="{5}" />\n    </p>\n    <p class="desc">Kurt 1</p>\n</item>'.format(1, 2, 3, 4, 5, 6);
      return jQuery(result);
    };
    processStackImages = function() {
      return jQuery("item p").each(function(index, value) {
        var $self, imageLoaded, z;
        $self = jQuery(this);
        if ($self.hasClass("processed")) return;
        $self.addClass("processed");
        z = 0;
        imageLoaded = 0;
        $self.children().each(function(index, value) {
          var image, src;
          z++;
          jQuery(this).css("z-index", z);
          jQuery(this).addClass("image");
          image = new Image();
          src = jQuery(this).attr("src");
          if (src) image.src = src;
          return jQuery(image).load(function() {
            imageLoaded++;
            if (imageLoaded === z) {
              return jQuery(".loader-" + index).fadeOut("slow");
            }
          });
        });
        return $self.append("<div class=loader-" + index + "></div>");
      });
    };
    hasListingTableBeenIntialized = false;
    $documentBody.off("click", "a#text-listing-selector").on("click", "a#text-listing-selector", function(event) {
      var array, i, jQElementArray, postitemArray, result, setUpGridDetailEmail, setUpGridDetailMedia, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      $mediaListingContainer.hide();
      $textListingContainer.show();
      jQuery.colorbox.close();
      if (isotope) isotope.stop();
      (function(__iced_k) {
        if (jQuery.isEmptyObject(postitemMap)) {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "index.coffee"
            });
            jQuery.getJSON("/api/postitems/{0}/{1}/{2}/".format(city, state, country), __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return result = arguments[0];
                };
              })(),
              lineno: 788
            }));
            __iced_deferrals._fulfill();
          })(function() {
            if (result.response !== "success") {
              console.log("error ------------------------- " + result.response);
              return;
            } else {
              postitemMap = result.context;
            }
            return __iced_k();
          });
        } else {
          return __iced_k();
        }
      })(function() {
        var _i;
        if (!hasListingTableBeenIntialized && !jQuery.isEmptyObject(postitemMap)) {
          postitemArray = _.values(postitemMap);
          jQElementArray = [];
          for (i = _i = 1; _i <= 20; i = ++_i) {
            array = _.map(postitemArray, transformToJQueryElement);
            jQElementArray = jQElementArray.concat(array);
          }
          hasListingTableBeenIntialized = true;
          grid = jQuery("div#grid").kendoGrid({
            dataSource: {
              data: postitemArray,
              pageSize: 8,
              schema: {
                model: {
                  fields: {
                    title: {
                      type: "string"
                    },
                    itemDescription: {
                      type: "string"
                    },
                    price: {
                      type: "number"
                    },
                    category: {
                      type: "string"
                    },
                    username: {
                      type: "string"
                    },
                    userRating: {
                      type: "number"
                    },
                    createdDate: {
                      type: "date"
                    },
                    neighborhood: {
                      type: "string"
                    }
                  }
                }
              }
            },
            height: "100%",
            sortable: true,
            reorderable: true,
            resizable: true,
            pageable: true,
            scrollable: true,
            detailTemplate: kendo.template(jQuery("#grid-detail-template").html()),
            detailInit: function(event) {
              var detailRow, postitem;
              detailRow = event.detailRow;
              postitem = event.data;
              detailRow.find(".tabstrip").kendoTabStrip({
                animation: {
                  open: {
                    effects: "fadeIn"
                  }
                }
              });
              setUpGridDetailMedia(postitem);
              return event.preventDefault();
            },
            dataBound: function() {
              return console.log("databound");
            },
            columns: [
              {
                field: "title",
                title: "Title"
              }, {
                field: "itemDescription",
                title: "Description",
                width: "38%"
              }, {
                field: "category",
                title: "Category"
              }, {
                field: "price",
                title: "Price"
              }, {
                field: "username",
                title: "Lister",
                width: "10%"
              }, {
                field: "userRating",
                title: "Lister Rating",
                width: 126
              }, {
                command: {
                  text: "Email",
                  click: function(event) {
                    var postitem;
                    postitem = this.dataItem(jQuery(event.currentTarget).closest("tr"));
                    setUpGridDetailEmail(postitem);
                    return event.preventDefault();
                  }
                },
                title: "Contact",
                width: "110px"
              }, {
                field: "createdDate",
                title: "Date",
                template: '#= kendo.toString(createdDate,"MM/dd/yyyy") #'
              }, {
                field: "address.neighborhood",
                title: "Neighborhood"
              }
            ]
          });
          setUpGridDetailMedia = function(postitem) {
            console.log("setupGridDetailMedia " + postitem._id);
            $documentBody.off("click", ".grid-detail-media-photos").on("click", ".grid-detail-media-photos", function(event) {
              return showPostItemDetailTableListPage({
                activeTab: SHOW_PHOTOS_TAB
              }, postitem);
            });
            $documentBody.off("click", ".grid-detail-media-video").on("click", ".grid-detail-media-video", function(event) {
              return showPostItemDetailTableListPage({
                activeTab: SHOW_VIDEO_TAB
              }, postitem);
            });
            $documentBody.off("click", ".grid-detail-media-voice").on("click", ".grid-detail-media-voice", function(event) {
              return showPostItemDetailTableListPage({
                activeTab: SHOW_VOICE_TAB
              }, postitem);
            });
            return $documentBody.off("click", ".grid-detail-media-comments").on("click", ".grid-detail-media-comments", function(event) {
              return showPostItemDetailTableListPage({
                activeTab: SHOW_COMMENTS_TAB
              }, postitem);
            });
          };
          setUpGridDetailEmail = function(postitem) {
            return showPostItemDetailTableListPage({
              activeTab: SHOW_EMAIL_TAB
            }, postitem);
          };
        }
        return event.preventDefault();
      });
    });
    jQuery("a#media-listing-selector").click();
    $detailTitle = $detailPrice = $detailLocation = $detailUserRating = $detailCategory = null;
    $detailExchangeOptions = $detailEmail = $detailEmailLink = $detailUsernameLink = null;
    $detailUsername = $itemDetail = $rivets = null;
    VIDEO_VOICE_INDEX = 1;
    COMMENT_INDEX = 2;
    EMAIL_LIST_INDEX = 3;
    setUpDetailPageTabs = function(postitem) {
      var $tabs, postitemID;
      postitemID = postitem._id;
      $tabs = jQuery("div#tabs").tabs({
        load: function(event, ui) {
          return event.preventDefault();
        },
        cache: true,
        collapsible: false,
        select: function(event, ui) {
          var disqus, index;
          index = ui.index;
          jQuery("script#disqus-script").remove();
          console.log("COMEMENT_INDEX");
          if (index === VIDEO_VOICE_INDEX) {
            return console.log("video tab is clicked");
          } else if (index === COMMENT_INDEX) {
            disqus = "<script id=\"disqus-script\" type=\"text/javascript\">\n    var disqus_shortname    = \"listsil\"; // required: replace example with your forum shortname\n    var disqus_identifier   = disqus_shortname + \"-\" + \"{0}\";\n    var disqus_title        = disqus_identifier\n    //site name\n    disqus_url = document.location.href;\n\n    if (typeof(DISQUS) == \"undefined\")\n        jQuery.getScript(\"http://\" + disqus_shortname + \".disqus.com/embed.js\");\n\n    if (jQuery(\"#disqus_thread\").length == 2)\n        jQuery(\".disqus-ajax:has(a)\").removeAttr(\"id\").empty();\n\n    if (typeof(DISQUS) !== \"undefined\") {\n        DISQUS.reset({\n            reload: true,\n            config: function () {\n                this.page.url = disqus_url;\n                this.page.title = disqus_title;\n                this.page.identifier = disqus_identifier;\n            }\n        });\n    }\n</script>".format(postitemID.toString());
            return jQuery("div#comments").append(disqus);
          } else if (index === EMAIL_LIST_INDEX) {
            return console.log("email lister");
          }
        }
      });
      $documentBody.off(SHOW_POSTITEM_DETAIL_TAB).on(SHOW_POSTITEM_DETAIL_TAB, function(event, data) {
        return $tabs.tabs('select', 0);
      });
      $documentBody.off(SHOW_EMAIL_TAB).on(SHOW_EMAIL_TAB, function(event, data) {
        return $tabs.tabs('select', 3);
      });
      $documentBody.off(SHOW_PHOTOS_TAB).on(SHOW_PHOTOS_TAB, function(event, data) {
        return $tabs.tabs('select', 0);
      });
      $documentBody.off(SHOW_VIDEO_TAB).on(SHOW_VIDEO_TAB, function(event, data) {
        return $tabs.tabs('select', 1);
      });
      $documentBody.off(SHOW_VOICE_TAB).on(SHOW_VOICE_TAB, function(event, data) {
        return $tabs.tabs('select', 1);
      });
      $documentBody.off(SHOW_COMMENTS_TAB).on(SHOW_COMMENTS_TAB, function(event, data) {
        return $tabs.tabs('select', 2);
      });
      return $tabs;
    };
    setUpDetailPageElements = function(postitem) {
      var model, postitemID;
      postitemID = postitem._id;
      $itemDetail = jQuery("div#listing");
      $detailTitle = jQuery(".listing-detail-title");
      $detailPrice = jQuery(".listing-detail-price");
      $detailLocation = jQuery(".listing-detail-location");
      $detailUsernameLink = jQuery(".listing-detail-username-link");
      $detailUsername = jQuery(".listing-detail-username");
      $detailUserRating = jQuery(".listing-detail-user-rating");
      $detailCategory = jQuery(".listing-detail-category");
      $detailExchangeOptions = jQuery(".listing-detail-exchange-options");
      $detailEmailLink = jQuery(".listing-detail-email-link");
      $detailEmail = jQuery(".listing-detail-email");
      model = ko.mapping.fromJS(postitem);
      console.log("model.photos[0]() " + model.photos[0].image());
      model.exchangeOptionsString = ko.computed(function() {
        var i, len, result, _i;
        len = this.exchangeOptions.length() - 1;
        result = [];
        if (len) {
          for (i = _i = 0; 0 <= len ? _i <= len : _i >= len; i = 0 <= len ? ++_i : --_i) {
            result.push(this.exchangeOptions[i]());
          }
        }
        result = result.join(", ") || "n/a";
        return result;
      }, model);
      model.mainImageDisplay = ko.computed(function() {
        var len;
        len = this.photos.length();
        if (len > 0) {
          return "images/sampleImage_001_120x90.jpg";
        } else {
          return "images/sampleImage_001_120x90.jpg";
        }
      }, model);
      return ko.applyBindings(model);
    };
    showPostItemDetailIsotopePage = function(isotope, postitem) {
      var isInitiallyPlaying, postitemID;
      postitemID = postitem._id;
      isInitiallyPlaying = false;
      return jQuery.colorbox({
        href: "/pages/listing/",
        width: "100%",
        height: "100%",
        close: "",
        onComplete: function() {
          var $tabs, audio;
          setUpDetailPageElements(postitem);
          console.log("showPostItemDetailIsotopePage is called");
          isInitiallyPlaying = isotope.isPlaying();
          isotope.stop();
          $tabs = setUpDetailPageTabs(postitem);
          $documentBody.off("click", "#listing-detail-close").on("click", "#listing-detail-close", function(event) {
            if (isInitiallyPlaying) isotope.play();
            jQuery.colorbox.close();
            if (ko) ko.cleanNode($itemDetail[0]);
            return event.preventDefault();
          });
          audio = audiojs.createAll();
          return $tabs.tabs('select', 0);
        }
      });
    };
    showPostItemDetailTableListPage = function(options, postitem) {
      var postitemID;
      postitemID = postitem._id;
      return jQuery.colorbox({
        href: "/pages/listing/",
        width: "100%",
        height: "100%",
        close: "",
        onComplete: function() {
          var $tabs, audio;
          setUpDetailPageElements(postitem);
          console.log("showPostItemDetailTableListPage is called");
          $tabs = setUpDetailPageTabs(postitem);
          $documentBody.off("click", "#listing-detail-close").on("click", "#listing-detail-close", function(event) {
            jQuery.colorbox.close();
            if (ko) ko.cleanNode($itemDetail[0]);
            return event.preventDefault();
          });
          audio = audiojs.createAll();
          $tabs.tabs('select', 0);
          return $documentBody.trigger(options.activeTab);
        }
      });
    };
    $documentBody.off("keyup", "input.textInput").on("keyup", "input.textInput", function(event) {
      if (jQuery(this).val().length > 0) {
        jQuery(this).next("span.clear-mark").fadeIn(300);
      } else {
        jQuery(this).next("span.clear-mark").fadeOut(300);
      }
      return event.preventDefault();
    });
    $documentBody.off("span.clear-mark").on("click", "span.clear-mark", function(event) {
      jQuery(this).prev("input").val("");
      jQuery(this).delay(700).fadeOut(300);
      return event.preventDefault();
    });
    jQuery("select#days").removeAttr("slide").selectToUISlider({
      sliderOptions: {
        stop: function(error, ui) {
          console.log(jQuery("select#days").val());
          return jQuery("a#handle_days").delay(350).queue(function() {
            return jQuery(this).blur().dequeue();
          });
        }
      }
    });
    $documentBody.off("change", "select[name=days]").on("change", "select[name=days]", function(event) {
      return console.log(jQuery("select[name=days] option:selected").attr("name"));
    });
    $documentBody.off("click", "a#signout").on("click", "a#signout", function(event) {
      hideAllFiltersExcept("none");
      rpc.request({
        url: "../../../api/logout/",
        method: "POST",
        data: {
          "username": username
        }
      }, function(response) {
        var result;
        result = JSON.parse(response.data);
        if ((result != null ? result.response : void 0) === "success") {
          loggedin = false;
          updateLoggedInNav(loggedin);
          jQuery.cookies.del("logintoken");
          jQuery.cookies.del("username");
          jQuery("input#loggedin").val("false");
          return jQuery("input#token").val("");
        } else {
          loggedin = false;
          updateLoggedInNav(loggedin);
          return $alert.html("<p>" + result.message + "</p>").fadeIn(1500).delay(3500).fadeOut(1500);
        }
      }, function(error) {
        message = "<p>There is an error occurred while we try to logout of your account.\nSorry for the inconvenience.  If the problem persists,\nplease contact admin@melisting.com for further assistance.</p>";
        $alert.html("<p>" + message + "</p>").fadeIn(1500).delay(3500).fadeOut(1500);
        loggedin = false;
        return updateLoggedInNav(loggedin);
      });
      return event.preventDefault();
    });
    signinFormHasBeenSetup = false;
    $documentBody.off("click", "a#signin-trigger").on("click", "a#signin-trigger", function(event) {
      var $email, $emailError, $formError, $password, $passwordError, $rememberMe, self, signupFormHasBeenSetup, validateForm;
      console.log("signin-trigger clicked");
      self = jQuery(this);
      if (!self.next("signin").is(":visible")) hideAllFiltersExcept("none");
      self.next("signin").slideToggle();
      self.toggleClass("active");
      $email = $email || jQuery("input#signin-email");
      $email.focus();
      if (!signinFormHasBeenSetup) {
        $password = $password || jQuery("input#signin-password");
        $rememberMe = $rememberMe || jQuery("input#remember-me");
        $emailError = $emailError || jQuery("div#signin-email-error");
        $passwordError = $passwordError || jQuery("div#signin-password-error");
        $formError = $formError || jQuery("div#signin-form-error");
        $documentBody.off("click", "a#close-signin-form").on("click", "a#close-signin-form", function(event) {
          $email.val("");
          $password.val("");
          $rememberMe.removeAttr("checked");
          $signinForm.hide();
          return event.preventDefault();
        });
        $documentBody.off("keyup", "input#signin-email").on("keyup", "input#signin-email", function(event) {
          var keycode;
          console.log("in email text box key press " + event.keyCode);
          keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
          if (keycode === ENTER_KEY && validateEmail(jQuery(this).val())) {
            $password.focus();
            $emailError.text("");
            return event.preventDefault();
          }
        });
        $documentBody.off("keyup", "input#signin-password").on("keyup", "input#signin-password", function(event) {
          var keycode;
          keycode = (event != null ? event.key : void 0) || (event != null ? event.which : void 0);
          if (keycode === ENTER_KEY && validatePassword(jQuery(this).val())) {
            $email.focus();
            $passwordError.text("");
            return event.preventDefault();
          }
        });
        $documentBody.off("submit", "form#signin-form").on("submit", "form#signin-form", function(event) {
          var email;
          if (validateForm()) {
            email = $email.val();
            rememberMe = $rememberMe.is(":checked") ? true : false;
            rpc.request({
              url: "../../../api/login/",
              method: "POST",
              data: {
                "email": email,
                "password": $password.val(),
                "remember_me": rememberMe
              }
            }, function(response) {
              var result, session, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref9;
              result = JSON.parse(response.data);
              if (result.response === "success") {
                session = result != null ? result.session : void 0;
                username = result != null ? (_ref9 = result.context) != null ? _ref9.username : void 0 : void 0;
                loggedin = true;
                updateLoggedInNav(loggedin);
                $email.val("");
                $password.val("");
                $rememberMe.removeAttr("checked");
                token = result != null ? result.context : void 0;
                locationWatcher.neighborhood = token != null ? (_ref10 = token.address) != null ? _ref10.neighborhood : void 0 : void 0;
                locationWatcher.country = token != null ? (_ref11 = token.address) != null ? _ref11.country : void 0 : void 0;
                locationWatcher.state = token != null ? (_ref12 = token.address) != null ? _ref12.state : void 0 : void 0;
                locationWatcher.city = token != null ? (_ref13 = token.address) != null ? _ref13.city : void 0 : void 0;
                latitude = token != null ? (_ref14 = token.location) != null ? _ref14.latitude : void 0 : void 0;
                longitude = token != null ? (_ref15 = token.location) != null ? _ref15.longitude : void 0 : void 0;
                if (rememberMe) {
                  jQuery.cookies.set("username", username, {
                    expires: new Date(Date.now() + 2 * 604800000),
                    path: "/"
                  });
                  jQuery.cookies.set("logintoken", token, {
                    expires: new Date(Date.now() + 2 * 604800000),
                    path: "/"
                  });
                } else {
                  jQuery.cookies.set("username", username);
                  jQuery.cookies.set("logintoken", token);
                }
                jQuery.cookies.set(key, email);
                return jQuery.cookies.set("session", session);
              } else {
                return $formError.html("<p>" + result.message + "</p>").fadeIn(1500).delay(3500).fadeOut(1500);
              }
            }, function(error) {
              console.log("error");
              console.log(error);
              message = "<p>An error occurred while we try to login to your account.\nSorry for the inconvenience.  If the problem persists,\nplease contact admin@melisting.com for further assistance.</p>";
              return $formError.html(message).fadeIn(1500).delay(3500).fadeOut(1500);
            });
          }
          return event.preventDefault();
        });
        validateForm = function() {
          var result;
          result = true;
          if (!validateEmail($email.val())) {
            result = false;
            $emailError.html("<p>Email has to be in the format: i.e. email@yourdomain.com.</p>");
            $email.css("border", "3px solid #F00");
          } else {
            $emailError.text("");
            $email.css("border", "3px solid #CCC");
          }
          if (!validatePassword($password.val())) {
            result = false;
            $passwordError.html("<p>Password has to be at least of 6 characters.  Recommended to have combination of letters and numbers.</p>");
            return $password.css("border", "3px solid #F00");
          } else {
            $passwordError.text("");
            return $password.css("border", "3px solid #CCC");
          }
        };
        $documentBody.off("click", "a#forgot-password").on("click", "a#forgot-password", function(event) {});
        $documentBody.off("click", "a#register").on("click", "a#register", function(event) {
          $signinForm.hide();
          return jQuery("a#signup").click();
        });
        return signupFormHasBeenSetup = true;
      }
    });
    isInitiallyPlaying = false;
    $documentBody.off("click", "a#signup").on("click", "a#signup", function(event) {
      var $city, $cityError, $country, $countryError, $email, $emailError, $formError, $neighborhood, $password, $passwordError, $signupForm, $terms, $termsError, $username, $usernameError, oldemail, oldusername, validateForm;
      hideAllFiltersExcept("none");
      $signupForm = jQuery("form#signup-form");
      $email = $username = $password = $terms = null;
      $country = $city = $neighborhood = null;
      $emailError = $usernameError = $passwordError = $termsError = null;
      $countryError = $cityError = $formError = null;
      jQuery.colorbox.remove();
      jQuery.colorbox({
        href: "pages/signup/",
        close: "",
        escKey: false,
        onComplete: function() {
          $email = jQuery("input#signup-email");
          $username = jQuery("input#signup-username");
          $password = jQuery("input#signup-password");
          $terms = jQuery("input#accept-terms-of-use");
          $country = jQuery("input#signup-location-country");
          $city = jQuery("input#signup-location-city-state");
          $neighborhood = jQuery("input#signup-location-neighborhood");
          $emailError = jQuery("div#signup-email-error");
          $usernameError = jQuery("div#signup-username-error");
          $passwordError = jQuery("div#signup-password-error");
          $termsError = jQuery("div#terms-of-use-error");
          $countryError = jQuery("div#signup-location-country-error");
          $cityError = jQuery("div#signup-location-city-state-error");
          $formError = jQuery("div#signup-form-error");
          $email.focus();
          if (isotope) {
            isInitiallyPlaying = isotope.isPlaying();
            isotope.stop();
          }
          console.log("currentLocation.country " + currentLocation.country);
          if (!currentLocation.state || currentLocation.city === currentLocation.state) {
            $city.val(currentLocation.city);
          } else {
            $city.val(currentLocation.city + ", " + currentLocation.state);
          }
          return $country.val(currentLocation.country);
        }
      });
      $documentBody.off("focus", "input#signup-location-country").on("focus", "input#signup-location-country", function(event) {
        $country.val("");
        $city.val("");
        $city.attr("disabled", true);
        $country.autocomplete({
          source: function(request, response) {
            if (isNumber(request.term)) {
              return jQuery.getJSON("/api/getCitiesByZipcode/", {
                term: request.term,
                maxRows: 12
              }, response);
            } else {
              return jQuery.getJSON("/api/getCountries/", {
                term: request.term,
                maxRows: 12
              }, response);
            }
          },
          minLength: 1,
          select: function(event, ui) {
            if (ui.item.ISO2) {
              ISO2 = ui.item.ISO2;
            } else {
              longitude = ui.item.longitude;
              latitude = ui.item.latitude;
              $city.val(ui.item.address);
            }
            return $city.removeAttr("disabled");
          },
          autoFocus: true,
          autoSelect: true
        });
        $documentBody.off("blur", "input#signup-location-country").on("blur", "input#signup-location-country", function(event) {
          var autocomplete, matcher, myInput;
          console.log("on blur country autocomplete");
          autocomplete = jQuery(this).data("autocomplete");
          matcher = new RegExp("^" + jQuery.ui.autocomplete.escapeRegex(jQuery(this).val()) + "$", "i");
          myInput = jQuery(this);
          autocomplete.widget().children(".ui-menu-item").each(function() {
            var item;
            item = jQuery(this).data("item.autocomplete");
            if (matcher.test(item.label || item.value || item)) {
              autocomplete.selectedItem = item;
            }
          });
          if (autocomplete.selectedItem) {
            return autocomplete._trigger("select", event, {
              item: autocomplete.selectedItem
            });
          } else {
            return jQuery(this).val("");
          }
        });
        return $documentBody.off("keyup", "input#signup-location-country").on("keyup", "input#signup-location-country", function(event) {
          var keycode;
          keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
          if (keycode === ENTER_KEY) {
            $city.focus();
            return event.preventDefault();
          }
        });
      });
      $documentBody.off("focus", "input#signup-location-city-state").on("focus", "input#signup-location-city-state", function(event) {
        console.log("focus input#signup-location-city-state");
        $city.val("");
        $city.autocomplete({
          source: function(request, response) {
            return jQuery.getJSON("/api/getCities/", {
              term: request.term,
              ISO2: ISO2,
              maxRows: 12
            }, response);
          },
          minLength: 1,
          select: function(event, ui) {
            longitude = ui.item.longitude;
            return latitude = ui.item.latitude;
          },
          autoFocus: true,
          autoSelect: true
        });
        $documentBody.off("blur", "input#signup-location-city-state").on("blur", "input#signup-location-city-state", function(event) {
          var autocomplete, matcher, myInput;
          console.log("on blur city autocomplete");
          autocomplete = jQuery(this).data("autocomplete");
          matcher = new RegExp("^" + jQuery.ui.autocomplete.escapeRegex(jQuery(this).val()) + "$", "i");
          myInput = jQuery(this);
          autocomplete.widget().children(".ui-menu-item").each(function() {
            var item;
            item = jQuery(this).data("item.autocomplete");
            if (matcher.test(item.label || item.value || item)) {
              autocomplete.selectedItem = item;
            }
          });
          if (autocomplete.selectedItem) {
            return autocomplete._trigger("select", event, {
              item: autocomplete.selectedItem
            });
          } else {
            return jQuery(this).val("");
          }
        });
        return $documentBody.off("keyup", "input#signup-location-city-state").on("keyup", "input#signup-location-city-state", function(event) {
          var keycode;
          keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
          if (keycode === ENTER_KEY) {
            $neighborhood.focus();
            return event.preventDefault();
          }
        });
      });
      $documentBody.off("keyup", "input#signup-email").on("keyup", "input#signup-email", function(event) {
        var keycode;
        keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
        if (keycode === ENTER_KEY && validateEmail(jQuery(this).val())) {
          $username.focus();
          $emailError.text("");
          return event.preventDefault();
        }
      });
      $documentBody.off("keyup", "input#signup-username").on("keyup", "input#signup-username", function(event) {
        var keycode;
        console.log("in username text box key press " + event.keyCode);
        keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
        if (keycode === ENTER_KEY && validateUsername(jQuery(this).val())) {
          $password.focus();
          $usernameError.text("");
          return event.preventDefault();
        }
      });
      $documentBody.off("keyup", "input#signup-password").on("keyup", "input#signup-password", function(event) {
        var keycode;
        keycode = (event != null ? event.key : void 0) || (event != null ? event.which : void 0);
        if (keycode === ENTER_KEY && validatePassword(jQuery(this).val())) {
          $country.focus();
          $passwordError.text("");
          return event.preventDefault();
        }
      });
      $documentBody.off("keyup", "input#signup-location-country").on("keyup", "input#signup-location-country", function(event) {
        var keycode;
        keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
        if (keycode === ENTER_KEY && validateLocation(jQuery(this).val())) {
          $city.focus();
          $countryError.text("");
          return event.preventDefault();
        }
      });
      $documentBody.off("keyup", "input#signup-location-city-state").on("keyup", "input#signup-location-city-state", function(event) {
        var keycode;
        keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
        if (keycode === ENTER_KEY && validateLocation(jQuery(this).val())) {
          $neighborhood.focus();
          return event.preventDefault();
        }
      });
      $documentBody.off("keyup", "input#signup-neighborhood").on("keyup", "input#signup-neighborhood", function(event) {
        var keycode;
        keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
        if (keycode === ENTER_KEY) {
          $email.focus();
          return event.preventDefault();
        }
      });
      oldusername = oldemail = "";
      $documentBody.off("blur", "input#signup-username").on("blur", "input#signup-username", function(event) {
        username = jQuery(this).val();
        if (oldusername !== username && validateUsername(username)) {
          oldusername = username;
          rpc.request({
            url: "../../../api/checkUsernameAvailability/",
            method: "POST",
            data: {
              "username": username
            }
          }, function(response) {
            var result;
            result = JSON.parse(response.data);
            if (result.response === "taken") {
              message = "<p>The username has been taken.  Please choose new username</p>";
              return $usernameError.html(message).fadeIn(1500).delay(3500).fadeOut(1500);
            }
          }, function(error) {
            message = "<p>We can not verify username uniqueness with our server.  Sorry for the inconvenience.</p>";
            return $usernameError.html(message).fadeIn(1500).delay(3500).fadeOut(1500);
          });
        }
        return event.preventDefault();
      });
      $documentBody.off("blur", "input#signup-email").on("blur", "input#signup-email", function(event) {
        var domainNames, email, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        email = jQuery(this).val();
        (function(__iced_k) {
          if (oldemail !== email && validateEmail(email)) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "index.coffee"
              });
              jQuery.getJSON("/api/getAllValidEmailDomainNames/", __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return domainNames = arguments[0];
                  };
                })(),
                lineno: 1467
              }));
              __iced_deferrals._fulfill();
            })(function() {
              jQuery(_this).mailcheck(domainNames, {
                suggested: function(element, suggestion) {
                  message = "<p>Suggested email: " + suggestion.full + "</p>";
                  return $emailError.html(message).fadeIn(1500).delay(4500).fadeOut(1500);
                },
                empty: function(element) {}
              });
              oldemail = email;
              return __iced_k(rpc.request({
                url: "../../../api/checkEmailDuplication/",
                method: "POST",
                data: {
                  "email": email
                }
              }, function(response) {
                var result;
                result = JSON.parse(response.data);
                message = "<p>The email provided is already in the system.  Please choose new email to proceed.</p>";
                if (result.response === "duplicate") {
                  return $emailError.html(message).fadeIn(1500).delay(3500).fadeOut(1500);
                }
              }, function(error) {
                message = "<p>We can not check if the email has been registered with our server at the moment.\nSorry for the inconvenience.</p>";
                return $emailError.html(message).fadeIn(1500).delay(3500).fadeOut(1500);
              }));
            });
          } else {
            return __iced_k();
          }
        })(function() {
          return event.preventDefault();
        });
      });
      $documentBody.off("submit", "form#signup-form").on("submit", "form#signup-form", function(event) {
        console.log("latitude " + latitude + " " + longitude);
        if (validateForm()) {
          rpc.request({
            url: "../../../api/register/",
            method: "POST",
            data: {
              "email": $email.val(),
              "username": $username.val(),
              "password": $password.val(),
              "city": $city.val(),
              "country": $country.val(),
              "neighborhood": $neighborhood.val(),
              "latitude": latitude,
              "longitude": longitude
            }
          }, function(response) {
            var result;
            result = JSON.parse(response.data);
            console.log(JSON.parse(response.data));
            if (result.response !== "success") {
              message = "<p>There is an error occurred while we try to register your account.\nSorry for the inconvenience.  If the problem persists,\nplease contact admin@melisting.com for further assistance.</p>";
              if (result.message.contains("duplicate key error")) {
                message = "<p>The email/username chosen is already in the system.  Please choose new email/username to signup.</p>";
              }
              return $formError.html(message).fadeIn(1500).delay(3500).fadeOut(1500);
            } else {
              jQuery("h1#popup-title").replaceWith("<h1>Success<br>Welcome to <span>listsil</span></h1>");
              return jQuery("form#signup-form").replaceWith("<div id=\"signup-success\">         \n    <h5>  \n        Thank you for setting up an account, now you can list items, rate listers, contact listers, and save lists of your farvorite stuff right as you browse.\n    </h5>\n    <p>\n        Find what you're looking for:\n        <img src=\"images/search-box.png\" alt=\"Search box\"/>\n    </p>\n    <p>\n        Start listing your extra stuff\n        <img src=\"images/list-something.png\" alt=\"Listing button\"/>\n    </p>\n    <p>\n        Use the dynamic filters to focus your search and find exactly what you are looking for.\n        <img src=\"images/filter-icons.png\" alt=\"filter icons\"/>\n    </p>\n    <h3>Happy Listing!</h3>\n</div>");
            }
          }, function(error) {
            message = "<p>There is an error occurred while we try to register your account.\n   Sorry for the inconvenience.</p>\n<p>If the problem persists,\n   please contact admin@melisting.com for further assistance.</p>";
            return $formError.html(message).fadeIn(1500).delay(3500).fadeOut(1500);
          });
        } else {
          message = "<p>We\"re sorry, but the form contains errors.</p>\n<p>Please correct them below and resubmit. Thank you.</p>";
          $formError.html(message).fadeIn(1500).delay(3500).fadeOut(1500);
        }
        return event.preventDefault();
      });
      validateForm = function() {
        var result;
        console.log("validate form is called");
        result = true;
        if (!validateEmail($email.val())) {
          result = false;
          $emailError.html("<p>Email has to be in the format: i.e. email@yourdomain.com.</p>");
          $email.css("border", "3px solid #F00");
        } else {
          $emailError.text("");
          $email.css("border", "3px solid #CCC");
        }
        if (!validateUsername($username.val())) {
          result = false;
          $usernameError.html("<p>Username has to be of 6 to 8 characters.</p>");
          $username.css("border", "3px solid #F00");
        } else {
          $usernameError.text("");
          $username.css("border", "3px solid #CCC");
        }
        if (!validatePassword($password.val())) {
          result = false;
          $passwordError.html("<p>Password has to be at least of 6 characters.  Recommended to have combination of letters and numbers.</P>");
          $password.css("border", "3px solid #F00");
        } else {
          $passwordError.text("");
          $password.css("border", "3px solid #CCC");
        }
        if (!$terms.is(":checked")) {
          result = false;
          $termsError.html("<p>The terms of use has to be checked as in agreement to proceed.</p>");
        } else {
          $termsError.text("");
        }
        if (!validateCountry($country.val())) {
          result = false;
          $countryError.html("<p>Country entered is not valid</p>");
          $country.css("border", "3px solid #F00");
        } else {
          $countryError.text("");
          $country.css("border", "3px solid #CCC");
        }
        if (!validateCity($city.val())) {
          result = false;
          $cityError.html("<p>Cit and/or State entered is not valid</p>");
          $city.css("border", "3px solid #F00");
        } else {
          $cityError.text("");
          $city.css("border", "3px solid #CCC");
        }
        return result;
      };
      return event.preventDefault();
    });
    $documentBody.off("click", "a#signup-form-close").on("click", "a#signup-form-close", function() {
      jQuery.colorbox.close();
      if (isotope && isInitiallyPlaying) return isotope.play();
    });
    $documentBody.off("click", "label#term-of-use").on("click", "label#term-of-use", function(event) {
      return console.log("term of use clicked");
    });
    hideAllFiltersExcept = function(exceptFilterID) {
      jQuery("a#close-signin-form").click();
      return jQuery.each(["#category-filter-section", "#location-filter-section", "#wishlist-filter-section"], function(index, value) {
        if (value !== exceptFilterID) return jQuery(value).hide('fast');
      });
    };
    pauseIsotopePlayerForFilterSection = function($filterSection) {
      if ($filterSection.is(":visible")) {
        if (isotope && !isotope.isPlaying()) return $playButton.click();
      } else {
        if (isotope && isotope.isPlaying()) return $pauseButton.click();
      }
    };
    $categoryFilterSection = jQuery("#category-filter-section");
    $documentBody.off("click", "#category-filter").on("click", "#category-filter", function(event) {
      hideAllFiltersExcept("#category-filter-section");
      pauseIsotopePlayerForFilterSection($categoryFilterSection);
      $categoryFilterSection.slideToggle('fast');
      return event.preventDefault();
    });
    selectors = [];
    filters = "";
    assignColors = function(categories) {
      var category, colorString, i, result, _i, _len;
      result = {};
      colorString = "rgba({0}, {1}, {2}, 0.2)";
      for (i = _i = 0, _len = categories.length; _i < _len; i = ++_i) {
        category = categories[i];
        result[category] = colorString.format((0 + i * 71) % 255, (150 + i * 29) % 255, (50 + i * 17) % 255);
      }
      return result;
    };
    categoryColorMap = assignColors(categories);
    filterAndColorBackground = function(element, category) {
      var color, noColor;
      noColor = "";
      color = categoryColorMap[category] || noColor;
      category = "." + category.split(" ").join('-');
      if (element.is(':checked')) {
        element.next().css("background-color", color);
        selectors.push(category);
      } else {
        element.next().css("background-color", noColor);
        selectors = _.without(selectors, category);
      }
      if (selectors) {
        filters = selectors.join(",");
      } else {
        filters = "*";
      }
      return filterByCategory(filters);
    };
    filterByCategory = function(fitlers) {
      return $container.isotope({
        filter: filters
      });
    };
    selected = jQuery("input[name=category]:checked");
    jQuery(selected).each(function(element) {
      var category;
      element = jQuery(this);
      category = element.attr("value");
      return filterAndColorBackground(element, category);
    });
    $documentBody.off("click", "input.category").on("click", "input.category", function(event) {
      var category, element;
      element = jQuery(this);
      category = element.attr("value");
      return filterAndColorBackground(element, category);
    });
    $documentBody.off("click", "input.distance-range").on("click", "input.distance-range", function(event) {
      var distance;
      distance = jQuery("input[name=range]:checked").val();
      return console.log(distance + " was checked");
    });
    map = null;
    displayCurrentMap = function() {
      var i, marker, markers, tiles, _i;
      if (map === null) {
        map = new L.Map('map');
        tiles = new L.StamenTileLayer('watercolor');
        L.tileLayer('http://{s}.tile.cloudmade.com/552ed20c2dcf46d49a048d782d8b37e6/997/256/{z}/{x}/{y}.png', {
          attribution: 'Map data &copy; <a href="http://openstreetmap.org">OpenStreetMap</a> contributors, <a href="http://creativecommons.org/licenses/by-sa/2.0/">CC-BY-SA</a>, Imagery © <a href="http://cloudmade.com">CloudMade</a>',
          maxZoom: 18
        }).addTo(map);
        map.setView(new L.LatLng(latitude, longitude), 13);
        markers = new L.MarkerClusterGroup();
        for (i = _i = 1; _i <= 100; i = ++_i) {
          marker = new L.Marker(new L.LatLng(latitude + i / 10000, longitude + i / 10000));
          markers.addLayer(marker);
        }
        return map.addLayer(markers);
      } else {
        return map.setView(new L.LatLng(latitude, longitude), 13);
      }
    };
    $locationFilterSection = jQuery("#location-filter-section");
    $documentBody.off("click", "#location-filter").on("click", "#location-filter", function(event) {
      var $city, $country;
      hideAllFiltersExcept("#location-filter-section");
      $city = jQuery("input#location-city-state-change-text-input");
      $country = jQuery("input#location-country-change-text-input");
      pauseIsotopePlayerForFilterSection($locationFilterSection);
      $locationFilterSection.slideToggle('fast');
      displayCurrentMap();
      if (currentLocation.city === currentLocation.state) {
        $city.attr("placeholder", currentLocation.city);
      } else {
        $city.attr("placeholder", currentLocation.city + ", " + currentLocation.state);
      }
      $country.attr("placeholder", currentLocation.country);
      if ($country.val() === "") {
        $city.val("");
        $city.attr("disabled", true);
      }
      return $documentBody.off("focus", "input#location-country-change-text-input").on("focus", "input#location-country-change-text-input", function(event) {
        $country.val("");
        $city.val("");
        $city.attr("disabled", true);
        $country.autocomplete({
          source: function(request, response) {
            if (isNumber(request.term)) {
              return jQuery.getJSON("/api/getCitiesByZipcode/", {
                term: request.term,
                maxRows: 12
              }, response);
            } else {
              return jQuery.getJSON("/api/getCountries/", {
                term: request.term,
                maxRows: 12
              }, response);
            }
          },
          minLength: 1,
          select: function(event, ui) {
            if (ui.item.ISO2) {
              ISO2 = ui.item.ISO2;
            } else {
              longitude = ui.item.longitude;
              latitude = ui.item.latitude;
              $city.val(ui.item.address);
            }
            return $city.removeAttr("disabled");
          },
          autoFocus: true,
          autoSelect: true
        });
        $documentBody.off("blur", "input#location-country-change-text-input").on("blur", "input#location-country-change-text-input", function(event) {
          var autocomplete, matcher, myInput;
          autocomplete = jQuery(this).data("autocomplete");
          matcher = new RegExp("^" + jQuery.ui.autocomplete.escapeRegex(jQuery(this).val()) + "$", "i");
          myInput = jQuery(this);
          autocomplete.widget().children(".ui-menu-item").each(function() {
            var item;
            item = jQuery(this).data("item.autocomplete");
            if (matcher.test(item.label || item.value || item)) {
              autocomplete.selectedItem = item;
            }
          });
          if (autocomplete.selectedItem) {
            return autocomplete._trigger("select", event, {
              item: autocomplete.selectedItem
            });
          } else {
            return jQuery(this).val("");
          }
        });
        $documentBody.off("keyup", "input#location-country-change-text-input").on("keyup", "input#location-country-change-text-input", function(event) {
          var keycode;
          keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
          if (keycode === ENTER_KEY) {
            $city.focus();
            return event.preventDefault();
          }
        });
        $documentBody.off("focus", "input#location-city-state-change-text-input").on("focus", "input#location-city-state-change-text-input", function(event) {
          $city.val("");
          return $city.autocomplete({
            source: function(request, response) {
              return jQuery.getJSON("/api/getCities/", {
                term: request.term,
                ISO2: ISO2,
                maxRows: 12
              }, response);
            },
            minLength: 1,
            select: function(event, ui) {
              longitude = ui.item.longitude;
              latitude = ui.item.latitude;
              locationWatcher.country = ISO2;
              locationWatcher.city = ui.item.value;
              displayCurrentMap();
              $city.attr("placeholder", currentLocation.city);
              $country.attr("placeholder", currentLocation.country);
              return $country.focus();
            },
            autoFocus: true,
            autoSelect: true
          });
        });
        $documentBody.off("blur", "input#location-city-state-change-text-input").on("blur", "input#location-city-state-change-text-input", function(event) {
          var autocomplete, matcher, myInput;
          autocomplete = jQuery(this).data("autocomplete");
          matcher = new RegExp("^" + jQuery.ui.autocomplete.escapeRegex(jQuery(this).val()) + "$", "i");
          myInput = jQuery(this);
          autocomplete.widget().children(".ui-menu-item").each(function() {
            var item;
            item = jQuery(this).data("item.autocomplete");
            if (matcher.test(item.label || item.value || item)) {
              autocomplete.selectedItem = item;
            }
          });
          if (autocomplete.selectedItem) {
            return autocomplete._trigger("select", event, {
              item: autocomplete.selectedItem
            });
          } else {
            return jQuery(this).val("");
          }
        });
        return event.preventDefault();
      });
    });
    transformWishListToHtml = function(json) {
      var result;
      result = '<li id="xxxxxxxxx-wishlistID" class="wishlist-postitem">\n  <a href="javascript:void(0);">\n    <img src="http://farm1.static.flickr.com/163/399223609_db47d35b7c_t.jpg" />\n  </a>\n  <p class="wishlist-postitem-delete"><a href="javascript:void(0);">delete</a></p>\n</li>';
      return result;
    };
    $wishlistFilterSection = jQuery("#wishlist-filter-section");
    $wishlistCarousel = jQuery("div#es-carousel-wrapper-wishlist");
    $wishlistCarouselList = $wishlistCarousel.find("#es-carousel ul");
    isCarouselInitialized = false;
    wishlists = {};
    $documentBody.off("click", "#wishlist-filter").on("click", "#wishlist-filter", function(event) {
      if (!loggedin) {
        console.log("log in before checking your wishlist.");
        return;
      }
      hideAllFiltersExcept("#wishlist-filter-section");
      if (!isCarouselInitialized) {
        $wishlistCarousel.elastislide({
          imageW: 100,
          minItems: 3,
          border: 0,
          onClick: function($item) {
            return console.log($item);
          }
        });
        isCarouselInitialized = true;
      }
      pauseIsotopePlayerForFilterSection($wishlistFilterSection);
      if ($wishlistFilterSection.is(":visible")) {
        return $wishlistFilterSection.slideToggle('fast');
      } else {
        rpc.request({
          url: "../../../api/wishlist/{0}/".format(username),
          method: "GET",
          data: {}
        }, function(response) {
          var $item, $items, id, result, wishlist;
          result = JSON.parse(response.data);
          if (result.response === "success") {
            wishlists = result.context;
            if (!wishlists) {
              return $wishlistCarouselList.html("<li>No item yet.  Add some!</li>");
            } else {
              $wishlistCarouselList.html("");
              console.log("success");
              for (id in wishlists) {
                wishlist = wishlists[id];
                console.log("iterate wishlists");
                $items = jQuery('<li><a href="#"><img src="http://farm1.static.flickr.com/163/399223609_db47d35b7c_t.jpg" alt="image01" /></a></li><li><a href="#"><img src="http://farm1.static.flickr.com/163/399223609_db47d35b7c_t.jpg" alt="image01" /></a></li>');
                $wishlistCarouselList.append($item);
                $wishlistCarousel.elastislide('add', $item);
              }
              $item = jQuery(transformWishListToHtml("dummy"));
              $wishlistCarouselList.append($item);
              return $wishlistCarousel.elastislide('add', $item);
            }
          }
        }, function(error) {
          console.log("error");
          return console.log(error);
        });
        $wishlistFilterSection.slideToggle('fast');
        return event.preventDefault();
      }
    });
    $documentBody.off("hover", "li.wishlist-postitem").on("hover", "li.wishlist-postitem", function(event) {
      if (event.type === "mouseenter") {
        return console.log("hover on wishlist item");
      } else {
        return console.log("hover off wishlist item");
      }
    });
    $documentBody.off("click", "li.wishlist-postitem").on("click", "li.wishlist-postitem", function(event) {
      return console.log("click on wishlist item");
    });
    $documentBody.off("click", "p.wishlist-postitem-delete").on("click", "p.wishlist-postitem-delete", function(event) {
      var $item, wishlistID;
      console.log("delete wishlist item");
      wishlistID = 0;
      rpc.request({
        url: "../../../api/wishlist/{0}/".format(wishlistID),
        method: "DELETE",
        data: {}
      }, function(response) {
        var $item, result;
        result = JSON.parse(response.data);
        if (result.response === "success") {
          console.log("success");
          $item = $wishlistCarouselList.find("li#" + wishlistID);
          $item.remove();
          $wishlistCarousel.elastislide("remove", $item);
          if ($wishlistCarouselList.children().length <= 0) {
            return console.log("carousel list is empty");
          }
        }
      }, function(error) {
        console.log("error");
        return console.log(error);
      });
      $item = $wishlistCarouselList.find("li#xxxxxxxxx-wishlistID");
      $item.remove();
      $wishlistCarousel.elastislide("remove", $item);
      if ($wishlistCarouselList.children().length <= 0) {
        console.log("carousel list is empty");
      }
      return event.preventDefault();
    });
    $documentBody.off("click", "a#list-something").on("click", "a#list-something", function(event) {
      var $cancelUploadSection, $category, $categoryError, $city, $cityError, $country, $countryError, $description, $descriptionError, $email, $emailError, $exchangeOptions, $exchangeOptionsError, $listingForm, $listingFormError, $mediaError, $neighborhood, $price, $priceError, $showEmail, $title, $titleError, $uploadbar, numberOfPhotosUploaded, numberOfVideoUploaded, numberOfVoiceUploaded, oldEmail, onError, onRemove, onSelect, onSuccess, onUpload, processID, updateStatus, uploadStatus, validateForm;
      hideAllFiltersExcept("none");
      jQuery("a#close-signin-form").click();
      if (!loggedin) {
        console.log("log in before posting.");
        event.preventDefault();
        return;
      }
      address = null;
      $listingForm = $uploadbar = $uploadbar = null;
      $title = $description = $city = null;
      $email = $showEmail = $price = null;
      $country = $priceError = $countryError = null;
      $exchangeOptions = $category = $neighborhood = null;
      $titleError = $descriptionError = $emailError = null;
      $mediaError = $exchangeOptionsError = $categoryError = null;
      $listingFormError = $cancelUploadSection = $cityError = null;
      jQuery.colorbox.remove();
      jQuery.colorbox({
        href: "/pages/new-listing/",
        width: "100%",
        height: "100%",
        close: "",
        onClosed: function() {
          return console.log("onclose newlisting colorbox");
        },
        onComplete: function() {
          var $photoFileUpload, $videoFileUpload, $voiceFileUpload, categories, ___iced_passed_deferral, __iced_deferrals, __iced_k,
            _this = this;
          __iced_k = __iced_k_noop;
          ___iced_passed_deferral = iced.findDeferral(arguments);
          console.log("completed newlisting colorbox");
          categories = {};
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "index.coffee",
              funcname: "onComplete"
            });
            jQuery.getJSON("/api/getCategories/", __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return categories = arguments[0];
                };
              })(),
              lineno: 2005
            }));
            __iced_deferrals._fulfill();
          })(function() {
            var _ref9;
            $listingForm = jQuery("form#listing-form");
            $uploadbar = jQuery("div#uploadbar");
            $title = jQuery("input#listing-title");
            $description = jQuery("textarea#listing-description");
            $email = jQuery("input#listing-email");
            $showEmail = jQuery("input#listing-show-email");
            $price = jQuery("input#listing-price");
            $category = jQuery("input#listing-category");
            $exchangeOptions = jQuery("input[name='exchange-options']");
            $city = jQuery("input#listing-location-city-state");
            $country = jQuery("input#listing-location-country");
            $neighborhood = jQuery("input#listing-location-neighborhood");
            $titleError = jQuery("div#listing-title-error");
            $descriptionError = jQuery("div#listing-description-error");
            $mediaError = jQuery("div#listing-media-error");
            $priceError = jQuery("div#listing-price-error");
            $exchangeOptionsError = jQuery("div#listing-exchange-options-error");
            $categoryError = jQuery("div#listing-category-error");
            $emailError = jQuery("div#listing-email-error");
            $countryError = jQuery("div#listing-location-country-error");
            $cityError = jQuery("div#listing-location-city-state-error");
            $listingFormError = jQuery("div#listing-form-error");
            $cancelUploadSection = jQuery("div#listing-form-cancel-upload");
            $photoFileUpload = jQuery("input#media-input-listing-photo");
            $videoFileUpload = jQuery("input#media-input-listing-video");
            $voiceFileUpload = jQuery("input#media-input-listing-voice");
            $title.focus();
            $email.val(typeof jQuery !== "undefined" && jQuery !== null ? (_ref9 = jQuery.cookies) != null ? _ref9.get(key) : void 0 : void 0);
            if (!currentLocation.state || currentLocation.city === currentLocation.state) {
              $city.val(currentLocation.city);
            } else {
              $city.val(currentLocation.city + ", " + currentLocation.state);
            }
            $country.val(currentLocation.country);
            $neighborhood.val(currentLocation.neighborhood);
            if ($country.val() === "") {
              $city.val("");
              $city.attr("disabled", true);
              $neighborhood.val("");
            }
            $category.autocomplete({
              source: categories
            });
            $photoFileUpload.kendoUpload({
              localization: {
                select: "Photos"
              },
              success: function(event) {
                return onSuccess(event, "photos");
              },
              error: function(event) {
                return onError(event, "photos");
              },
              upload: function(event) {
                return onUpload(event, "photos");
              },
              select: function(event) {
                return onSelect(event, "photos");
              },
              remove: function(event) {
                return onRemove(event, "photos");
              }
            });
            $videoFileUpload.kendoUpload({
              localization: {
                select: "Video"
              },
              success: function(event) {
                return onSuccess(event, "video");
              },
              error: function(event) {
                return onError(event, "video");
              },
              upload: function(event) {
                return onUpload(event, "video");
              },
              select: function(event) {
                return onSelect(event, "video");
              },
              remove: function(event) {
                return onRemove(event, "video");
              }
            });
            $voiceFileUpload.kendoUpload({
              localization: {
                select: "Voice"
              },
              success: function(event) {
                return onSuccess(event, "voice");
              },
              error: function(event) {
                return onError(event, "voice");
              },
              upload: function(event) {
                return onUpload(event, "voice");
              },
              select: function(event) {
                return onSelect(event, "voice");
              },
              remove: function(event) {
                return onRemove(event, "voice");
              }
            });
            if (isotope) {
              isInitiallyPlaying = isotope.isPlaying();
              return isotope.stop();
            }
          });
        }
      });
      numberOfPhotosUploaded = numberOfVideoUploaded = numberOfVoiceUploaded = 0;
      onSuccess = function(event, type) {
        return console.log(type + " success");
      };
      onError = function(event, type) {
        return console.log(type + " error");
      };
      onUpload = function(event, type) {
        var files;
        files = event.files;
        console.log("select " + files + type);
        switch (type) {
          case "photos":
            return console.log("onUpload");
          case "video":
            return console.log("onUpload");
          case "voice":
            return console.log("onUpload");
          default:
            return console.log("error type is not of photos or video or voice.");
        }
      };
      onSelect = function(event, type) {
        var files, len;
        files = event.files;
        len = files.length;
        console.log("select " + files + type);
        switch (type) {
          case "photos":
            if (numberOfPhotosUploaded < 4) {
              jQuery.each(files, function(index, file) {
                if (jQuery.inArray(file.extension.toLowerCase(), [".gif", ".png", ".jpeg", ".jpg", ".bmp"]) === -1) {
                  $mediaError.html("<p>Photo has to be in gif or png or jpeg or bmp format.</p>").fadeIn(1500).delay(3500).fadeOut(1500);
                  numberOfPhotosUploaded = numberOfPhotosUploaded - len;
                  event.preventDefault();
                }
                if (file.size > 2468000) {
                  $mediaError.html("<p>Photo file is bigger than 2.5 mb limit.</p>").fadeIn(1500).delay(3500).fadeOut(1500);
                  numberOfPhotosUploaded = numberOfPhotosUploaded - len;
                  return event.preventDefault();
                }
              });
              return numberOfPhotosUploaded = numberOfPhotosUploaded + len;
            } else {
              $mediaError.html("<p>Only 4 photos are allowed for the upload.</p>").fadeIn(1500).delay(3500).fadeOut(1500);
              return event.preventDefault();
            }
            break;
          case "video":
            if (numberOfVideoUploaded < 1) {
              jQuery.each(files, function(index, file) {
                if (jQuery.inArray(file.extension.toLowerCase(), [".mp4", ".mpeg", ".mov", ".x-msvideo", ".avi", ".msvideo", ".x-msvideo", ".3gpp", ".mpeg", ".quicktime", ".MP2P", ".MP1S", ".x-flv"]) === -1) {
                  $mediaError.html("<p>Video recording has to be in the acceptable video formats i.e. mp4, mpeg, etc.</p>").fadeIn(1500).delay(3500).fadeOut(1500);
                  numberOfVideoUploaded = numberOfVideoUploaded - len;
                  event.preventDefault();
                }
                if (file.size > 10240000) {
                  $mediaError.html("<p>Video file is bigger than 10 mb limit.</p>").fadeIn(1500).delay(3500).fadeOut(1500);
                  numberOfVideoUploaded = numberOfVideoUploaded - len;
                  return event.preventDefault();
                }
              });
              return numberOfVideoUploaded = numberOfVideoUploaded + len;
            } else {
              $mediaError.html("<p>Only 1 video is allowed for the upload.</p>").fadeIn(1500).delay(3500).fadeOut(1500);
              return event.preventDefault();
            }
            break;
          case "voice":
            if (numberOfVoiceUploaded < 1) {
              jQuery.each(files, function(index, file) {
                console.log(file);
                if (jQuery.inArray(file.extension.toLowerCase(), [".mp3"]) === -1) {
                  $mediaError.html("<p>Voice recording has to be in mp3 format.</p>").fadeIn(1500).delay(3500).fadeOut(1500);
                  numberOfVoiceUploaded = numberOfVoiceUploaded - len;
                  event.preventDefault();
                }
                if (file.size > 10240000) {
                  $mediaError.html("<p>Voice file is bigger than 10 mb limit.</p>").fadeIn(1500).delay(3500).fadeOut(1500);
                  numberOfVoiceUploaded = numberOfVoiceUploaded - len;
                  return event.preventDefault();
                }
              });
              return numberOfVoiceUploaded = numberOfVoiceUploaded + len;
            } else {
              $mediaError.html("<p>Only 1 voice recording is allowed for the upload.</p>").fadeIn(1500).delay(3500).fadeOut(1500);
              return event.preventDefault();
            }
            break;
          default:
            return console.log("error type is not of photos or video or voice.");
        }
      };
      onRemove = function(event, type) {
        var files, len;
        files = event.files;
        len = files.length;
        switch (type) {
          case "photos":
            return numberOfPhotosUploaded = numberOfPhotosUploaded - len;
          case "video":
            return numberOfVideoUploaded = numberOfVideoUploaded - len;
          case "voice":
            return numberOfVoiceUploaded = numberOfVoiceUploaded - len;
          default:
            return console.log("error type is not of photos or video or voice.");
        }
      };
      $documentBody.off("focus", "input#listing-location-country").on("focus", "input#listing-location-country", function(event) {
        console.log("in focus country");
        $country.val("");
        $city.val("");
        $city.attr("disabled", true);
        $neighborhood.val("");
        $country.autocomplete({
          source: function(request, response) {
            if (isNumber(request.term)) {
              return jQuery.getJSON("/api/getCitiesByZipcode/", {
                term: request.term,
                maxRows: 12
              }, response);
            } else {
              return jQuery.getJSON("/api/getCountries/", {
                term: request.term,
                maxRows: 12
              }, response);
            }
          },
          minLength: 1,
          select: function(event, ui) {
            if (ui.item.ISO2) {
              ISO2 = ui.item.ISO2;
              return $city.removeAttr("disabled");
            } else {
              longitude = ui.item.longitude;
              latitude = ui.item.latitude;
              this.value = ui.item.country;
              ISO2 = ui.item.country;
              return $city.val(ui.item.address);
            }
          },
          autoFocus: true,
          autoSelect: true
        });
        $documentBody.off("blur", "input#listing-location-country").on("blur", "input#listing-location-country", function(event) {
          var autocomplete, matcher, myInput;
          console.log("on blur country autocomplete");
          autocomplete = jQuery(this).data("autocomplete");
          matcher = new RegExp("^" + jQuery.ui.autocomplete.escapeRegex(jQuery(this).val()) + "$", "i");
          myInput = jQuery(this);
          autocomplete.widget().children(".ui-menu-item").each(function() {
            var item;
            item = jQuery(this).data("item.autocomplete");
            if (matcher.test(item.label || item.value || item)) {
              autocomplete.selectedItem = item;
            }
          });
          if (autocomplete.selectedItem) {
            return autocomplete._trigger("select", event, {
              item: autocomplete.selectedItem
            });
          } else {
            return jQuery(this).val("");
          }
        });
        return $documentBody.off("keyup", "input#listing-location-country").on("keyup", "input#listing-location-country", function(event) {
          var keycode;
          keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
          if (keycode === ENTER_KEY) {
            $city.focus();
            return event.preventDefault();
          }
        });
      });
      $documentBody.off("focus", "input#listing-location-city-state").on("focus", "input#listing-location-city-state", function(event) {
        console.log("focus input#listing-location-city-state");
        $city.val("");
        $neighborhood.val("");
        $city.autocomplete({
          source: function(request, response) {
            return jQuery.getJSON("/api/getCities/", {
              term: request.term,
              ISO2: ISO2,
              maxRows: 12
            }, response);
          },
          minLength: 1,
          select: function(event, ui) {
            longitude = ui.item.longitude;
            return latitude = ui.item.latitude;
          },
          autoFocus: true,
          autoSelect: true
        });
        $documentBody.off("blur", "input#listing-location-city-state").on("blur", "input#listing-location-city-state", function(event) {
          var autocomplete, matcher, myInput;
          console.log("on blur city autocomplete");
          autocomplete = jQuery(this).data("autocomplete");
          matcher = new RegExp("^" + jQuery.ui.autocomplete.escapeRegex(jQuery(this).val()) + "$", "i");
          myInput = jQuery(this);
          autocomplete.widget().children(".ui-menu-item").each(function() {
            var item;
            item = jQuery(this).data("item.autocomplete");
            if (matcher.test(item.label || item.value || item)) {
              autocomplete.selectedItem = item;
            }
          });
          if (autocomplete.selectedItem) {
            return autocomplete._trigger("select", event, {
              item: autocomplete.selectedItem
            });
          } else {
            return jQuery(this).val("");
          }
        });
        return $documentBody.off("keyup", "input#listing-location-city-state").on("keyup", "input#listing-location-city-state", function(event) {
          var keycode;
          keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
          if (keycode === ENTER_KEY) {
            $neighborhood.focus();
            return event.preventDefault();
          }
        });
      });
      $documentBody.off("keyup", "input#listing-title").on("keyup", "input#listing-title", function(event) {
        var keycode;
        keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
        if (keycode === ENTER_KEY && validateTitle(jQuery(this).val())) {
          $description.focus();
          $titleError.text("");
          $title.css("border", "3px solid #CCC");
          return event.preventDefault();
        }
      });
      $documentBody.off("keyup", "textarea#listing-description").on("keyup", "textarea#listing-description", function(event) {
        var keycode;
        keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
        if (keycode === ENTER_KEY && validateDescription(jQuery(this).val())) {
          $email.focus();
          $descriptionError.text("");
          $description.css("border", "3px solid #CCC");
          return event.preventDefault();
        }
      });
      $documentBody.off("keyup", "input#listing-email").on("keyup", "input#listing-email", function(event) {
        var keycode;
        keycode = (event != null ? event.key : void 0) || (event != null ? event.which : void 0);
        if (keycode === ENTER_KEY && validateEmail(jQuery(this).val())) {
          $price.focus();
          $emailError.text("");
          $email.css("border", "3px solid #CCC");
          return event.preventDefault();
        }
      });
      $documentBody.on("keyup", "input#listing-price", function(event) {
        var keycode;
        keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
        if (keycode === ENTER_KEY && validatePrice(jQuery(this).val())) {
          console.log(keycode + " " + jQuery(this).val());
          $category.focus();
          $priceError.text("");
          $price.css("border", "3px solid #CCC");
          return event.preventDefault();
        }
      });
      $documentBody.off("keyup", "input#listing-category").on("keyup", "input#listing-category", function(event) {
        var keycode;
        keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
        if (keycode === ENTER_KEY && validateCategory(jQuery(this).val())) {
          $country.focus();
          $categoryError.text("");
          $category.css("border", "3px solid #CCC");
          return event.preventDefault();
        }
      });
      $documentBody.off("keyup", "input#listing-location-country").on("keyup", "input#listing-location-country", function(event) {
        var keycode;
        keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
        if (keycode === ENTER_KEY && validateLocation(jQuery(this).val())) {
          $city.focus();
          $countryError.text("");
          return event.preventDefault();
        }
      });
      $documentBody.off("keyup", "input#listing-location-city-state").on("keyup", "input#listing-location-city-state", function(event) {
        var keycode;
        keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
        if (keycode === ENTER_KEY && validateLocation(jQuery(this).val())) {
          $neighborhood.focus();
          $cityError.text("");
          return event.preventDefault();
        }
      });
      $documentBody.off("keyup", "input#listing-location-neighborhood").on("keyup", "input#listing-location-neighborhood", function(event) {
        var keycode;
        keycode = (event != null ? event.keyCode : void 0) || (event != null ? event.which : void 0);
        if (keycode === ENTER_KEY) {
          $title.focus();
          return event.preventDefault();
        }
      });
      $documentBody.off("click", "input[name='exchange-options']").on("click", "input[name='exchange-options']", function(event) {
        var showOtherOption;
        console.log("click, input[name='exchange-options'] is clicked");
        $exchangeOptionsError.text("");
        showOtherOption = false;
        jQuery("input:checkbox[name='exchange-options']:checked").each(function() {
          if (jQuery(this).val() === "Other") return showOtherOption = true;
        });
        if (showOtherOption) {
          return jQuery("input#listing-exchange-options-other-text").show();
        } else {
          return jQuery("input#listing-exchange-options-other-text").hide();
        }
      });
      oldEmail = "";
      $documentBody.off("blur", "input#listing-email").on("blur", "input#listing-email", function(event) {
        var email;
        email = jQuery(this).val();
        if (oldEmail !== email && validateEmail(email)) {
          oldEmail = email;
          rpc.request({
            url: "../../../api/checkEmailDuplication/",
            clearForm: true,
            method: "POST",
            data: {
              "email": email
            }
          }, function(response) {
            var result;
            result = JSON.parse(response.data);
            message = "<p>The email provided is not in the system.  Please make sure you use the email registered with us.</p>";
            if (result.response !== "duplicate") {
              return $emailError.html(message).fadeIn(1500).delay(3500).fadeOut(1500);
            } else {
              return console.log("authenticated by providing the correct email.");
            }
          }, function(error) {
            message = "<p>We can not check if the email has been registered with our server at the moment.\nSorry for the inconvenience.</p>";
            return $emailError.html(message).fadeIn(1500).delay(3500).fadeOut(1500);
          });
        }
        return event.preventDefault();
      });
      processID = null;
      $documentBody.off("submit", "form#listing-form").on("submit", "form#listing-form", function(event) {
        var processID, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        (function(__iced_k) {
          if (validateForm()) {
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "index.coffee"
              });
              jQuery.getJSON("/api/getProcessID/", __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    return processID = arguments[0];
                  };
                })(),
                lineno: 2390
              }));
              __iced_deferrals._fulfill();
            })(function() {
              jQuery("#listing-location-city-state").attr('disabled', 'disabled');
              processID = processID;
              $listingForm.ajaxSubmit({
                url: "/api/postitem/" + processID + "/",
                success: function(responseText, statusText, xhr, element) {
                  var files, result;
                  result = responseText;
                  if ((result != null ? result.response : void 0) === "oversize") {
                    files = (result != null ? result.message : void 0) || "";
                    message = "<p>The file(s) uploaded are over the limit of 2.5 mgb for Photos and 10 mgb for Voice and Video.\n    Please make sure you stay within limit for the uploads.  Please check files - " + files + "\n</p>";
                    $listingFormError.html(message).fadeIn(1500).delay(4500).fadeOut(1500);
                    return processID = null;
                  } else if ((result != null ? result.response : void 0) === "success") {
                    message = "<p>success</p>";
                    $listingFormError.html(message).fadeIn(1500).delay(4500).fadeOut(1500);
                    return processID = null;
                  } else if ((result != null ? result.response : void 0) === "abort") {
                    message = "<p>abort</p>";
                    $listingFormError.html(message).fadeIn(1500).delay(4500).fadeOut(1500);
                    return processID = null;
                  } else {
                    message = "<p>There is an error occured while trying to upload your files.\n    Please try again. If the problem persists, please contact\n    admin@melisting.com for further assistance.\n</p>";
                    $listingFormError.html(message).fadeIn(1500).delay(4500).fadeOut(1500);
                    return processID = null;
                  }
                },
                error: function() {
                  message = "<p>The download has been aborted. If this is due to a\n    technical problem and if the problem persists, please contact\n    admin@melisting.com for further assistance.\n</p>";
                  $listingFormError.html(message).fadeIn(1500).delay(4500).fadeOut(1500);
                  return processID = null;
                },
                data: {
                  longitude: longitude,
                  latitude: latitude,
                  processID: processID,
                  city: jQuery("#listing-location-city-state").val()
                }
              });
              uploadStatus();
              $uploadbar.progressbar();
              return __iced_k($uploadbar.css("display", "block"));
            });
          } else {
            message = "<p>Thre is a validation error.  Please correct the error(s) before resubmitting.</p>";
            return __iced_k($listingFormError.html(message).fadeIn(1500).delay(3500).fadeOut(1500));
          }
        })(function() {
          return event.preventDefault();
        });
      });
      $documentBody.off("click", "input[type=button]#listing-form-cancel-upload").on("click", "input[type=button]#listing-form-cancel-upload", function(event) {
        if (processID) {
          rpc.request({
            url: "../../../api/abortPosting/",
            method: "POST",
            data: {
              "processID": processID
            }
          }, function(response) {
            var result;
            result = JSON.parse(response.data);
            if (result.response === "success") {
              $uploadbar.css("display", "none");
              $cancelUploadSection.hide();
              uploadStatus();
              jQuery.colorbox.close();
              return $listingForm.clearForm();
            }
          }, function(error) {
            message = "<p>There is an error occurred while we try to abort your posting.\nSorry for the inconvenience.  If the problem persists,\nplease contact admin@melisting.com for further assistance.</p>";
            return $listingFormError.html(message).fadeIn(1500).delay(3500).fadeOut(1500);
          });
        }
        processID = null;
        jQuery.colorbox.close();
        $listingForm.clearForm();
        return event.preventDefault();
      });
      $documentBody.off("click", "input[type=button]#listing-form-continue-upload").on("click", "input[type=button]#listing-form-continue-upload", function(event) {
        $cancelUploadSection.hide();
        return event.preventDefault();
      });
      $documentBody.off("click", "a#listing-form-close").on("click", "a#listing-form-close", function(event) {
        if (isotope && isInitiallyPlaying) isotope.play();
        $cancelUploadSection.show();
        return event.preventDefault();
      });
      updateStatus = null;
      uploadStatus = function() {
        var status, uri, ___iced_passed_deferral, __iced_deferrals, __iced_k,
          _this = this;
        __iced_k = __iced_k_noop;
        ___iced_passed_deferral = iced.findDeferral(arguments);
        if (processID) {
          uri = "/api/uploadStatus/" + processID + "/";
          status = {};
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "index.coffee",
              funcname: "uploadStatus"
            });
            jQuery.getJSON(uri, __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return status = arguments[0];
                };
              })(),
              lineno: 2480
            }));
            __iced_deferrals._fulfill();
          })(function() {
            $uploadbar.progressbar("value", status);
            return __iced_k(status < 100 ? updateStatus = setTimeout(function() {
              return uploadStatus();
            }, 300) : $uploadbar.css("display", "none"));
          });
        } else {
          if (updateStatus) clearTimeout(updateStatus);
          return __iced_k($uploadbar.css("display", "none"));
        }
      };
      validateForm = function() {
        var result;
        result = true;
        if (!validateTitle($title.val())) {
          result = false;
          $titleError.html("<p>Title can not be shorter than 5 characters.</p>");
          $title.css("border", "3px solid #F00");
        } else {
          $titleError.text("");
          $title.css("border", "3px solid #CCC");
        }
        if (!validateDescription($description.val())) {
          result = false;
          $descriptionError.html("<p>Description has to be of at least 8 characters.</p>");
          $description.css("border", "3px solid #F00");
        } else {
          $descriptionError.text("");
          $description.css("border", "3px solid #CCC");
        }
        if (!validateEmail($email.val())) {
          result = false;
          $emailError.html("<p>Email has to be in the format: i.e. email@yourdomain.com.</p>");
          $email.css("border", "3px solid #F00");
        } else {
          $emailError.text("");
          $email.css("border", "3px solid #CCC");
        }
        if (!validatePrice($price.val())) {
          result = false;
          $priceError.html("<p>Price has to be numeric like 1-999999999.</p>");
          $price.css("border", "3px solid #F00");
        } else {
          $priceError.text("");
          $price.css("border", "3px solid #CCC");
        }
        if (!$exchangeOptions.is(":checked")) {
          result = false;
          $exchangeOptionsError.html("<p>At least one exhange option has to be selected.</p>");
        } else {
          $exchangeOptionsError.text("");
        }
        if (!validateCategory($category.val())) {
          result = false;
          $categoryError.html("<p>Category can not be empty or fewer than 3 characters.</p>");
          $category.css("border", "3px solid #F00");
        } else {
          $categoryError.text("");
          $category.css("border", "3px solid #CCC");
        }
        if (!validateCountry($country.val())) {
          result = false;
          $countryError.html("<p>Country entered is not valid</p>");
          $country.css("border", "3px solid #F00");
        } else {
          $countryError.text("");
          $country.css("border", "3px solid #CCC");
        }
        if (!validateCity($city.val())) {
          result = false;
          $cityError.html("<p>City and/or State entered is not valid</p>");
          $city.css("border", "3px solid #F00");
        } else {
          $cityError.text("");
          $city.css("border", "3px solid #CCC");
        }
        return result;
      };
      return event.preventDefault();
    });
    jQuery(window).smartresize(function() {
      var currentRows, rows, width;
      console.log(jQuery(window).width());
      width = jQuery(window).width();
      if (width < 790) {
        jQuery("#main-nav").hide();
        if (loggedin) {
          jQuery("#loggedin-account-nav").hide();
        } else {
          jQuery("#non-loggedin-account-nav").hide();
        }
        jQuery("location-indicator").hide();
        jQuery("footer").hide();
      } else {
        jQuery("#main-nav").show();
        if (loggedin) {
          jQuery("#loggedin-account-nav").show();
        } else {
          jQuery("#non-loggedin-account-nav").show();
        }
        jQuery("location-indicator").show();
        jQuery("footer").show();
      }
      currentRows = Math.floor(($container.height(-10)) / rowHeight);
      if (currentRows !== rows) {
        rows = currentRows;
        if (isotope) {
          return $container.height(rows * rowHeight).isotope('reLayout');
        }
      }
    }).smartresize();
    return false;
  });

}).call(this);
