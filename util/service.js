// Generated by IcedCoffeeScript 1.3.3b
(function() {
  var CityInfo, CountryInfo, LocationInfo, LoginToken, Mailer, Photo, PostItem, RatingComment, RatingCommentTopic, RegionInfo, Settings, Thoonk, UniqueLocation, User, WishList, ZipInfo, addPostingItem, authFromLoginToken, authFromLoginTokenAjax, capitalizeFirstLetters, db, deletePhoto, deleteVideo, deleteVoice, formidable, fs, generateResponse, getAllDistinctLocationString, getAllValidEmailDomainNames, getCategories, getCategoriesWithTotal, getCities, getCitiesByZipcode, getCountries, getUserPostingTotal, iced, interpretError, isMobilePhone, loadUser, loadUserAjax, logger, mkdirs, models, mongoose, path, postingJob, saveUploadData, settings, thoonk, transformToLocationString, trim, uniqueId, updateUniqueLocation, winston, _, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  path = require("path");

  fs = require("fs");

  Settings = require("settings");

  settings = new Settings(path.join(__dirname, "/../config/environment.js")).getEnvironment();

  models = require("../models/models");

  _ = require("underscore");

  mongoose = require("mongoose");

  generateResponse = function(type, message, context, session) {
    return {
      response: type,
      message: message,
      context: context,
      session: session
    };
  };

  winston = require("winston");

  logger = new winston.Logger({
    transports: [
      new winston.transports.Console(), new winston.transports.File({
        filename: "system.log"
      })
    ]
  });

  formidable = require("formidable");

  Thoonk = require("thoonk").Thoonk;

  thoonk = new Thoonk(settings.redisServer, settings.redisPort, 1);

  postingJob = thoonk.job("postingJob");

  interpretError = function(error) {
    this.result = "Generic Server Error";
    if (error.stack.indexOf("E11000 duplicate key error") !== -1) {
      this.result = "Duplicate Unique Key";
    }
    return this.result;
  };

  Mailer = (function() {

    function Mailer() {
      this.email = require("mailer");
    }

    Mailer.prototype.send = function(to, from, subject, body) {
      this.to = to;
      this.from = from;
      this.subject = subject;
      this.body = body;
      return this.email.send({
        host: settings.mailServer,
        port: settings.mailServerSSLPort,
        ssl: true,
        domain: "gmail.com",
        to: this.to,
        from: this.from,
        subject: this.subject,
        body: this.body,
        authentication: "login",
        username: settings.mailUserAccount,
        password: settings.mailUserPassword
      }, function(error, result) {
        if (error) return console.log(error);
      });
    };

    Mailer.prototype.sendWithTemplate = function(to, from, subject, template, data) {
      this.to = to;
      this.from = from;
      this.subject = subject;
      this.template = template;
      this.data = data;
      return this.email.send({
        host: settings.mailServer,
        port: settings.mailServerSSLPort,
        ssl: true,
        domain: "gmail.com",
        to: this.to,
        from: this.from,
        subject: this.subject,
        template: path.join(__dirname, "/../templates/", this.template),
        data: this.data,
        authentication: "login",
        username: settings.mailUserAccount,
        password: settings.mailUserPassword
      }, function(error, result) {
        if (error) return console.log(error);
      });
    };

    return Mailer;

  })();

  LocationInfo = ZipInfo = CityInfo = RegionInfo = CountryInfo = PostItem = null;

  Photo = WishList = User = LoginToken = RatingComment = RatingCommentTopic = null;

  UniqueLocation = null;

  db = null;

  models.defineModels(mongoose, function() {
    User = mongoose.model("User");
    PostItem = mongoose.model("PostItem");
    Photo = mongoose.model("Photo");
    WishList = mongoose.model("WishList");
    LoginToken = mongoose.model("LoginToken");
    RatingComment = mongoose.model("RatingComment");
    RatingCommentTopic = mongoose.model("RatingCommentTopic");
    CityInfo = mongoose.model("CityInfo");
    RegionInfo = mongoose.model("RegionInfo");
    CountryInfo = mongoose.model("CountryInfo");
    ZipInfo = mongoose.model("ZipInfo");
    LocationInfo = mongoose.model("LocationInfo");
    UniqueLocation = mongoose.model("UniqueLocation");
    return db = mongoose.connect(settings.serverDBURL);
  });

  getCountries = function(term, limit, callback) {
    var countries, country, error, exist, result, row, temp, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    result = [];
    countries = void 0;
    error = void 0;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "service.coffee",
        funcname: "getCountries"
      });
      LocationInfo.find({
        "country": {
          $regex: "^(?i)" + term
        }
      }, ["country", "ISO2"]).limit(limit).execFind(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            error = arguments[0];
            return countries = arguments[1];
          };
        })(),
        lineno: 131
      }));
      __iced_deferrals._fulfill();
    })(function() {
      var _i, _j, _len, _len1;
      if (error) throw error;
      for (_i = 0, _len = countries.length; _i < _len; _i++) {
        country = countries[_i];
        row = {};
        row.value = country.country;
        row.ISO2 = country.ISO2;
        exist = false;
        for (_j = 0, _len1 = result.length; _j < _len1; _j++) {
          temp = result[_j];
          if (temp.value === row.value) {
            exist = true;
            break;
          }
        }
        if (!exist) result.push(row);
      }
      return callback(result);
    });
  };

  getCitiesByZipcode = function(term, limit, callback) {
    var error, result, row, zipcode, zipcodes, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    result = [];
    zipcodes = void 0;
    error = void 0;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "service.coffee",
        funcname: "getCitiesByZipcode"
      });
      LocationInfo.find({
        "postalCode": {
          $regex: "^" + term
        }
      }).limit(limit).execFind(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            error = arguments[0];
            return zipcodes = arguments[1];
          };
        })(),
        lineno: 154
      }));
      __iced_deferrals._fulfill();
    })(function() {
      var _i, _len;
      if (error) throw error;
      for (_i = 0, _len = zipcodes.length; _i < _len; _i++) {
        zipcode = zipcodes[_i];
        row = {};
        row.latitude = zipcode.latitude;
        row.longitude = zipcode.longitude;
        if (isNaN(parseInt(zipcode.region))) {
          row.address = zipcode.city + ", " + zipcode.region;
          row.value = zipcode.postalCode + ": " + zipcode.city + ", " + zipcode.region + ", " + zipcode.ISO2;
          row.country = zipcode.ISO2;
        } else {
          row.address = zipcode.city;
          row.value = zipcode.postalCode + ": " + zipcode.city + ", " + zipcode.ISO2;
          row.country = zipcode.ISO2;
        }
        result.push(row);
      }
      return callback(result);
    });
  };

  getCities = function(term, limit, ISO2, callback) {
    var cities, city, error, exist, result, row, temp, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    result = [];
    cities = void 0;
    error = void 0;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "service.coffee",
        funcname: "getCities"
      });
      LocationInfo.find({
        "city": {
          $regex: "^(?i)" + term
        },
        "ISO2": ISO2
      }).limit(limit).execFind(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            error = arguments[0];
            return cities = arguments[1];
          };
        })(),
        lineno: 180
      }));
      __iced_deferrals._fulfill();
    })(function() {
      var _i, _j, _len, _len1;
      if (error) throw error;
      for (_i = 0, _len = cities.length; _i < _len; _i++) {
        city = cities[_i];
        row = {};
        row.latitude = city.latitude;
        row.longitude = city.longitude;
        if (isNaN(parseInt(city.region))) {
          row.value = city.city + ", " + city.region;
        } else {
          row.value = city.city;
        }
        for (_j = 0, _len1 = result.length; _j < _len1; _j++) {
          temp = result[_j];
          if (temp.value === row.value) {
            exist = true;
            break;
          }
        }
        if (!exist) result.push(row);
      }
      return callback(result);
    });
  };

  getCategories = function(db, callback) {
    var defaultArray, error, result, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    defaultArray = ["Appliances", "Antiques", "Barter", "Bycycles", "Boats", "Computer", "Free", "Furniture", "Others", "Jewelry", "Sporting Goods", "Event Tickets", "Tools", "Arts & Crafts", "Auto Parts", "Beauty & Health", "Cars & Trucks", "CDs/DVD/VHS", "Cell Phones", "Music Instruments", "Garage Sale", "Household", "Motorcycles", "Photo & Video", "Foreign Goods", "Toys & Games", "Video Games", "Baby & Kids", "Farm & Garden", "Books", "Collectibles", "Electronics", "Materials & Supplies", "Clothes & Accessories"];
    result = null;
    error = null;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "service.coffee",
        funcname: "getCategories"
      });
      PostItem.distinct("category", {}, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            error = arguments[0];
            return result = arguments[1];
          };
        })(),
        lineno: 213
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (error) concole.log(error);
      result = _.union(defaultArray, result);
      result = result.map(function(category) {
        return capitalizeFirstLetters(category);
      });
      return callback(result);
    });
  };

  getCategoriesWithTotal = function(db, callback) {
    var command, defaultArray, error, reduce, result, values, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    defaultArray = {
      "Appliances": "0",
      "Antiques": "0",
      "Barter": "0",
      "Bycycles": "0",
      "Boats": "0",
      "Computer": "0",
      "Free": "0",
      "Furniture": "0",
      "Others": "0",
      "Jewelry": "0",
      "Sporting Goods": "0",
      "Event Tickets": "0",
      "Tools": "0",
      "Arts & Crafts": "0",
      "Auto Parts": "0",
      "Beauty & Health": "0",
      "Cars & Trucks": "0",
      "CDs/DVD/VHS": "0",
      "Cell Phones": "0",
      "Music Instruments": "0",
      "Garage Sale": "0",
      "Household": "0",
      "Motorcycles": "0",
      "Photo & Video": "0",
      "Foreign Goods": "0",
      "Toys & Games": "0",
      "Video Games": "0",
      "Baby & Kids": "0",
      "Farm & Garden": "0",
      "Books": "0",
      "Collectibles": "0",
      "Electronics": "0",
      "Materials & Supplies": "0",
      "Clothes & Accessories": "0"
    };
    reduce = function(doc, prev) {
      return prev.count = +1;
    };
    command = {
      "group": {
        ns: "postitems",
        initial: {
          "count": 0
        },
        "$reduce": reduce.toString(),
        "key": {
          "category": true
        }
      }
    };
    error = null;
    result = null;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "service.coffee",
        funcname: "getCategoriesWithTotal"
      });
      db.connection.db.executeDbCommand(command, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            error = arguments[0];
            return result = arguments[1];
          };
        })(),
        lineno: 244
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (error) console.log(error);
      _this.array = _.first(result.documents).retval;
      values = {};
      _this.array.forEach(function(value) {
        value.category = capitalizeFirstLetters(value.category);
        return values[value.category] = value.count;
      });
      _.extend(defaultArray, values);
      return callback(defaultArray);
    });
  };

  getUserPostingTotal = function(db, alphabet, sort, page, callback) {
    var command, count, defaultArray, error, numberofPages, obj, reduce, result, user, userSet, users, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    users = void 0;
    count = void 0;
    numberofPages = void 0;
    defaultArray = {};
    userSet = [];
    (function(__iced_k) {
      if (alphabet === "all") {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "service.coffee",
            funcname: "getUserPostingTotal"
          });
          User.count({
            "status": "active"
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                error = arguments[0];
                return count = arguments[1];
              };
            })(),
            lineno: 270
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (error) console.log(error);
          numberofPages = Math.ceil(count / settings.postItemsPerPage);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "service.coffee",
              funcname: "getUserPostingTotal"
            });
            User.find({
              "status": "active"
            }).sort("username", sort).skip((page - 1) * settings.postItemsPerPage).limit(settings.postItemsPerPage).execFind(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  error = arguments[0];
                  return users = arguments[1];
                };
              })(),
              lineno: 273
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        });
      } else {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "service.coffee",
            funcname: "getUserPostingTotal"
          });
          User.count({
            "username": {
              $regex: "^(?i)" + alphabet
            },
            "status": "active"
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                error = arguments[0];
                return count = arguments[1];
              };
            })(),
            lineno: 275
          }));
          __iced_deferrals._fulfill();
        })(function() {
          numberofPages = Math.ceil(count / settings.postItemsPerPage);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "service.coffee",
              funcname: "getUserPostingTotal"
            });
            User.find({
              "username": {
                $regex: "^(?i)" + alphabet
              },
              "status": "active"
            }).sort("username", sort).skip((page - 1) * settings.postItemsPerPage).limit(settings.postItemsPerPage).execFind(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  error = arguments[0];
                  return users = arguments[1];
                };
              })(),
              lineno: 278
            }));
            __iced_deferrals._fulfill();
          })(__iced_k);
        });
      }
    })(function() {
      var _i, _len;
      for (_i = 0, _len = users.length; _i < _len; _i++) {
        user = users[_i];
        defaultArray[user.username] = {};
        defaultArray[user.username].numberOfPosting = 0;
        defaultArray[user.username].location = user.address.city + ", " + user.address.state + ", " + user.address.country;
        userSet.push(user.username);
      }
      reduce = function(doc, prev) {
        return prev.count++;
      };
      command = {
        "group": {
          ns: "postitems",
          "cond": {
            "status": "published",
            "username": {
              $in: userSet
            }
          },
          initial: {
            "count": 0
          },
          "$reduce": reduce.toString(),
          "key": {
            "username": 1
          }
        }
      };
      error = null;
      result = null;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "service.coffee",
          funcname: "getUserPostingTotal"
        });
        db.connection.db.executeDbCommand(command, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              error = arguments[0];
              return result = arguments[1];
            };
          })(),
          lineno: 295
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _j, _len1, _ref;
        if (error) console.log(error);
        _ref = result.documents[0].retval;
        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
          obj = _ref[_j];
          defaultArray[obj.username].numberOfPosting = obj.count;
        }
        return callback(defaultArray, numberofPages);
      });
    });
  };

  getAllValidEmailDomainNames = function(db, callback) {
    var defaultArray, domainNames, error, result, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    defaultArray = ["hotmail.com", "gmail.com", "aol.com", "yahoo.com"];
    result = null;
    error = null;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "service.coffee",
        funcname: "getAllValidEmailDomainNames"
      });
      User.distinct("email", {}, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            error = arguments[0];
            return result = arguments[1];
          };
        })(),
        lineno: 311
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (error) console.log(error);
      domainNames = _.map(result, function(email) {
        return email.substring(email.indexOf("@") + 1, email.length);
      });
      domainNames = _.union(defaultArray, domainNames);
      return callback(defaultArray);
    });
  };

  getAllDistinctLocationString = function(db, callback) {
    var error, locations, result, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    result = null;
    error = null;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "service.coffee",
        funcname: "getAllDistinctLocationString"
      });
      UniqueLocation.find({}).execFind(__iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            error = arguments[0];
            return result = arguments[1];
          };
        })(),
        lineno: 325
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (error) console.log(error);
      locations = _.pluck(result, "value");
      return callback(locations);
    });
  };

  updateUniqueLocation = function(db) {
    var command, errMsg, error, map, reduce, result, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    map = function() {
      var result;
      result = transformToLocationString(this.address.city, this.address.state, this.address.country);
      return emit(result, result);
    };
    reduce = function(key, values) {
      return key;
    };
    command = {
      mapreduce: "postitems",
      ns: "postitems",
      map: map,
      reduce: reduce,
      out: "uniquelocations"
    };
    error = null;
    result = null;
    (function(__iced_k) {
      __iced_deferrals = new iced.Deferrals(__iced_k, {
        parent: ___iced_passed_deferral,
        filename: "service.coffee",
        funcname: "updateUniqueLocation"
      });
      db.connection.db.executeDbCommand(command, __iced_deferrals.defer({
        assign_fn: (function() {
          return function() {
            error = arguments[0];
            return result = arguments[1];
          };
        })(),
        lineno: 351
      }));
      __iced_deferrals._fulfill();
    })(function() {
      if (error) console.log(error);
      errMsg = result.documents[0].assertion;
      if (errMsg) return console.log(errMsg);
    });
  };

  transformToLocationString = function(city, state, country) {
    city = city.trim().replace(" ", ".").toLowerCase() + ".";
    state = state.trim().replace(" ", ".").toLowerCase() + ".";
    country = country.trim().replace(" ", ".").toLowerCase();
    return city + state + country;
  };

  authFromLoginTokenAjax = function(req, res, next) {
    var cookie;
    cookie = req.cookies.logintoken;
    return LoginToken.findOne({
      username: cookie.username,
      token: cookie.token,
      series: cookie.series
    }, function(error, token) {
      if (!token || error) {
        return res.send(generateResponse("authentication-required", "The token is not found in the cookie.  The user is required to login again.", null, null));
      } else {
        return User.findOne({
          username: token.username
        }, function(error, user) {
          console.log("authFromLoginTokenAjax found user");
          if (user && user.status === "active") {
            req.session.userId = user.id;
            req.currentUser = user;
            token.token = token.randomToken();
            return token.save(function() {
              res.cookie("logintoken", JSON.stringify(token), {
                expires: new Date(Date.now() + 2 * 604800000),
                path: "/"
              });
              return next();
            });
          } else {
            return res.send(generateResponse("authentication-required", "The token is not found in the cookie.  The user is required to login again.", null, null));
          }
        });
      }
    });
  };

  authFromLoginToken = function(req, res, next) {
    var cookie, _ref, _ref1;
    if (req != null ? (_ref = req.cookies) != null ? _ref.logintoken : void 0 : void 0) {
      cookie = JSON.parse(req != null ? (_ref1 = req.cookies) != null ? _ref1.logintoken : void 0 : void 0);
    }
    console.log("authFromLoginToken " + JSON.stringify(cookie));
    return LoginToken.findOne({
      username: cookie != null ? cookie.username : void 0
    }, function(error, token) {
      if (!token || error) {
        console.log("authFromLoginToken no token");
        return res.redirect("/login/");
      } else {
        return User.findOne({
          username: token.username
        }, function(error, user) {
          console.log("authFromLoginToken found user");
          if (user && user.status === "active") {
            req.session.userId = user.id;
            req.currentUser = user;
            token.token = token.randomToken();
            return token.save(function(error) {
              if (!error) {
                res.cookie("logintoken", JSON.stringify(token), {
                  expires: new Date(Date.now() + 2 * 604800000),
                  path: "/"
                });
                return next();
              }
            });
          } else {
            return res.redirect("/login/");
          }
        });
      }
    });
  };

  loadUserAjax = function(req, res, next) {
    if (req.session.userId) {
      return User.findById(req.session.userId, function(error, user) {
        if (user && user.status === "active") {
          console.log("found user " + user);
          req.currentUser = user;
          return next();
        } else {
          return res.send(generateResponse("authentication-required", "The user found in session is not valid.  The user must try to log in again.", null, null));
        }
      });
    } else if (req.cookies.logintoken) {
      return authFromLoginTokenAjax(req, res, next);
    } else {
      return res.send(generateResponse("authentication-required", "There is no user information found in the session or cookie. The user must log in again.", null, null));
    }
  };

  loadUser = function(req, res, next) {
    if (req.session.user_id) {
      return User.findById(req.session.user_id, function(error, user) {
        if (user) {
          req.currentUser = user;
          return next();
        } else {
          return res.redirect("/login/");
        }
      });
    } else if (req.cookies.logintoken) {
      return authFromLoginToken(req, res, next);
    } else {
      return res.redirect("/login/");
    }
  };

  capitalizeFirstLetters = function(words) {
    if (words && trim(words) !== "") {
      return words.split(/\s+/).map(function(word) {
        if (word[0]) return word[0].toUpperCase() + word.slice(1).toLowerCase();
      }).join(" ");
    } else {
      return "";
    }
  };

  mkdirs = function(path, mode, callback) {
    var tryDirectory;
    if (path.indexOf("\\" >= 0)) path = path.replace("\\", "/");
    if (path.substr(path.length - 1) === "/") {
      path = path.substr(0, path.length - 1);
    }
    tryDirectory = function(dir, cb) {
      return fs.stat(dir, function(error, stat) {
        if (error) {
          if (error.errno === 2 || error.errno === 32 || error.errno === 34) {
            if (dir.lastIndexOf("/") === dir.indexOf("/")) {
              return cb(new Error("notfound"));
            } else {
              return tryDirectory(dir.substr(0, dir.lastIndexOf("/"), function(error) {
                if (error) {
                  return cb(error);
                } else {
                  return fs.mkdir(dir, mode, function(error) {
                    if (error && error.errno !== 17) {
                      console.log("Failed to make " + dir);
                      return cb(new Error("failed"));
                    } else {
                      return cb();
                    }
                  });
                }
              }));
            }
          } else {
            console.log(util.inspect(error, true));
            return cb(error);
          }
        } else {
          if (stat.isDirectory()) {
            return cb();
          } else {
            return cb(new Error("exists"));
          }
        }
      });
    };
    return tryDirectory(path, callback);
  };

  trim = function(string) {
    return string.replace(/^\s*|\s*$/g, "");
  };

  uniqueId = function(length) {
    var id;
    if (length == null) length = 18;
    id = "";
    while (id.length < length) {
      id += Math.random().toString(36).substr(2);
    }
    return id.substr(0, length);
  };

  isMobilePhone = function(ua) {
    return /android.+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|symbian|treo|up\.(browser|link)|vodafone|wap|windows (ce|phone)|xda|xiino/i.test(ua) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|e\-|e\/|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(di|rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|xda(\-|2|g)|yas\-|your|zeto|zte\-/i.test(ua.substr(0, 4));
  };

  saveUploadData = function(req, res, abortedFlag, Process, fileType) {
    var aborted, beginfiles, fields, files, form, overSizeFile, processId, _this;
    processId = req.params.processId;
    abortedFlag[processId] = false;
    form = new formidable.IncomingForm();
    form.uploadDir = "./public/data";
    form.keepExtensions = false;
    aborted = false;
    beginfiles = [];
    overSizeFile = [];
    files = {};
    fields = {};
    _this = this;
    form.addListener("progress", function(recvd, expected) {
      var progress;
      progress = (recvd / expected * 100).toFixed(2);
      return Process[processId] = progress;
    });
    form.on("aborted", function() {
      var file, _i, _len;
      abortedFlag[processId] = void 0;
      for (_i = 0, _len = beginfiles.length; _i < _len; _i++) {
        file = beginfiles[_i];
        fs.unlink(file.path);
      }
      logger.log("info", " (Posting module) The posting id : " + processId + " is aborted by user");
      return res.send(generateResponse("abort", "The posting is aborted by user", null, null));
    }).on("fileBegin", function(name, file) {
      return beginfiles.push(file);
    }).on("error", function(err) {
      return res.send(generateResponse("error", err, null, null));
    }).on("field", function(field, value) {
      if (fields[field] === void 0) {
        return fields[field] = value;
      } else {
        if (typeof fields[field] === "string") {
          fields[field] = [].concat(fields[field]);
          return fields[field].push(value);
        } else {
          return fields[field].push(value);
        }
      }
    }).on("file", function(field, file) {
      if (file.type.split("/")[0] === "image") {
        if (file.size > 2500000) {
          abortedFlag[processId] = true;
          return overSizeFile.push(field);
        } else {
          files["photoFile" + photoNumber] = file;
          return photoNumber++;
        }
      } else if (file.type.split("/")[0] === "audio") {
        if (file.size > 10000000) {
          abortedFlag[processId] = true;
          return overSizeFile.push(field);
        } else {
          return files[field] = file;
        }
      } else if (file.type.split("/")[0] === "video") {
        if (file.size > 10000000) {
          abortedFlag[processId] = true;
          return overSizeFile.push(field);
        } else {
          return files[field] = file;
        }
      }
    }).on("end", function() {
      var err, file, item, message, numberOfPhotos, postitem, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      item = {
        "fields": fields,
        "files": files
      };
      item.processId = processId;
      item._id = item.fields.id;
      item.photoId = item.fields.photoId;
      postitem = void 0;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "service.coffee"
        });
        PostItem.findOne({
          _id: item._id,
          status: "published"
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return postitem = arguments[1];
            };
          })(),
          lineno: 599
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _j, _len, _len1;
        if (!abortedFlag[processId] && postitem) {
          abortedFlag[processId] = void 0;
          (function(__iced_k) {
            if (fileType === "photo") {
              numberOfPhotos = postitem.numberOfPhotos;
              numberOfPhotos++;
              postitem.set('numberOfPhotos', numberOfPhotos);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "service.coffee"
                });
                postitem.save(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return err = arguments[0];
                    };
                  })(),
                  lineno: 607
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k(err ? res.send(generateResponse("error", "the post item is not available or published", null, null)) : (postingJob.publish(JSON.stringify(item), function(err, data, id) {
                  return logger.log("info", " (Posting module) Add process id " + processId + " to Posting system");
                }, false, item.processId), res.send(generateResponse("success", "add the post item to process successfully", null, null))));
              });
            } else {
              (function(__iced_k) {
                if (fileType === "voice") {
                  postitem.set('isVoiceProcessing', true);
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "service.coffee"
                    });
                    postitem.save(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return err = arguments[0];
                        };
                      })(),
                      lineno: 618
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(err ? res.send(generateResponse("error", "the post item is not available or published", null, null)) : (postingJob.publish(JSON.stringify(item), function(err, data, id) {
                      return logger.log("info", " (Posting module) Add process id " + processId + " to Posting system");
                    }, false, item.processId), res.send(generateResponse("success", "add the post item to process successfully", null, null))));
                  });
                } else {
                  (function(__iced_k) {
                    if (fileType === "video") {
                      postitem.set('isVideoProcessing', true);
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "service.coffee"
                        });
                        postitem.save(__iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return err = arguments[0];
                            };
                          })(),
                          lineno: 629
                        }));
                        __iced_deferrals._fulfill();
                      })(function() {
                        return __iced_k(err ? res.send(generateResponse("error", "the post item is not available or published", null, null)) : (postingJob.publish(JSON.stringify(item), function(err, data, id) {
                          return logger.log("info", " (Posting module) Add process id " + processId + " to Posting system");
                        }, false, item.processId), res.send(generateResponse("success", "add the post item to process successfully", null, null))));
                      });
                    } else {
                      return __iced_k();
                    }
                  })(__iced_k);
                }
              })(__iced_k);
            }
          })(__iced_k);
        } else {
          for (_i = 0, _len = beginfiles.length; _i < _len; _i++) {
            file = beginfiles[_i];
            fs.unlink(file.path);
          }
          abortedFlag[processId] = void 0;
          if (postitem) {
            if (overSizeFile.length > 0) {
              message = "";
              for (_j = 0, _len1 = overSizeFile.length; _j < _len1; _j++) {
                file = overSizeFile[_j];
                message += file + ",";
              }
              logger.log("info", " (Posting module) The posting id : " + processId + " is aborted because oversize file");
              res.send(generateResponse("oversize", message, null, null));
            } else {
              logger.log("info", " (Posting module) The posting id : " + processId + " is aborted by user");
              res.send(generateResponse("abort", "The posting is aborted by user", null, null));
            }
          } else {
            logger.log("info", " (Posting module) The posting id : " + processId + " is aborted because the item is not available");
            res.send(generateResponse("abort", "the item is not available", null, null));
          }
          return __iced_k();
        }
      });
    });
    return form.parse(req);
  };

  deletePhoto = function(req, res, abortedFlag, Process) {
    var fields, files, form, processId, _this;
    processId = req.params.processId;
    abortedFlag[processId] = false;
    form = new formidable.IncomingForm();
    form.uploadDir = "./public/data";
    files = {};
    fields = {};
    _this = this;
    form.addListener("progress", function(recvd, expected) {
      var progress;
      progress = (recvd / expected * 100).toFixed(2);
      return Process[processId] = progress;
    });
    form.on("aborted", function() {
      var file, _i, _len;
      abortedFlag[processId] = void 0;
      for (_i = 0, _len = beginfiles.length; _i < _len; _i++) {
        file = beginfiles[_i];
        fs.unlink(file.path);
      }
      logger.log("info", " (Posting module) The posting id : " + processId + " is aborted by user");
      return res.send(generateResponse("abort", "The posting is aborted by user", null, null));
    }).on("fileBegin", function(name, file) {
      return beginfiles.push(file);
    }).on("error", function(err) {
      return res.send(generateResponse("error", err, null, null));
    }).on("field", function(field, value) {
      if (fields[field] === void 0) {
        return fields[field] = value;
      } else {
        if (typeof fields[field] === "string") {
          fields[field] = [].concat(fields[field]);
          return fields[field].push(value);
        } else {
          return fields[field].push(value);
        }
      }
    }).on("end", function() {
      var err, found, i, item, numberOfPhotos, postitem, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      item = {
        "fields": fields,
        "files": files
      };
      item.processId = processId;
      item._id = item.fields.id;
      item.photoId = item.fields.photoId;
      item.processType = "delete";
      postitem = void 0;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "service.coffee"
        });
        PostItem.findOne({
          _id: item._id,
          status: "published"
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return postitem = arguments[1];
            };
          })(),
          lineno: 705
        }));
        __iced_deferrals._fulfill();
      })(function() {
        var _i, _ref;
        if (!abortedFlag[processId] && postitem) {
          abortedFlag[processId] = void 0;
          found = false;
          for (i = _i = 0, _ref = postitem.photos.length; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
            if (photo._id === item.photoId) {
              item.files["photoFile" + i] = "none";
              found = true;
            }
          }
          (function(__iced_k) {
            if (found) {
              numberOfPhotos = postitem.numberOfPhotos;
              numberOfPhotos--;
              postitem.set('numberOfPhotos', numberOfPhotos);
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "service.coffee"
                });
                postitem.save(__iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      return err = arguments[0];
                    };
                  })(),
                  lineno: 719
                }));
                __iced_deferrals._fulfill();
              })(function() {
                return __iced_k(err ? res.send(generateResponse("error", "the post item is not available or published", null, null)) : (postingJob.publish(JSON.stringify(item), function(err, data, id) {
                  return logger.log("info", " (Posting module) Add process id " + processId + " to Posting system");
                }, false, item.processId), res.send(generateResponse("success", "add the post item to process successfully", null, null))));
              });
            } else {
              return __iced_k(logger.log("info", " (Deleteing photo module) Can not found the photoID " + item.photoId + " in database; ProcessID :" + processId));
            }
          })(__iced_k);
        } else {
          abortedFlag[processId] = void 0;
          return __iced_k(postitem ? (logger.log("info", " (Posting module) The posting id : " + processId + " is aborted by user"), res.send(generateResponse("abort", "The posting is aborted by user", null, null))) : (logger.log("info", " (Posting module) The posting id : " + processId + " is aborted because the item is not available"), res.send(generateResponse("abort", "the item is not available", null, null))));
        }
      });
    });
    return form.parse(req);
  };

  deleteVoice = function(req, res, abortedFlag, Process) {
    var fields, files, form, processId, _this;
    processId = req.params.processId;
    abortedFlag[processId] = false;
    form = new formidable.IncomingForm();
    form.uploadDir = "./public/data";
    files = {};
    fields = {};
    _this = this;
    form.addListener("progress", function(recvd, expected) {
      var progress;
      progress = (recvd / expected * 100).toFixed(2);
      return Process[processId] = progress;
    });
    form.on("aborted", function() {
      var file, _i, _len;
      abortedFlag[processId] = void 0;
      for (_i = 0, _len = beginfiles.length; _i < _len; _i++) {
        file = beginfiles[_i];
        fs.unlink(file.path);
      }
      logger.log("info", " (Posting module) The posting id : " + processId + " is aborted by user");
      return res.send(generateResponse("abort", "The posting is aborted by user", null, null));
    }).on("fileBegin", function(name, file) {
      return beginfiles.push(file);
    }).on("error", function(err) {
      return res.send(generateResponse("error", err, null, null));
    }).on("field", function(field, value) {
      if (fields[field] === void 0) {
        return fields[field] = value;
      } else {
        if (typeof fields[field] === "string") {
          fields[field] = [].concat(fields[field]);
          return fields[field].push(value);
        } else {
          return fields[field].push(value);
        }
      }
    }).on("end", function() {
      var err, item, postitem, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      item = {
        "fields": fields,
        "files": files
      };
      item.processId = processId;
      item._id = item.fields.id;
      item.photoId = item.fields.photoId;
      item.processType = "delete";
      postitem = void 0;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "service.coffee"
        });
        PostItem.findOne({
          _id: item._id,
          status: "published"
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return postitem = arguments[1];
            };
          })(),
          lineno: 786
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (!abortedFlag[processId] && postitem) {
          abortedFlag[processId] = void 0;
          item.files.voiceFile = "none";
          postitem.set('isVoiceProcessing', true);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "service.coffee"
            });
            postitem.save(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 792
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k(err ? res.send(generateResponse("error", "the post item is not available or published", null, null)) : (postingJob.publish(JSON.stringify(item), function(err, data, id) {
              return logger.log("info", " (Posting module) Add process id " + processId + " to Posting system");
            }, false, item.processId), res.send(generateResponse("success", "add the post item to process successfully", null, null))));
          });
        } else {
          abortedFlag[processId] = void 0;
          return __iced_k(postitem ? (logger.log("info", " (Posting module) The posting id : " + processId + " is aborted by user"), res.send(generateResponse("abort", "The posting is aborted by user", null, null))) : (logger.log("info", " (Posting module) The posting id : " + processId + " is aborted because the item is not available"), res.send(generateResponse("abort", "the item is not available", null, null))));
        }
      });
    });
    return form.parse(req);
  };

  deleteVideo = function(req, res, abortedFlag, Process) {
    var fields, files, form, processId, _this;
    processId = req.params.processId;
    abortedFlag[processId] = false;
    form = new formidable.IncomingForm();
    form.uploadDir = "./public/data";
    files = {};
    fields = {};
    _this = this;
    form.addListener("progress", function(recvd, expected) {
      var progress;
      progress = (recvd / expected * 100).toFixed(2);
      return Process[processId] = progress;
    });
    form.on("aborted", function() {
      var file, _i, _len;
      abortedFlag[processId] = void 0;
      for (_i = 0, _len = beginfiles.length; _i < _len; _i++) {
        file = beginfiles[_i];
        fs.unlink(file.path);
      }
      logger.log("info", " (Posting module) The posting id : " + processId + " is aborted by user");
      return res.send(generateResponse("abort", "The posting is aborted by user", null, null));
    }).on("fileBegin", function(name, file) {
      return beginfiles.push(file);
    }).on("error", function(err) {
      return res.send(generateResponse("error", err, null, null));
    }).on("field", function(field, value) {
      if (fields[field] === void 0) {
        return fields[field] = value;
      } else {
        if (typeof fields[field] === "string") {
          fields[field] = [].concat(fields[field]);
          return fields[field].push(value);
        } else {
          return fields[field].push(value);
        }
      }
    }).on("end", function() {
      var err, item, postitem, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      item = {
        "fields": fields,
        "files": files
      };
      item.processId = processId;
      item._id = item.fields.id;
      item.photoId = item.fields.photoId;
      item.processType = "delete";
      postitem = void 0;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "service.coffee"
        });
        PostItem.findOne({
          _id: item._id,
          status: "published"
        }, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              err = arguments[0];
              return postitem = arguments[1];
            };
          })(),
          lineno: 857
        }));
        __iced_deferrals._fulfill();
      })(function() {
        if (!abortedFlag[processId] && postitem) {
          abortedFlag[processId] = void 0;
          item.files.videoFile = "none";
          postitem.set('isVideoProcessing', true);
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "service.coffee"
            });
            postitem.save(__iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return err = arguments[0];
                };
              })(),
              lineno: 863
            }));
            __iced_deferrals._fulfill();
          })(function() {
            return __iced_k(err ? res.send(generateResponse("error", "the post item is not available or published", null, null)) : (postingJob.publish(JSON.stringify(item), function(err, data, id) {
              return logger.log("info", " (Posting module) Add process id " + processId + " to Posting system");
            }, false, item.processId), res.send(generateResponse("success", "add the post item to process successfully", null, null))));
          });
        } else {
          abortedFlag[processId] = void 0;
          return __iced_k(postitem ? (logger.log("info", " (Posting module) The posting id : " + processId + " is aborted by user"), res.send(generateResponse("abort", "The posting is aborted by user", null, null))) : (logger.log("info", " (Posting module) The posting id : " + processId + " is aborted because the item is not available"), res.send(generateResponse("abort", "the item is not available", null, null))));
        }
      });
    });
    return form.parse(req);
  };

  addPostingItem = function(req, res, abortedFlag, Process) {
    var aborted, beginfiles, fields, files, form, overSizeFile, photoNumber, processId, _this;
    processId = req.params.processId;
    abortedFlag[processId] = false;
    form = new formidable.IncomingForm();
    form.uploadDir = "./public/data";
    form.keepExtensions = false;
    aborted = false;
    beginfiles = [];
    overSizeFile = [];
    photoNumber = 0;
    files = {};
    fields = {};
    _this = this;
    form.addListener("progress", function(recvd, expected) {
      var progress;
      progress = (recvd / expected * 100).toFixed(2);
      return Process[processId] = progress;
    });
    form.on("aborted", function() {
      var file, _i, _len;
      abortedFlag[processId] = void 0;
      for (_i = 0, _len = beginfiles.length; _i < _len; _i++) {
        file = beginfiles[_i];
        fs.unlink(file.path);
      }
      logger.log("info", " (Posting module) The posting id : " + processId + " is aborted by user");
      return res.send(generateResponse("abort", "The posting is aborted by user", null, null));
    }).on("fileBegin", function(name, file) {
      return beginfiles.push(file);
    }).on("error", function(err) {
      return res.send(generateResponse("error", err, null, null));
    }).on("field", function(field, value) {
      if (fields[field] === void 0) {
        return fields[field] = value;
      } else {
        if (typeof fields[field] === "string") {
          fields[field] = [].concat(fields[field]);
          return fields[field].push(value);
        } else {
          return fields[field].push(value);
        }
      }
    }).on("file", function(field, file) {
      if (file.type.split("/")[0] === "image") {
        if (file.size > 2500000) {
          abortedFlag[processId] = true;
          return overSizeFile.push(field);
        } else {
          files["photoFile" + photoNumber] = file;
          return photoNumber++;
        }
      } else if (file.type.split("/")[0] === "audio") {
        if (file.size > 10000000) {
          abortedFlag[processId] = true;
          return overSizeFile.push(field);
        } else {
          return files[field] = file;
        }
      } else if (file.type.split("/")[0] === "video") {
        if (file.size > 10000000) {
          abortedFlag[processId] = true;
          return overSizeFile.push(field);
        } else {
          return files[field] = file;
        }
      }
    }).on("end", function() {
      var err, file, item, message, postitem_temp, user, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i, _j, _len, _len1,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (!abortedFlag[processId]) {
        abortedFlag[processId] = void 0;
        user = null;
        err = null;
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "service.coffee"
          });
          User.findOne({
            _id: req.session.userId
          }, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                err = arguments[0];
                return user = arguments[1];
              };
            })(),
            lineno: 957
          }));
          __iced_deferrals._fulfill();
        })(function() {
          if (!err) fields.username = user.username;
          item = {
            "fields": fields,
            "files": files
          };
          item.processId = processId;
          postitem_temp = new PostItem();
          item._id = postitem_temp._id;
          postingJob.publish(JSON.stringify(item), function(err, data, id) {
            return logger.log("info", " (Posting module) Add process id " + processId + " to Posting system");
          }, false, item.processId);
          return __iced_k(res.send(generateResponse("success", "add the post item to process successfully", null, null)));
        });
      } else {
        for (_i = 0, _len = beginfiles.length; _i < _len; _i++) {
          file = beginfiles[_i];
          fs.unlink(file.path);
        }
        abortedFlag[processId] = void 0;
        if (overSizeFile.length > 0) {
          message = "";
          for (_j = 0, _len1 = overSizeFile.length; _j < _len1; _j++) {
            file = overSizeFile[_j];
            message += file + ",";
          }
          logger.log("info", " (Posting module) The posting id : " + processId + " is aborted because oversize file");
          res.send(generateResponse("oversize", message, null, null));
        } else {
          logger.log("info", " (Posting module) The posting id : " + processId + " is aborted by user");
          res.send(generateResponse("abort", "The posting is aborted by user", null, null));
        }
        return __iced_k();
      }
    });
    return form.parse(req);
  };

  exports.mailer = new Mailer();

  exports.interpretError = interpretError;

  exports.generateResponse = generateResponse;

  exports.logger = logger;

  exports.getCategories = getCategories;

  exports.getCategoriesWithTotal = getCategoriesWithTotal;

  exports.authFromLoginToken = authFromLoginToken;

  exports.loadUser = loadUser;

  exports.loadUserAjax = loadUserAjax;

  exports.db = db;

  exports.User = User;

  exports.PostItem = PostItem;

  exports.Photo = Photo;

  exports.WishList = WishList;

  exports.LoginToken = LoginToken;

  exports.RatingComment = RatingComment;

  exports.RatingCommentTopic = RatingCommentTopic;

  exports.CityInfo = CityInfo;

  exports.RegionInfo = RegionInfo;

  exports.LocationInfo = LocationInfo;

  exports.CountryInfo = CountryInfo;

  exports.UniqueLocation = UniqueLocation;

  exports.capitalizeFirstLetters = capitalizeFirstLetters;

  exports.transformToLocationString = transformToLocationString;

  exports.mkdirs = mkdirs;

  exports.trim = trim;

  exports.uniqueId = uniqueId;

  exports.getUserPostingTotal = getUserPostingTotal;

  exports.getAllValidEmailDomainNames = getAllValidEmailDomainNames;

  exports.getAllDistinctLocationString = getAllDistinctLocationString;

  exports.getCities = getCities;

  exports.getCitiesByZipcode = getCitiesByZipcode;

  exports.getCountries = getCountries;

  exports.isMobilePhone = isMobilePhone;

  exports.updateUniqueLocation = updateUniqueLocation;

  exports.addPostingItem = addPostingItem;

  exports.deletePhoto = deletePhoto;

  exports.deleteVoice = deleteVoice;

  exports.deleteVideo = deleteVideo;

  exports.saveUploadData = saveUploadData;

}).call(this);
