// Generated by IcedCoffeeScript 1.3.3b
(function() {
  var crypto, dateFormat, defineModels, kybos, random, toLower, urlShortener, validatePresenceOf;

  urlShortener = require("../util/urlshortener");

  kybos = require("../util/Kybos");

  crypto = require("crypto");

  dateFormat = require("dateformat");

  random = kybos.Kybos();

  toLower = function(v, next) {
    if (v) v.toLowerCase();
    return next();
  };

  validatePresenceOf = function(value) {
    return value && value.length;
  };

  defineModels = function(mongoose, next) {
    var CityInfo, CountryInfo, EmailType, Group, GroupUser, LocationInfo, LoginToken, ObjectId, Photo, PostItem, RatingComment, RatingCommentTopic, RegionInfo, Role, RoleGroup, RoleUser, Schema, ShortKeyPostItemMapping, UniqueLocation, UrlType, User, WishList, ZipInfo, mongooseTypes;
    User = void 0;
    Schema = mongoose.Schema;
    ObjectId = Schema.ObjectId;
    mongooseTypes = require("mongoose-types");
    mongooseTypes.loadTypes(mongoose);
    EmailType = mongoose.SchemaTypes.Email;
    UrlType = mongoose.SchemaTypes.Url;
    this.userStatuses = ["active", "inactive"];
    this.postitemStatuses = ["draft", "saved", "published", "wishlist", "expired"];
    this.smsOptions = ["none", "paid", "ads-support"];
    this.categories = ["Appliances", "Antiques", "Barter", "Bycycles", "Boats", "Computer", "Free", "Furniture", "Others", "Jewelry", "Sporting Goods", "Event Tickets", "Tools", "Arts & Crafts", "Auto Parts", "Beauty & Health", "Cars & Trucks", "CDs/DVD/VHS", "Cell Phones", "Music Instruments", "Garage Sale", "Household", "Motorcycles", "Photo & Video", "Foreign Goods", "Toys & Games", "Video Games", "Baby & Kids", "Farm & Garden", "Books", "Collectibles", "Electronics", "Materials & Supplies", "Clothes & Accessories"];
    Photo = new Schema({
      image: {
        type: String,
        required: true
      },
      imageThumbnail: {
        type: UrlType,
        required: false
      },
      createdDate: {
        type: Date,
        "default": Date.now,
        required: true
      },
      title: {
        type: String,
        "default": "",
        required: false
      },
      isPhotoProcessing: {
        type: Boolean,
        "default": false,
        required: false
      }
    });
    PostItem = new Schema({
      title: {
        type: String,
        "default": "",
        required: true
      },
      username: {
        type: String,
        "default": "",
        required: true
      },
      itemDescription: {
        type: String,
        "default": "",
        required: true
      },
      price: {
        type: Number,
        "default": 0.00,
        required: true
      },
      category: {
        type: String,
        "default": "others",
        "enum": this.categories,
        required: true
      },
      status: {
        type: String,
        "default": "draft",
        "enum": this.postitemStatuses,
        required: true
      },
      createdDate: {
        type: Date,
        "default": Date.now,
        required: true
      },
      email: {
        type: EmailType,
        "default": "",
        required: true
      },
      showEmail: {
        type: Boolean,
        "default": false,
        required: false
      },
      exchangeOptions: [String],
      photos: [Photo],
      location: {
        type: [Number],
        index: "2d",
        required: false
      },
      address: {
        country: {
          type: String,
          "default": "",
          required: true
        },
        state: {
          type: String,
          "default": "",
          required: true
        },
        city: {
          type: String,
          "default": "",
          required: true
        },
        neighborhood: {
          type: String,
          "default": "",
          required: false
        }
      },
      video: {
        type: UrlType,
        "default": "",
        required: false
      },
      isVideoProcessing: {
        type: Boolean,
        "default": false,
        required: false
      },
      voice: {
        type: UrlType,
        "default": "",
        required: false
      },
      isVoiceProcessing: {
        type: Boolean,
        "default": false,
        required: false
      },
      numberOfPhotos: {
        type: Number,
        "default": 0,
        required: false
      },
      shortKey: {
        type: String,
        "default": "",
        required: false,
        index: {
          unique: true,
          dropDups: true
        },
        safe: true
      },
      userRating: {
        type: String,
        "default": "0",
        required: false
      },
      sms: {
        type: Number,
        "default": 0,
        required: false
      },
      smsOption: {
        type: String,
        "default": "none",
        "enum": this.smsOptions,
        required: false
      }
    });
    PostItem.pre("save", function(next) {
      this.shortKey = urlShortener.encode(random.uint32());
      return next();
    });
    PostItem.method("publish", function() {
      this.status = "published";
      return this.save();
    });
    PostItem.method("activate", function() {
      this.status = "published";
      return this.save();
    });
    PostItem.method("deActivate", function() {
      this.status = "expired";
      return this.save();
    });
    PostItem.method("expire", function() {
      this.status = "expired";
      return this.save();
    });
    PostItem.method("delete", function() {
      this.status = "deleted";
      return this.save();
    });
    User = new Schema({
      username: {
        type: String,
        "default": "",
        required: true,
        index: {
          unique: true,
          dropDups: true
        },
        safe: true
      },
      email: {
        type: EmailType,
        "default": "",
        required: true,
        index: {
          unique: true,
          dropDups: true
        },
        safe: true
      },
      status: {
        type: String,
        "default": "inactive",
        "enum": this.userStatuses,
        required: true
      },
      hashedPassword: {
        type: String,
        "default": "",
        required: true
      },
      salt: {
        type: String,
        "default": "",
        required: true
      },
      role: {
        type: String,
        "default": "",
        required: true
      },
      createdAt: {
        type: Date,
        "default": Date.now,
        required: true
      },
      rating: {
        type: Number,
        "default": "0",
        required: false
      },
      location: {
        type: [Number],
        index: "2d",
        required: false
      },
      address: {
        country: {
          type: String,
          "default": "",
          required: true
        },
        state: {
          type: String,
          "default": "",
          required: true
        },
        city: {
          type: String,
          "default": "",
          required: true
        },
        neighborhood: {
          type: String,
          "default": "",
          required: false
        }
      },
      sms: {
        type: Number,
        "default": 0,
        required: false
      },
      smsOption: {
        type: String,
        "default": "none",
        "enum": this.smsOptions,
        required: false
      },
      paymentToken: {
        type: String,
        "default": "",
        required: false
      }
    });
    User.virtual("id").get(function() {
      return this._id.toHexString();
    });
    User.virtual("nickname").get(function() {
      return this.username;
    });
    User.virtual("password").set(function(password) {
      this._password = password;
      this.salt = this.makeSalt();
      return this.hashedPassword = this.encryptPassword(password);
    }).get(function() {
      return this._password;
    });
    User.method("authenticate", function(plainText) {
      return this.encryptPassword(plainText) === this.hashedPassword;
    });
    User.method("makeSalt", function() {
      return Math.round(new Date().valueOf() * Math.random()) + "";
    });
    User.method("encryptPassword", function(password) {
      return crypto.createHmac("sha1", this.salt).update(password).digest("hex");
    });
    User.pre("save", function(next) {
      if (!validatePresenceOf(this.hashedPassword)) {
        return next(new Error("Invalid password"));
      } else {
        return next();
      }
    });
    User.method("activate", function() {
      this.status = "active";
      return this.save();
    });
    User.method("deActivate", function() {
      this.status = "inactive";
      return this.save();
    });
    User.method("hasRoles", function(roles, next) {
      var Group, Role, rk, tasks, userId, _fn, _i, _len;
      Role = mongoose.model("Role");
      Group = mongoose.model("Group");
      tasks = [];
      userId = this._id;
      _fn = function(rk) {
        return tasks.push(function(cb) {
          return Role.findOne({
            name: rk
          }, function(err, role) {
            if (err || !role) return cb(null, 0);
            if (role.hasUser(userId)) {
              return cb(null, 1);
            } else if (role.groups.length > 0) {
              return async.forEach(role.groups, function(grp, cbb) {
                return Group.findOne({
                  _id: grp.groupId
                }, function(e, group) {
                  if (group && group.hasUser(userId)) {
                    return cbb();
                  } else {
                    return cbb(0);
                  }
                });
              }, function(e, r) {
                if (e) {
                  return cb(null, 0);
                } else {
                  return cb(null, 1);
                }
              });
            } else {
              return cb(null, 0);
            }
          });
        });
      };
      for (_i = 0, _len = roles.length; _i < _len; _i++) {
        rk = roles[_i];
        _fn(rk);
      }
      return async.series(tasks, function(err, results) {
        var r, tot, _j, _len1;
        tot = 0;
        for (_j = 0, _len1 = results.length; _j < _len1; _j++) {
          r = results[_j];
          tot += r;
        }
        return next(tot);
      });
    });
    RatingCommentTopic = new Schema({
      createdAt: {
        type: Date,
        "default": Date.now,
        required: true
      },
      topic: {
        type: String,
        "default": "",
        required: true
      },
      comment: [RatingComment],
      username: {
        type: String,
        "default": "",
        required: true
      }
    });
    RatingComment = new Schema({
      createdAt: {
        type: Date,
        "default": Date.now,
        required: true
      },
      rater: {
        type: String,
        "default": "",
        required: true
      },
      comment: {
        type: String,
        "default": "",
        required: true
      },
      reply: {
        type: String,
        "default": "",
        required: false
      },
      username: {
        type: String,
        "default": "",
        required: true
      }
    });
    WishList = new Schema({
      postitem: [PostItem],
      createdAt: {
        type: Date,
        "default": Date.now,
        required: true
      },
      username: {
        type: String,
        "default": "",
        required: true
      }
    });
    /*
    	  Model: GroupUser
    */

    GroupUser = new Schema({
      userId: ObjectId,
      username: {
        type: String,
        "default": "",
        required: true
      },
      name: {
        first: {
          type: String,
          "default": "",
          required: true
        },
        last: {
          type: String,
          "default": "",
          required: true
        },
        full: {
          type: String,
          "default": "",
          required: false
        }
      }
    });
    Group = new Schema({
      username: {
        type: String,
        validate: [validatePresenceOf, "name is required"],
        index: {
          unique: true
        }
      },
      users: [GroupUser]
    });
    Group.method("hasUser", function(userId) {
      var user, _i, _len, _ref;
      _ref = this.users;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        user = _ref[_i];
        if (user.userId.toString() === userId.toString()) return true;
      }
      return false;
    });
    RoleGroup = new Schema({
      groupId: ObjectId,
      name: {
        type: String,
        "default": "",
        required: true
      }
    });
    RoleUser = new Schema({
      userId: ObjectId,
      username: {
        type: String,
        "default": "",
        required: true
      },
      name: {
        first: {
          type: String,
          "default": "",
          required: true
        },
        last: {
          type: String,
          "default": "",
          required: true
        },
        full: {
          type: String,
          "default": "",
          required: false
        }
      }
    });
    Role = new Schema({
      name: {
        type: String,
        validate: [validatePresenceOf, "name is required"],
        index: {
          unique: true
        },
        set: toLower
      },
      groups: [RoleGroup],
      users: [RoleUser]
    });
    Role.method("hasGroup", function(groupId) {
      var grp, _i, _len, _ref;
      _ref = this.groups;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        grp = _ref[_i];
        if (grp.groupId.toString() === groupId.toString()) return true;
      }
      return false;
    });
    Role.method("hasUser", function(userId) {
      var user, _i, _len, _ref;
      _ref = this.users;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        user = _ref[_i];
        if (user.userId.toString() === userId.toString()) return true;
      }
      return false;
    });
    /*
    	  # Model: LoginToken
    	  # Used for session persistence.
    */

    LoginToken = new Schema({
      username: {
        type: String,
        index: true
      },
      series: {
        type: String,
        index: true
      },
      token: {
        type: String,
        index: true
      },
      rememberme: {
        type: Boolean,
        "default": false
      },
      location: {
        type: [Number],
        required: false
      },
      address: {
        country: {
          type: String,
          "default": "",
          required: true
        },
        state: {
          type: String,
          "default": "",
          required: true
        },
        city: {
          type: String,
          "default": "",
          required: true
        },
        neighborhood: {
          type: String,
          "default": "",
          required: false
        }
      }
    });
    LoginToken.method("randomToken", function() {
      return Math.round((new Date().valueOf() * Math.random()) + "");
    });
    LoginToken.pre("save", function(next) {
      this.token = this.randomToken();
      if (this.isNew) this.series = this.randomToken();
      return next();
    });
    LoginToken.virtual("id").get(function() {
      return this._id.toHexString();
    });
    LoginToken.virtual("latitude").get(function() {
      var _ref, _ref1;
      return typeof this !== "undefined" && this !== null ? (_ref = this.location) != null ? (_ref1 = _ref["0"]) != null ? _ref1.latitude : void 0 : void 0 : void 0;
    });
    LoginToken.virtual("longitude").get(function() {
      var _ref, _ref1;
      return typeof this !== "undefined" && this !== null ? (_ref = this.location) != null ? (_ref1 = _ref["0"]) != null ? _ref1.longitude : void 0 : void 0 : void 0;
    });
    LoginToken.virtual("cookieValue").get(function() {
      return JSON.stringify({
        username: this.username,
        token: this.token,
        series: this.series
      });
    });
    ShortKeyPostItemMapping = new Schema({
      shortkey: {
        type: Number,
        required: true,
        index: true
      },
      postitemid: {
        type: String,
        required: true,
        index: true
      }
    });
    CityInfo = new Schema({
      CityId: {
        type: Number,
        required: true
      },
      CountryID: {
        type: Number,
        required: true
      },
      RegionID: {
        type: Number,
        required: true
      },
      City: {
        type: String,
        required: true
      },
      Latitude: {
        type: Number,
        required: true
      },
      Longitude: {
        type: Number,
        required: true
      },
      TimeZone: {
        type: String,
        required: true
      },
      DmaId: {
        type: Number,
        required: true
      },
      Code: {
        type: String,
        required: true
      }
    });
    RegionInfo = new Schema({
      CountryId: {
        type: Number,
        required: true
      },
      RegionId: {
        type: Number,
        required: true
      },
      Region: {
        type: String,
        required: true
      },
      Code: {
        type: String,
        required: true
      },
      ADM1Code: {
        type: String,
        required: true
      }
    });
    CountryInfo = new Schema({
      CountryId: {
        type: Number,
        required: true
      },
      Country: {
        type: String,
        required: true
      },
      FIPS104: {
        type: String,
        required: true
      },
      ISO2: {
        type: String,
        required: true
      },
      ISO3: {
        type: String,
        required: true
      },
      ISON: {
        type: String,
        required: true
      },
      Internet: {
        type: String,
        required: true
      }
    });
    ZipInfo = new Schema({
      Zipcode: {
        type: String,
        required: true
      },
      ZipCodeType: {
        type: String,
        required: true
      },
      City: {
        type: String,
        required: true
      },
      Lat: {
        type: Number,
        required: true
      },
      Long: {
        type: Number,
        required: true
      },
      Location: {
        type: String,
        required: true
      }
    });
    LocationInfo = new Schema({
      cityId: {
        type: String,
        required: false
      },
      ISO2: {
        type: String,
        required: false
      },
      country: {
        type: String,
        required: false
      },
      region: {
        type: String,
        required: false
      },
      city: {
        type: String,
        required: false
      },
      postalCode: {
        type: String,
        required: false
      },
      latitude: {
        type: Number,
        required: false
      },
      longitude: {
        type: Number,
        required: false
      }
    });
    UniqueLocation = new Schema({
      _id: {
        type: String,
        required: true
      },
      value: {
        type: String,
        required: true
      }
    });
    mongoose.model("PostItem", PostItem);
    mongoose.model("Photo", Photo);
    mongoose.model("WishList", WishList);
    mongoose.model("User", User);
    mongoose.model("Group", Group);
    mongoose.model("Role", Role);
    mongoose.model("GroupUser", GroupUser);
    mongoose.model("RoleGroup", RoleGroup);
    mongoose.model("RoleUser", RoleUser);
    mongoose.model("LoginToken", LoginToken);
    mongoose.model("ShortKeyPostItemMapping", ShortKeyPostItemMapping);
    mongoose.model("RatingComment", RatingComment);
    mongoose.model("RatingCommentTopic", RatingCommentTopic);
    mongoose.model("CityInfo", CityInfo);
    mongoose.model("RegionInfo", RegionInfo);
    mongoose.model("CountryInfo", CountryInfo);
    mongoose.model("ZipInfo", ZipInfo);
    mongoose.model("LocationInfo", LocationInfo);
    mongoose.model("UniqueLocation", UniqueLocation);
    return next();
  };

  exports.defineModels = defineModels;

}).call(this);
