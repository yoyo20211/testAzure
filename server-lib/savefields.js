// Generated by IcedCoffeeScript 1.3.3b
(function() {
  var PostItemModel, Settings, Thoonk, checkJob, db, fieldsJob, logger, models, mongoose, path, saveDB, saveProcess, service, settings, thoonk, util;

  Settings = require("settings");

  path = require("path");

  service = require("../util/service");

  util = require("util");

  mongoose = require("mongoose");

  models = require("../models/models");

  logger = service.logger;

  PostItemModel = service.PostItem;

  db = null;

  Thoonk = require("thoonk").Thoonk;

  thoonk = new Thoonk("localhost", "6379", 1);

  fieldsJob = thoonk.job("fieldsJob");

  checkJob = thoonk.job("checkJob");

  settings = new Settings(path.join(__dirname, "../config/environment.js")).getEnvironment();

  saveDB = function() {
    return fieldsJob.get(0, function(err, data, gid) {
      var item;
      item = JSON.parse(data);
      return saveProcess(item, function(err) {
        var message;
        if (err) {
          message = {};
          message.id = item.processId;
          message.type = "fields";
          message.result = "error";
          message.data = err;
          checkJob.publish(JSON.stringify(message), function(err, data, id) {
            return logger.log("info", " (Posting module) sent message id " + gid + " to the checking system");
          }, false, gid);
          logger.log("error", " (Posting module) cannot save a posting data id " + item.processId + " to database : \n " + err);
          return fieldsJob.stall(gid, function(err, fid) {
            return process.nextTick(saveDB);
          }, false, "pass");
        } else {
          message = {};
          message.id = item.processId;
          message.type = "fields";
          message.result = "pass";
          message.data = item._id;
          checkJob.publish(JSON.stringify(message), function(err, data, id) {
            return logger.log("info", " (Posting module) sent message id " + gid + " to the checking system");
          }, false, gid);
          logger.log("info", " (Posting module) save a posting data id " + item.processId + " to database successfully");
          return fieldsJob.finish(gid, function(err, fid) {
            return process.nextTick(saveDB);
          }, false, "pass");
        }
      });
    });
  };

  fieldsJob.once("ready", function() {
    return saveDB();
  });

  saveProcess = function(item, callback) {
    var fields, i, location, postinfo, _i, _j;
    logger.log("info", " (Posting module) start insert posting data id " + item.processId + " to database");
    fields = item.fields;
    fields.exchangeOptions = fields["exchange-options"];
    if (fields["exchange-options-other-text"] !== "") {
      fields.exchangeOptions.push(fields["exchange-options-other-text"]);
    }
    fields.location = [fields.longitude, fields.latitude];
    location = fields["city"].split(",");
    fields.address = {};
    if (location.length === 3) {
      fields.address.city = location[0];
      fields.address.state = location[1];
      fields.address.country = location[2];
      fields.address.neighborhood = fields["neighborhood"];
    } else {
      fields.address.city = location[0];
      fields.address.state = location[0];
      fields.address.country = location[1];
      fields.address.neighborhood = fields["neighborhood"];
    }
    delete fields["neighborhood"];
    delete fields["longitude"];
    delete fields["latitude"];
    delete fields["processId"];
    delete fields["exchange-options-other-text"];
    delete fields["exchange-options"];
    for (i = _i = 0; _i <= 4; i = ++_i) {
      delete fields["photoTitle" + i];
    }
    for (i = _j = 0; _j <= 4; i = ++_j) {
      delete fields["photoFile" + i];
    }
    delete fields.videoFile;
    delete fields.voiceFile;
    delete fields.neighborhood;
    delete fields.city;
    delete fields.country;
    delete fields.user;
    postinfo = new PostItemModel(fields);
    postinfo.set("status", "draft");
    postinfo.set("video", "http://www.melisting.com");
    postinfo.set("voice", "http://www.melisting.com");
    postinfo.set("_id", item._id);
    return postinfo.save(function(err) {
      var errorText, iserror;
      if (err) {
        iserror = true;
        errorText = service.interpretError(err);
        return callback(err);
      } else {
        return callback(null);
      }
    });
  };

}).call(this);
