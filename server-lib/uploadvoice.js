// Generated by IcedCoffeeScript 1.2.0s
(function() {
  var PostItemModel, Settings, Thoonk, check, checkJob, db, deleteVoice, fs, logger, mailer, models, mongoose, path, run, service, setExtension, settings, thoonk, upload, util, voiceJob;

  Settings = require('settings');

  fs = require('fs');

  path = require('path');

  service = require('../util/service');

  Thoonk = require("thoonk").Thoonk;

  thoonk = new Thoonk("localhost", "6379", 1);

  util = require("util");

  voiceJob = thoonk.job('voiceJob');

  checkJob = thoonk.job('checkJob');

  mongoose = require('mongoose');

  models = require('../models/models');

  logger = service.logger;

  mailer = service.mailer;

  PostItemModel = service.PostItem;

  db = null;

  settings = new Settings(path.join(__dirname, '../config/environment.js')).getEnvironment();

  run = function() {
    return voiceJob.get(0, function(err, data, gid) {
      var item;
      item = JSON.parse(data);
      if (item.processType === "delete") {
        logger.log('info', ' (Posting module) process delete voice id ' + gid);
        return deleteVoice(item.processId, item._id, function(err, link) {
          var message;
          if (err) {
            message = {};
            message.id = item.processId;
            message.type = 'voice';
            message.result = 'error';
            message.data = err;
            checkJob.publish(JSON.stringify(message), function(err, data, id) {
              return logger.log('info', ' (Posting module) sent message id ' + gid + ' to the checking system');
            }, false, gid);
            return voiceJob.stall(gid, function(err, fid) {
              return process.nextTick(run);
            }, false, 'error');
          } else {
            message = {};
            message.id = item.processId;
            message.type = 'voice';
            message.result = 'pass';
            message.data = link;
            checkJob.publish(JSON.stringify(message), function(err, data, id) {
              return logger.log('info', ' (Posting module) sent message id ' + gid + ' to the checking system');
            }, false, gid);
            return voiceJob.finish(gid, function(err, fid) {
              return process.nextTick(run);
            }, false, 'pass');
          }
        });
      } else {
        return upload(item.files.voiceFile, item.processId, item._id, function(err, link) {
          var message;
          if (err) {
            message = {};
            message.id = item.processId;
            message.type = 'voice';
            message.result = 'error';
            message.data = err;
            checkJob.publish(JSON.stringify(message), function(err, data, id) {
              return logger.log('info', ' (Posting module) sent message id ' + gid + ' to the checking system');
            }, false, gid);
            return voiceJob.stall(gid, function(err, fid) {
              return process.nextTick(run);
            }, false, 'error');
          } else {
            message = {};
            message.id = item.processId;
            message.type = 'voice';
            message.result = 'pass';
            message.data = link;
            checkJob.publish(JSON.stringify(message), function(err, data, id) {
              return logger.log('info', ' (Posting module) sent message id ' + gid + ' to the checking system');
            }, false, gid);
            return voiceJob.finish(gid, function(err, fid) {
              return process.nextTick(run);
            }, false, 'pass');
          }
        });
      }
    });
  };

  voiceJob.once("ready", function() {
    return run();
  });

  deleteVoice = function(processId, itemId, callback) {
    return PostItemModel.findOne({
      _id: itemId
    }, function(err, item) {
      var voicePath;
      if (err) {
        return callback(err, void 0);
      } else {
        voicePath = item.voice.split('/');
        voicePath = voicePath[voicePath.length - 1];
        voicePath = './public/data/voice/' + voicePath.substring(0, voicePath.length - 1);
        return fs.unlink(voicePath, function(err) {
          if (err) {
            return callback(err, void 0);
          } else {
            return callback(void 0, 'http://www.melisting.com');
          }
        });
      }
    });
  };

  upload = function(incommingFile, processId, objectId, callback) {
    var ext, new_file;
    if (check(incommingFile['mime'])) {
      new_file = Math.round(new Date().getTime());
      ext = setExtension(incommingFile['mime']);
      new_file += ext;
      return fs.rename(incommingFile.path, './public/data/voice/' + new_file, function(err) {
        if (err) {
          return callback(err, void 0);
        } else {
          return callback(void 0, settings.mainURL + '/data/voice/' + new_file);
        }
      });
    } else {
      return callback('This file type of ' + processId + ' is not a voice file', void 0);
    }
  };

  check = function(mime) {
    if (mime === 'audio/x-wav' || mime === 'audio/mp3' || mime === 'audio/x-ms-wma' || mime === 'audio/mpeg' || mime === 'audio/mpeg3' || mime === 'audio/x-mpeg-3') {
      return true;
    } else {
      return false;
    }
  };

  setExtension = function(content_type) {
    var ext;
    switch (content_type) {
      case 'audio/x-wav':
        ext = '.wav';
        break;
      case 'audio/x-ms-wma':
        ext = '.wma';
        break;
      case 'audio/mpeg':
        ext = '.mp3';
        break;
      case 'audio/mpeg3':
        ext = '.mp3';
        break;
      case 'audio/x-mpeg-3':
        ext = '.mp3';
        break;
      case 'audio/mp3':
        ext = '.mp3';
    }
    return ext;
  };

}).call(this);
