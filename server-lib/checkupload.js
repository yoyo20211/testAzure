// Generated by IcedCoffeeScript 1.3.3b
(function() {
  var PhotoModel, PostItemModel, Settings, Thoonk, check, checkJob, checkList, db, genMessage, iced, init, io, logger, mailer, models, mongoose, path, run, service, settings, socketIOMainChannel, socketIOURL, thoonk, util, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Settings = require('settings');

  path = require('path');

  service = require('../util/service');

  Thoonk = require("thoonk").Thoonk;

  thoonk = new Thoonk("localhost", "6379", 1);

  checkJob = thoonk.job('checkJob');

  util = require("util");

  mongoose = require('mongoose');

  models = require('../models/models');

  logger = service.logger;

  mailer = service.mailer;

  PostItemModel = service.PostItem;

  PhotoModel = service.Photo;

  socketIOMainChannel = service.socketIOMainChannel;

  db = null;

  checkList = [];

  settings = new Settings(path.join(__dirname, '../config/environment.js')).getEnvironment();

  socketIOURL = settings.socketIOURL;

  io = require('socket.io-client');

  run = function() {
    return checkJob.get(0, function(err, data, gid) {
      var message;
      message = JSON.parse(data);
      if (message.type === 'init') {
        init(message);
      } else {
        check(message);
      }
      return checkJob.finish(gid, function(err, fid) {
        return process.nextTick(run);
      }, false, 'done');
    });
  };

  checkJob.once("ready", function() {
    return run();
  });

  init = function(message) {
    return checkList[message.id] = message.data;
  };

  check = function(message) {
    var data, err, error, i, list, postitem, ready, socket, ___iced_passed_deferral, __iced_deferrals, __iced_k, _i,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    list = checkList[message.id];
    list[message.type].result = message.result;
    list[message.type].data = message.data;
    list[message.type].processType = message.processType;
    ready = true;
    if (list.fields.has) if (list.fields.result === void 0) ready = false;
    if (list.voice.has) if (list.voice.result === void 0) ready = false;
    if (list.video.has) if (list.video.result === void 0) ready = false;
    for (i = _i = 0; _i <= 4; i = ++_i) {
      if (list['photo' + i].has) {
        if (list['photo' + i].result === void 0) ready = false;
      }
    }
    if (ready) {
      error = void 0;
      (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "checkupload.coffee",
          funcname: "check"
        });
        genMessage(list, __iced_deferrals.defer({
          assign_fn: (function() {
            return function() {
              return error = arguments[0];
            };
          })(),
          lineno: 73
        }));
        __iced_deferrals._fulfill();
      })(function() {
        (function(__iced_k) {
          if (error === void 0) {
            err = void 0;
            postitem = void 0;
            (function(__iced_k) {
              __iced_deferrals = new iced.Deferrals(__iced_k, {
                parent: ___iced_passed_deferral,
                filename: "checkupload.coffee",
                funcname: "check"
              });
              PostItemModel.findById(list._id, __iced_deferrals.defer({
                assign_fn: (function() {
                  return function() {
                    err = arguments[0];
                    return postitem = arguments[1];
                  };
                })(),
                lineno: 77
              }));
              __iced_deferrals._fulfill();
            })(function() {
              (function(__iced_k) {
                if (postitem) {
                  postitem.set('status', 'published');
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "checkupload.coffee",
                      funcname: "check"
                    });
                    postitem.save(__iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return err = arguments[0];
                        };
                      })(),
                      lineno: 80
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    return __iced_k(err ? (data = {
                      "title": list.title,
                      "result": 'publication of the posting item ------>' + 'Error' + '\n'
                    }, mailer.sendWithTemplate(list.email, settings.mainEmailAccount, 'MeListing Item Posting is failure', 'posting-result-email-template.txt', data), logger.log('info', ' (Posting module) posting process id ' + list.processId + ' can not to be published :\n' + err)) : (logger.log('info', ' (Posting module) posting process id ' + list.processId + ' is published'), socket = io.connect(socketIOURL + "/" + socketIOMainChannel, {
                      "force new connection": true
                    }), socket.emit("postitem:published", postitem), socket.emit("disconnect", {}), socket.disconnect()));
                  });
                } else {
                  data = {
                    "title": list.title,
                    "result": 'publication of the posting item ------>' + 'Error' + '\n'
                  };
                  mailer.sendWithTemplate(list.email, settings.mainEmailAccount, 'MeListing Item Posting is failure', 'posting-result-email-template.txt', data);
                  return __iced_k(logger.log('info', ' (Posting module) posting process id ' + list.processId + ' can not to be published :\n' + err));
                }
              })(__iced_k);
            });
          } else {
            mailer.sendWithTemplate(list.email, settings.mainEmailAccount, 'MeListing Item Posting is failure', 'posting-result-email-template.txt', error);
            return __iced_k(logger.log('info', ' (Posting module) posting process id ' + list.processId + ' can not to be published because there is some error :'));
          }
        })(__iced_k);
      });
    } else {
      return __iced_k();
    }
  };

  genMessage = function(list, callback) {
    var data, err, i, message, photo, photoDoc, photoField, photoStack, postitem, ___iced_passed_deferral, __iced_deferrals, __iced_k,
      _this = this;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    message = '';
    (function(__iced_k) {
      var _i, _results, _while;
      i = 0;
      _results = [];
      _while = function(__iced_k) {
        var _break, _continue, _next;
        _break = function() {
          return __iced_k(_results);
        };
        _continue = function() {
          ++i;
          return _while(__iced_k);
        };
        _next = function(__iced_next_arg) {
          _results.push(__iced_next_arg);
          return _continue();
        };
        if (!(i <= 4)) {
          return _break();
        } else {
          (function(__iced_k) {
            if (list['photo' + i].has) {
              (function(__iced_k) {
                if (list['photo' + i].result === 'pass') {
                  (function(__iced_k) {
                    if (list['photo' + i].processType !== 'delete') {
                      photoField = {
                        'image': list['photo' + i].data,
                        'createdDate': Date.now()
                      };
                      photoDoc = new PhotoModel(photoField);
                      err = void 0;
                      postitem = void 0;
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "checkupload.coffee",
                          funcname: "genMessage"
                        });
                        PostItemModel.findById(list._id, __iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              err = arguments[0];
                              return postitem = arguments[1];
                            };
                          })(),
                          lineno: 117
                        }));
                        __iced_deferrals._fulfill();
                      })(function() {
                        (function(__iced_k) {
                          if (postitem) {
                            photoDoc.set('isPhotoProcessing', false);
                            postitem.photos.push(photoDoc);
                            postitem.set('numberOfPhotos', postitem.photos.length);
                            (function(__iced_k) {
                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                parent: ___iced_passed_deferral,
                                filename: "checkupload.coffee",
                                funcname: "genMessage"
                              });
                              postitem.save(__iced_deferrals.defer({
                                assign_fn: (function() {
                                  return function() {
                                    return err = arguments[0];
                                  };
                                })(),
                                lineno: 124
                              }));
                              __iced_deferrals._fulfill();
                            })(function() {
                              return __iced_k(err ? (message += 'Uploading of photo name : ' + list['photo' + i].name + ' ------>' + 'Error' + '\n', logger.log('error', ' (Posting module) photo' + i + ' process id ' + list.processId + ' error : \n' + err)) : logger.log('info', ' (Posting module) photo' + i + ' process id ' + list.processId + ' is success'));
                            });
                          } else {
                            message += 'Uploading of photo name : ' + list['photo' + i].name + ' ------>' + 'Error' + '\n';
                            return __iced_k(logger.log('error', ' (Posting module) photo' + i + ' process id ' + list.processId + ' error : \n' + err));
                          }
                        })(__iced_k);
                      });
                    } else {
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "checkupload.coffee",
                          funcname: "genMessage"
                        });
                        PostItemModel.findById(list._id, __iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              err = arguments[0];
                              return postitem = arguments[1];
                            };
                          })(),
                          lineno: 134
                        }));
                        __iced_deferrals._fulfill();
                      })(function() {
                        (function(__iced_k) {
                          var _j, _len, _ref;
                          if (postitem) {
                            photoStack = [];
                            _ref = postitem.photos;
                            for (_j = 0, _len = _ref.length; _j < _len; _j++) {
                              photo = _ref[_j];
                              if (photo._id.toString() !== list['photo' + i].data) {
                                photo.set('isPhotoProcessing', false);
                                photoStack.push(photo);
                              }
                            }
                            postitem.photos = photoStack;
                            postitem.set('numberOfPhotos', postitem.photos.length);
                            (function(__iced_k) {
                              __iced_deferrals = new iced.Deferrals(__iced_k, {
                                parent: ___iced_passed_deferral,
                                filename: "checkupload.coffee",
                                funcname: "genMessage"
                              });
                              postitem.save(__iced_deferrals.defer({
                                assign_fn: (function() {
                                  return function() {
                                    return err = arguments[0];
                                  };
                                })(),
                                lineno: 146
                              }));
                              __iced_deferrals._fulfill();
                            })(function() {
                              return __iced_k(err ? (message += 'Uploading of photo name : ' + list['photo' + i].name + ' ------>' + 'Error' + '\n', logger.log('error', ' (Posting module) photo' + i + ' process id ' + list.processId + ' error : \n' + err)) : logger.log('info', ' (Posting module) photo' + i + ' process id ' + list.processId + ' is success'));
                            });
                          } else {
                            message += 'Uploading of photo name : ' + list['photo' + i].name + ' ------>' + 'Error' + '\n';
                            return __iced_k(logger.log('error', ' (Posting module) photo' + i + ' process id ' + list.processId + ' error : \n' + err));
                          }
                        })(__iced_k);
                      });
                    }
                  })(__iced_k);
                } else {
                  message += 'Uploading of photo name : ' + list['photo' + i].name + ' ------>' + 'Error' + '\n';
                  return __iced_k(logger.log('error', ' (Posting module) photo' + i + ' process id ' + list.processId + ' error : \n' + util.inspect(list['photo' + i].data)));
                }
              })(__iced_k);
            } else {
              return __iced_k();
            }
          })(_next);
        }
      };
      _while(__iced_k);
    })(function() {
      (function(__iced_k) {
        if (list.video.has) {
          (function(__iced_k) {
            if (list.video.result === 'pass') {
              err = void 0;
              postitem = void 0;
              (function(__iced_k) {
                __iced_deferrals = new iced.Deferrals(__iced_k, {
                  parent: ___iced_passed_deferral,
                  filename: "checkupload.coffee",
                  funcname: "genMessage"
                });
                PostItemModel.findById(list._id, __iced_deferrals.defer({
                  assign_fn: (function() {
                    return function() {
                      err = arguments[0];
                      return postitem = arguments[1];
                    };
                  })(),
                  lineno: 163
                }));
                __iced_deferrals._fulfill();
              })(function() {
                (function(__iced_k) {
                  if (postitem) {
                    postitem.set('video', list.video.data);
                    postitem.set('isVideoProcessing', false);
                    (function(__iced_k) {
                      __iced_deferrals = new iced.Deferrals(__iced_k, {
                        parent: ___iced_passed_deferral,
                        filename: "checkupload.coffee",
                        funcname: "genMessage"
                      });
                      postitem.save(__iced_deferrals.defer({
                        assign_fn: (function() {
                          return function() {
                            return err = arguments[0];
                          };
                        })(),
                        lineno: 167
                      }));
                      __iced_deferrals._fulfill();
                    })(function() {
                      return __iced_k(err ? (message += 'Uploading of video ------>' + 'Error' + '\n', logger.log('error', ' (Posting module) video process id ' + list.processId + ' error : \n' + err)) : logger.log('info', ' (Posting module) video process id ' + list.processId + ' is success'));
                    });
                  } else {
                    message += 'Uploading of video ------>' + 'Error' + '\n';
                    return __iced_k(logger.log('error', ' (Posting module) video process id ' + list.processId + ' error : \n' + err));
                  }
                })(__iced_k);
              });
            } else {
              message += 'Uploading of video ------>' + 'Error' + '\n';
              return __iced_k(logger.log('error', ' (Posting module) video process id ' + list.processId + ' error : \n' + list.video.data));
            }
          })(__iced_k);
        } else {
          return __iced_k();
        }
      })(function() {
        (function(__iced_k) {
          if (list.voice.has) {
            (function(__iced_k) {
              if (list.voice.result === 'pass') {
                err = void 0;
                postitem = void 0;
                (function(__iced_k) {
                  __iced_deferrals = new iced.Deferrals(__iced_k, {
                    parent: ___iced_passed_deferral,
                    filename: "checkupload.coffee",
                    funcname: "genMessage"
                  });
                  PostItemModel.findById(list._id, __iced_deferrals.defer({
                    assign_fn: (function() {
                      return function() {
                        err = arguments[0];
                        return postitem = arguments[1];
                      };
                    })(),
                    lineno: 186
                  }));
                  __iced_deferrals._fulfill();
                })(function() {
                  (function(__iced_k) {
                    if (postitem) {
                      postitem.set('voice', list.voice.data);
                      postitem.set('isVoiceProcessing', false);
                      (function(__iced_k) {
                        __iced_deferrals = new iced.Deferrals(__iced_k, {
                          parent: ___iced_passed_deferral,
                          filename: "checkupload.coffee",
                          funcname: "genMessage"
                        });
                        postitem.save(__iced_deferrals.defer({
                          assign_fn: (function() {
                            return function() {
                              return err = arguments[0];
                            };
                          })(),
                          lineno: 190
                        }));
                        __iced_deferrals._fulfill();
                      })(function() {
                        return __iced_k(err ? (message += 'Uploading of voice ------>' + 'Error' + '\n', logger.log('error', ' (Posting module) voice process id ' + list.processId + ' error : \n' + err)) : logger.log('info', ' (Posting module) voice process id ' + list.processId + ' is success'));
                      });
                    } else {
                      message += 'Uploading of voice ------>' + 'Error' + '\n';
                      return __iced_k(logger.log('error', ' (Posting module) voice process id ' + list.processId + ' error : \n' + err));
                    }
                  })(__iced_k);
                });
              } else {
                message += 'Uploading of voice ------>' + 'Error' + '\n';
                return __iced_k(logger.log('error', ' (Posting module) voice process id ' + list.processId + ' error : \n' + list.voice.data));
              }
            })(__iced_k);
          } else {
            return __iced_k();
          }
        })(function() {
          if (message !== '') {
            data = {
              "title": list.title,
              "result": message
            };
            return callback(data);
          } else {
            return callback(void 0);
          }
        });
      });
    });
  };

}).call(this);
