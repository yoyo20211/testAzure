// Generated by IcedCoffeeScript 1.2.0s
(function() {
  var GoogleClientLogin, PostItemModel, Settings, Thoonk, authentication, check, checkJob, db, deleteVideo, fs, http, logger, mailer, models, mongoose, path, run, service, settings, thoonk, upload, util, videoJob;

  http = require('http');

  GoogleClientLogin = require('googleclientlogin').GoogleClientLogin;

  Settings = require('settings');

  fs = require('fs');

  path = require('path');

  service = require('../util/service');

  Thoonk = require("thoonk").Thoonk;

  thoonk = new Thoonk("localhost", "6379", 1);

  videoJob = thoonk.job('videoJob');

  checkJob = thoonk.job('checkJob');

  util = require("util");

  mongoose = require('mongoose');

  models = require('../models/models');

  logger = service.logger;

  mailer = service.mailer;

  PostItemModel = service.PostItem;

  db = null;

  settings = new Settings(path.join(__dirname, '../config/environment.js')).getEnvironment();

  run = function() {
    return videoJob.get(0, function(err, data, gid) {
      var item;
      item = JSON.parse(data);
      return authentication(item.processId, function(err, authId) {
        if (err) {
          return logger.log('error', ' (Posting module) video upload id ' + item.processId + ' error : \n' + err);
        } else {
          logger.log('info', ' (Posting module) authentication to youtube process id ' + item.processId + ' is success');
          if (item.processType === "delete") {
            logger.log('info', ' (Posting module) process delete video id ' + gid);
            return deleteVideo(authId, item.processId, item._id, function(err, link) {
              var message;
              if (err) {
                message = {};
                message.id = item.processId;
                message.type = 'video';
                message.result = 'error';
                message.data = err;
                checkJob.publish(JSON.stringify(message), function(err, data, id) {
                  return logger.log('info', ' (Posting module) sent message id ' + gid + ' to the checking system');
                }, false, gid);
                return videoJob.stall(gid, function(err, fid) {
                  return process.nextTick(run);
                }, false, 'error');
              } else {
                message = {};
                message.id = item.processId;
                message.type = 'video';
                message.result = 'pass';
                message.data = link;
                checkJob.publish(JSON.stringify(message), function(err, data, id) {
                  return logger.log('info', ' (Posting module) sent message id ' + gid + ' to the checking system');
                }, false, gid);
                return videoJob.finish(gid, function(err, fid) {
                  return process.nextTick(run);
                }, false, 'pass');
              }
            });
          } else {
            return upload(item.files.videoFile, authId, item.processId, item._id, function(err, link) {
              var message;
              if (err) {
                message = {};
                message.id = item.processId;
                message.type = 'video';
                message.result = 'error';
                message.data = err;
                checkJob.publish(JSON.stringify(message), function(err, data, id) {
                  return logger.log('info', ' (Posting module) sent message id ' + gid + ' to the checking system');
                }, false, gid);
                return videoJob.stall(gid, function(err, fid) {
                  return process.nextTick(run);
                }, false, 'error');
              } else {
                message = {};
                message.id = item.processId;
                message.type = 'video';
                message.result = 'pass';
                message.data = link;
                checkJob.publish(JSON.stringify(message), function(err, data, id) {
                  return logger.log('info', ' (Posting module) sent message id ' + gid + ' to the checking system');
                }, false, gid);
                return videoJob.finish(gid, function(err, fid) {
                  return process.nextTick(run);
                }, false, 'pass');
              }
            });
          }
        }
      });
    });
  };

  videoJob.once("ready", function() {
    return run();
  });

  deleteVideo = function(authId, processId, itemId, callback) {
    return PostItemModel.findOne({
      _id: itemId
    }, function(err, item) {
      var options, req, videoId;
      if (err) {
        return callback(err, void 0);
      } else {
        videoId = item.video.split('=');
        videoId = videoId[videoId.length - 1];
        options = {
          host: 'gdata.youtube.com',
          port: 80,
          path: '/feeds/api/users/default/uploads/' + videoId,
          method: 'DELETE',
          headers: {
            'Authorization': 'GoogleLogin auth=' + authId,
            'GData-Version': '2',
            'X-GData-Key': 'key=' + settings.googleDevelopKey,
            'Content-Type': 'application/atom+xml'
          }
        };
        req = http.request(options, function(res) {
          res.setEncoding('utf8');
          return res.on('end', function() {
            return callback(void 0, 'http://www.melisting.com');
          });
        });
        req.on('error', function(err) {
          return callback(err, void 0);
        });
        return req.end();
      }
    });
  };

  upload = function(incommingFile, authId, processId, objectId, callback) {
    var fileContent, filePath, fileReader;
    if (check(incommingFile['mime'])) {
      filePath = incommingFile.path;
      fileReader = fs.createReadStream(filePath, {
        encoding: 'binary'
      });
      fileContent = '';
      fileReader.on('data', function(data) {
        return fileContent += data;
      });
      return fileReader.on('end', function() {
        var boundary, i, options, part, postData, postLength, req, xml, _i, _j, _ref, _ref2;
        xml = '<?xml version="1.0"?>' + '<entry xmlns="http://www.w3.org/2005/Atom" xmlns:media="http://search.yahoo.com/mrss/" xmlns:yt="http://gdata.youtube.com/schemas/2007">' + '   <media:group>' + '       <media:title type="plain">' + incommingFile.filename + '</media:title>' + '       <media:description type="plain">' + incommingFile.filename + '</media:description>' + '       <media:category scheme="http://gdata.youtube.com/schemas/2007/categories.cat">' + 'People' + '</media:category>' + '       <media:keywords>' + 'goods MeListing melisting' + '</media:keywords>' + '   </media:group>' + '</entry>';
        boundary = Math.random();
        postData = [];
        part = '';
        part = "--" + boundary + "\r\nContent-Type: application/atom+xml; charset=UTF-8\r\n\r\n" + xml + "\r\n";
        postData.push(new Buffer(part, "utf8"));
        part = "--" + boundary + "\r\nContent-Type: " + incommingFile.mime + "r\nContent-Transfer-Encoding: binary\r\n\r\n";
        postData.push(new Buffer(part, 'ascii'));
        postData.push(new Buffer(fileContent, 'binary'));
        postData.push(new Buffer("\r\n--" + boundary + "--", 'ascii'));
        postLength = 0;
        for (i = _i = 0, _ref = postData.length - 1; 0 <= _ref ? _i <= _ref : _i >= _ref; i = 0 <= _ref ? ++_i : --_i) {
          postLength += postData[i].length;
        }
        options = {
          host: 'uploads.gdata.youtube.com',
          port: 80,
          path: '/feeds/api/users/default/uploads?alt=json',
          method: 'POST',
          headers: {
            'Authorization': 'GoogleLogin auth=' + authId,
            'GData-Version': '2',
            'X-GData-Key': 'key=' + settings.googleDevelopKey,
            'Slug': 'video.mp4',
            'Content-Type': 'multipart/related; boundary="' + boundary + '"',
            'Content-Length': postLength,
            'Connection': 'close'
          }
        };
        req = http.request(options, function(res) {
          var response;
          res.setEncoding('utf8');
          response = '';
          res.on('data', function(chunk) {
            return response += chunk;
          });
          return res.on('end', function() {
            var err;
            try {
              response = JSON.parse(response);
              fs.unlink(filePath);
              return callback(void 0, response.entry.link[0].href);
            } catch (e) {
              err = "unable to upload the file to youtube \n youtube_response: " + response;
              return callback(err, void 0);
            }
          });
        });
        for (i = _j = 0, _ref2 = postData.length - 1; 0 <= _ref2 ? _j <= _ref2 : _j >= _ref2; i = 0 <= _ref2 ? ++_j : --_j) {
          req.write(postData[i]);
        }
        req.on('error', function(err) {
          return callback(err, void 0);
        });
        return req.end();
      });
    } else {
      return callback('This file type of ' + processId + ' is not a video file');
    }
  };

  check = function(mime) {
    if (mime === 'video/mp4' || mime === 'video/x-msvideo' || mime === 'video/avi' || mime === 'video/msvideo' || mime === 'video/x-msvideo' || mime === 'video/3gpp' || mime === 'video/mpeg' || mime === 'video/quicktime' || mime === 'video/MP2P' || mime === 'video/MP1S' || mime === 'video/x-flv') {
      return true;
    } else {
      return false;
    }
  };

  authentication = function(processId, callback) {
    var googleAuthentication;
    googleAuthentication = new GoogleClientLogin({
      email: settings.youtubeUsername,
      password: settings.youtubePassword,
      service: 'youtube',
      accountType: GoogleClientLogin.accountTypes.google
    });
    googleAuthentication.on(GoogleClientLogin.events.login, function() {
      return callback(void 0, googleAuthentication.getAuthId());
    });
    googleAuthentication.on(GoogleClientLogin.events.error, function(e) {
      return callback(e.message, void 0);
    });
    return googleAuthentication.login();
  };

}).call(this);
