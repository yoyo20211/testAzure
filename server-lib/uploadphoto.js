// Generated by IcedCoffeeScript 1.3.3b
(function() {
  var Alleup, PostItemModel, Settings, Thoonk, alleup, check, checkJob, db, deletePhoto, fs, iced, logger, mailer, models, mongoose, path, photoJob, run, service, settings, thoonk, upload, util, __iced_k, __iced_k_noop;

  iced = require('iced-coffee-script').iced;
  __iced_k = __iced_k_noop = function() {};

  Alleup = require('alleup');

  Settings = require('settings');

  fs = require('fs');

  path = require('path');

  service = require('../util/service');

  Thoonk = require("thoonk").Thoonk;

  thoonk = new Thoonk("localhost", "6379", 1);

  photoJob = thoonk.job('photoJob');

  checkJob = thoonk.job('checkJob');

  util = require("util");

  mongoose = require('mongoose');

  models = require('../models/models');

  logger = service.logger;

  mailer = service.mailer;

  PostItemModel = service.PostItem;

  db = null;

  settings = new Settings(path.join(__dirname, '../config/environment.js')).getEnvironment();

  alleup = new Alleup({
    storage: "dir",
    config_file: "config/photo_upload_config.json"
  });

  run = function() {
    return photoJob.get(0, function(err, data, gid) {
      var error_message, photoData;
      error_message = '';
      photoData = JSON.parse(data);
      if (photoData.processType === "delete") {
        logger.log('info', ' (Posting module) process delete photo id ' + gid);
        return deletePhoto(gid, photoData._id, photoData.photoId, function(err, photoId) {
          var message, temp;
          if (err) {
            message = {};
            temp = gid.split('_');
            message.id = photoData.processId;
            message.type = temp[0] + temp[1];
            message.result = 'error';
            message.processType = 'delete';
            message.data = err;
            checkJob.publish(JSON.stringify(message), function(err, data, id) {
              return logger.log('info', ' (Posting module) sent message id ' + gid + ' to the checking system');
            }, false, gid);
            return photoJob.stall(gid, function(err, fid) {
              return process.nextTick(run);
            }, false, 'error');
          } else {
            message = {};
            temp = gid.split('_');
            message.id = photoData.processId;
            message.type = temp[0] + temp[1];
            message.result = 'pass';
            message.processType = 'delete';
            message.data = photoId;
            checkJob.publish(JSON.stringify(message), function(err, data, id) {
              return logger.log('info', ' (Posting module) sent message id ' + gid + ' to the checking system');
            }, false, gid);
            return photoJob.finish(gid, function(err, fid) {
              return process.nextTick(run);
            }, false, 'pass');
          }
        });
      } else {
        return upload(photoData.photos, gid, photoData._id, function(err, link) {
          var message, temp;
          if (err) {
            message = {};
            temp = gid.split('_');
            message.id = photoData.processId;
            message.type = temp[0] + temp[1];
            message.result = 'error';
            message.data = err;
            checkJob.publish(JSON.stringify(message), function(err, data, id) {
              return logger.log('info', ' (Posting module) sent message id ' + gid + ' to the checking system');
            }, false, gid);
            return photoJob.stall(gid, function(err, fid) {
              return process.nextTick(run);
            }, false, 'error');
          } else {
            message = {};
            temp = gid.split('_');
            message.id = photoData.processId;
            message.type = temp[0] + temp[1];
            message.result = 'pass';
            message.data = link;
            checkJob.publish(JSON.stringify(message), function(err, data, id) {
              return logger.log('info', ' (Posting module) sent message id ' + gid + ' to the checking system');
            }, false, gid);
            return photoJob.finish(gid, function(err, fid) {
              return process.nextTick(run);
            }, false, 'pass');
          }
        });
      }
    });
  };

  photoJob.once("ready", function() {
    return run();
  });

  deletePhoto = function(processId, itemId, photoId, callback) {
    return PostItemModel.findOne({
      _id: itemId
    }, function(err, postitem) {
      var err, photo, photoPath, ___iced_passed_deferral, __iced_deferrals, __iced_k,
        _this = this;
      __iced_k = __iced_k_noop;
      ___iced_passed_deferral = iced.findDeferral(arguments);
      if (err) {
        return __iced_k(callback(err, void 0));
      } else {
        (function(__iced_k) {
          var _i, _len, _ref, _results, _while;
          _ref = postitem.photos;
          _len = _ref.length;
          _i = 0;
          _results = [];
          _while = function(__iced_k) {
            var _break, _continue, _next;
            _break = function() {
              return __iced_k(_results);
            };
            _continue = function() {
              ++_i;
              return _while(__iced_k);
            };
            _next = function(__iced_next_arg) {
              _results.push(__iced_next_arg);
              return _continue();
            };
            if (!(_i < _len)) {
              return _break();
            } else {
              photo = _ref[_i];
              (function(__iced_k) {
                if (photo._id.toString() === photoId) {
                  photoPath = photo.image.split('/');
                  photoPath = photoPath[photoPath.length - 1];
                  photoPath = photoPath.substring(0, photoPath.length - 1);
                  err = void 0;
                  (function(__iced_k) {
                    __iced_deferrals = new iced.Deferrals(__iced_k, {
                      parent: ___iced_passed_deferral,
                      filename: "uploadphoto.coffee"
                    });
                    alleup.remove(photoPath, __iced_deferrals.defer({
                      assign_fn: (function() {
                        return function() {
                          return err = arguments[0];
                        };
                      })(),
                      lineno: 108
                    }));
                    __iced_deferrals._fulfill();
                  })(function() {
                    if (err) {
                      callback(err, void 0);
                    } else {
                      callback(void 0, photoId);
                    }
                    (function(__iced_k) {
                      _break();
                    })(__iced_k);
                  });
                } else {
                  return __iced_k();
                }
              })(_next);
            }
          };
          _while(__iced_k);
        })(__iced_k);
      }
    });
  };

  upload = function(incommingFile, processId, objectId, callback) {
    if (check(incommingFile['mime'])) {
      return alleup.makeVariants(incommingFile, function(err, file) {
        if (err) {
          return callback(err, void 0);
        } else {
          return callback(void 0, file);
        }
      });
    } else {
      return callback('This file type of process id: ' + processId + ' is not a photo file', void 0);
    }
  };

  check = function(mime) {
    if (mime === 'image/jpeg' || mime === 'image/png' || mime === 'image/gif') {
      return true;
    } else {
      return false;
    }
  };

}).call(this);
